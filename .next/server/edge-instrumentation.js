/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["instrumentation"],{

/***/ "./node_modules/next/constants.js":
/*!****************************************!*\
  !*** ./node_modules/next/constants.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/shared/lib/constants */ \"./node_modules/next/dist/shared/lib/constants.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsMkhBQXVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2NvbnN0YW50cy5qcz8zN2UwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L3NoYXJlZC9saWIvY29uc3RhbnRzJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/constants.js\n");

/***/ }),

/***/ "./src/instrumentation.ts":
/*!********************************!*\
  !*** ./src/instrumentation.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   onRequestError: () => (/* binding */ onRequestError),\n/* harmony export */   register: () => (/* binding */ register)\n/* harmony export */ });\n/* harmony import */ var _sentry_nextjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/nextjs */ \"./node_modules/@sentry/nextjs/build/esm/common/captureRequestError.js\");\nglobalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";\nglobalThis[\"SENTRY_RELEASE\"] = undefined;\nglobalThis[\"_sentryBasePath\"] = undefined;\nglobalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\n\nasync function register() {\n    if (false) {}\n    if (true) {\n        await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../sentry.edge.config */ \"./sentry.edge.config.ts\"));\n    }\n}\nconst onRequestError = _sentry_nextjs__WEBPACK_IMPORTED_MODULE_0__.captureRequestError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5zdHJ1bWVudGF0aW9uLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFDQSxVQUFVLENBQUMsNEJBQTRCLEdBQUc7QUFBY0EsVUFBVSxDQUFDLGlCQUFpQixHQUFHQztBQUFVRCxVQUFVLENBQUMsa0JBQWtCLEdBQUdDO0FBQVVELFVBQVUsQ0FBQyw4QkFBOEIsR0FBRztBQUFpRDtBQUVsTyxlQUFlRztJQUNwQixJQUFJQyxLQUE2QixFQUFVLEVBRTFDO0lBRUQsSUFBSUEsSUFBNkIsRUFBUTtRQUN2QyxNQUFNLDRJQUFPO0lBQ2Y7QUFDRjtBQUVPLE1BQU1HLGlCQUFpQkwsK0RBQTBCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2luc3RydW1lbnRhdGlvbi50cz80ZmFiIl0sInNvdXJjZXNDb250ZW50IjpbIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aFwiXSA9IFwiL21vbml0b3JpbmdcIjtnbG9iYWxUaGlzW1wiU0VOVFJZX1JFTEVBU0VcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlCYXNlUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyXCJdID0gXCIubmV4dFwiO2ltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25leHRqcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gJ25vZGVqcycpIHtcbiAgICBhd2FpdCBpbXBvcnQoJy4uL3NlbnRyeS5zZXJ2ZXIuY29uZmlnJyk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSAnZWRnZScpIHtcbiAgICBhd2FpdCBpbXBvcnQoJy4uL3NlbnRyeS5lZGdlLmNvbmZpZycpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBvblJlcXVlc3RFcnJvciA9IFNlbnRyeS5jYXB0dXJlUmVxdWVzdEVycm9yO1xuIl0sIm5hbWVzIjpbImdsb2JhbFRoaXMiLCJ1bmRlZmluZWQiLCJTZW50cnkiLCJyZWdpc3RlciIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1JVTlRJTUUiLCJvblJlcXVlc3RFcnJvciIsImNhcHR1cmVSZXF1ZXN0RXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/instrumentation.ts\n");

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/constants.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/constants.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    MODERN_BROWSERSLIST_TARGET: function() {\n        return _modernbrowserslisttarget.default;\n    },\n    COMPILER_NAMES: function() {\n        return COMPILER_NAMES;\n    },\n    COMPILER_INDEXES: function() {\n        return COMPILER_INDEXES;\n    },\n    PHASE_EXPORT: function() {\n        return PHASE_EXPORT;\n    },\n    PHASE_PRODUCTION_BUILD: function() {\n        return PHASE_PRODUCTION_BUILD;\n    },\n    PHASE_PRODUCTION_SERVER: function() {\n        return PHASE_PRODUCTION_SERVER;\n    },\n    PHASE_DEVELOPMENT_SERVER: function() {\n        return PHASE_DEVELOPMENT_SERVER;\n    },\n    PHASE_TEST: function() {\n        return PHASE_TEST;\n    },\n    PHASE_INFO: function() {\n        return PHASE_INFO;\n    },\n    PAGES_MANIFEST: function() {\n        return PAGES_MANIFEST;\n    },\n    APP_PATHS_MANIFEST: function() {\n        return APP_PATHS_MANIFEST;\n    },\n    APP_PATH_ROUTES_MANIFEST: function() {\n        return APP_PATH_ROUTES_MANIFEST;\n    },\n    BUILD_MANIFEST: function() {\n        return BUILD_MANIFEST;\n    },\n    APP_BUILD_MANIFEST: function() {\n        return APP_BUILD_MANIFEST;\n    },\n    FUNCTIONS_CONFIG_MANIFEST: function() {\n        return FUNCTIONS_CONFIG_MANIFEST;\n    },\n    SUBRESOURCE_INTEGRITY_MANIFEST: function() {\n        return SUBRESOURCE_INTEGRITY_MANIFEST;\n    },\n    NEXT_FONT_MANIFEST: function() {\n        return NEXT_FONT_MANIFEST;\n    },\n    EXPORT_MARKER: function() {\n        return EXPORT_MARKER;\n    },\n    EXPORT_DETAIL: function() {\n        return EXPORT_DETAIL;\n    },\n    PRERENDER_MANIFEST: function() {\n        return PRERENDER_MANIFEST;\n    },\n    ROUTES_MANIFEST: function() {\n        return ROUTES_MANIFEST;\n    },\n    IMAGES_MANIFEST: function() {\n        return IMAGES_MANIFEST;\n    },\n    SERVER_FILES_MANIFEST: function() {\n        return SERVER_FILES_MANIFEST;\n    },\n    DEV_CLIENT_PAGES_MANIFEST: function() {\n        return DEV_CLIENT_PAGES_MANIFEST;\n    },\n    MIDDLEWARE_MANIFEST: function() {\n        return MIDDLEWARE_MANIFEST;\n    },\n    DEV_MIDDLEWARE_MANIFEST: function() {\n        return DEV_MIDDLEWARE_MANIFEST;\n    },\n    REACT_LOADABLE_MANIFEST: function() {\n        return REACT_LOADABLE_MANIFEST;\n    },\n    FONT_MANIFEST: function() {\n        return FONT_MANIFEST;\n    },\n    SERVER_DIRECTORY: function() {\n        return SERVER_DIRECTORY;\n    },\n    CONFIG_FILES: function() {\n        return CONFIG_FILES;\n    },\n    BUILD_ID_FILE: function() {\n        return BUILD_ID_FILE;\n    },\n    BLOCKED_PAGES: function() {\n        return BLOCKED_PAGES;\n    },\n    CLIENT_PUBLIC_FILES_PATH: function() {\n        return CLIENT_PUBLIC_FILES_PATH;\n    },\n    CLIENT_STATIC_FILES_PATH: function() {\n        return CLIENT_STATIC_FILES_PATH;\n    },\n    STRING_LITERAL_DROP_BUNDLE: function() {\n        return STRING_LITERAL_DROP_BUNDLE;\n    },\n    NEXT_BUILTIN_DOCUMENT: function() {\n        return NEXT_BUILTIN_DOCUMENT;\n    },\n    CLIENT_REFERENCE_MANIFEST: function() {\n        return CLIENT_REFERENCE_MANIFEST;\n    },\n    SERVER_REFERENCE_MANIFEST: function() {\n        return SERVER_REFERENCE_MANIFEST;\n    },\n    MIDDLEWARE_BUILD_MANIFEST: function() {\n        return MIDDLEWARE_BUILD_MANIFEST;\n    },\n    MIDDLEWARE_REACT_LOADABLE_MANIFEST: function() {\n        return MIDDLEWARE_REACT_LOADABLE_MANIFEST;\n    },\n    CLIENT_STATIC_FILES_RUNTIME_MAIN: function() {\n        return CLIENT_STATIC_FILES_RUNTIME_MAIN;\n    },\n    CLIENT_STATIC_FILES_RUNTIME_MAIN_APP: function() {\n        return CLIENT_STATIC_FILES_RUNTIME_MAIN_APP;\n    },\n    APP_CLIENT_INTERNALS: function() {\n        return APP_CLIENT_INTERNALS;\n    },\n    CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH: function() {\n        return CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH;\n    },\n    CLIENT_STATIC_FILES_RUNTIME_AMP: function() {\n        return CLIENT_STATIC_FILES_RUNTIME_AMP;\n    },\n    CLIENT_STATIC_FILES_RUNTIME_WEBPACK: function() {\n        return CLIENT_STATIC_FILES_RUNTIME_WEBPACK;\n    },\n    CLIENT_STATIC_FILES_RUNTIME_POLYFILLS: function() {\n        return CLIENT_STATIC_FILES_RUNTIME_POLYFILLS;\n    },\n    CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL: function() {\n        return CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL;\n    },\n    EDGE_RUNTIME_WEBPACK: function() {\n        return EDGE_RUNTIME_WEBPACK;\n    },\n    TEMPORARY_REDIRECT_STATUS: function() {\n        return TEMPORARY_REDIRECT_STATUS;\n    },\n    PERMANENT_REDIRECT_STATUS: function() {\n        return PERMANENT_REDIRECT_STATUS;\n    },\n    STATIC_PROPS_ID: function() {\n        return STATIC_PROPS_ID;\n    },\n    SERVER_PROPS_ID: function() {\n        return SERVER_PROPS_ID;\n    },\n    PAGE_SEGMENT_KEY: function() {\n        return PAGE_SEGMENT_KEY;\n    },\n    GOOGLE_FONT_PROVIDER: function() {\n        return GOOGLE_FONT_PROVIDER;\n    },\n    OPTIMIZED_FONT_PROVIDERS: function() {\n        return OPTIMIZED_FONT_PROVIDERS;\n    },\n    DEFAULT_SERIF_FONT: function() {\n        return DEFAULT_SERIF_FONT;\n    },\n    DEFAULT_SANS_SERIF_FONT: function() {\n        return DEFAULT_SANS_SERIF_FONT;\n    },\n    STATIC_STATUS_PAGES: function() {\n        return STATIC_STATUS_PAGES;\n    },\n    TRACE_OUTPUT_VERSION: function() {\n        return TRACE_OUTPUT_VERSION;\n    },\n    TURBO_TRACE_DEFAULT_MEMORY_LIMIT: function() {\n        return TURBO_TRACE_DEFAULT_MEMORY_LIMIT;\n    },\n    RSC_MODULE_TYPES: function() {\n        return RSC_MODULE_TYPES;\n    },\n    EDGE_UNSUPPORTED_NODE_APIS: function() {\n        return EDGE_UNSUPPORTED_NODE_APIS;\n    },\n    SYSTEM_ENTRYPOINTS: function() {\n        return SYSTEM_ENTRYPOINTS;\n    }\n});\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _modernbrowserslisttarget = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./modern-browserslist-target */ \"./node_modules/next/dist/shared/lib/modern-browserslist-target.js\"));\nconst COMPILER_NAMES = {\n    client: \"client\",\n    server: \"server\",\n    edgeServer: \"edge-server\"\n};\nconst COMPILER_INDEXES = {\n    [COMPILER_NAMES.client]: 0,\n    [COMPILER_NAMES.server]: 1,\n    [COMPILER_NAMES.edgeServer]: 2\n};\nconst PHASE_EXPORT = \"phase-export\";\nconst PHASE_PRODUCTION_BUILD = \"phase-production-build\";\nconst PHASE_PRODUCTION_SERVER = \"phase-production-server\";\nconst PHASE_DEVELOPMENT_SERVER = \"phase-development-server\";\nconst PHASE_TEST = \"phase-test\";\nconst PHASE_INFO = \"phase-info\";\nconst PAGES_MANIFEST = \"pages-manifest.json\";\nconst APP_PATHS_MANIFEST = \"app-paths-manifest.json\";\nconst APP_PATH_ROUTES_MANIFEST = \"app-path-routes-manifest.json\";\nconst BUILD_MANIFEST = \"build-manifest.json\";\nconst APP_BUILD_MANIFEST = \"app-build-manifest.json\";\nconst FUNCTIONS_CONFIG_MANIFEST = \"functions-config-manifest.json\";\nconst SUBRESOURCE_INTEGRITY_MANIFEST = \"subresource-integrity-manifest\";\nconst NEXT_FONT_MANIFEST = \"next-font-manifest\";\nconst EXPORT_MARKER = \"export-marker.json\";\nconst EXPORT_DETAIL = \"export-detail.json\";\nconst PRERENDER_MANIFEST = \"prerender-manifest.json\";\nconst ROUTES_MANIFEST = \"routes-manifest.json\";\nconst IMAGES_MANIFEST = \"images-manifest.json\";\nconst SERVER_FILES_MANIFEST = \"required-server-files.json\";\nconst DEV_CLIENT_PAGES_MANIFEST = \"_devPagesManifest.json\";\nconst MIDDLEWARE_MANIFEST = \"middleware-manifest.json\";\nconst DEV_MIDDLEWARE_MANIFEST = \"_devMiddlewareManifest.json\";\nconst REACT_LOADABLE_MANIFEST = \"react-loadable-manifest.json\";\nconst FONT_MANIFEST = \"font-manifest.json\";\nconst SERVER_DIRECTORY = \"server\";\nconst CONFIG_FILES = [\n    \"next.config.js\",\n    \"next.config.mjs\"\n];\nconst BUILD_ID_FILE = \"BUILD_ID\";\nconst BLOCKED_PAGES = [\n    \"/_document\",\n    \"/_app\",\n    \"/_error\"\n];\nconst CLIENT_PUBLIC_FILES_PATH = \"public\";\nconst CLIENT_STATIC_FILES_PATH = \"static\";\nconst STRING_LITERAL_DROP_BUNDLE = \"__NEXT_DROP_CLIENT_FILE__\";\nconst NEXT_BUILTIN_DOCUMENT = \"__NEXT_BUILTIN_DOCUMENT__\";\nconst CLIENT_REFERENCE_MANIFEST = \"client-reference-manifest\";\nconst SERVER_REFERENCE_MANIFEST = \"server-reference-manifest\";\nconst MIDDLEWARE_BUILD_MANIFEST = \"middleware-build-manifest\";\nconst MIDDLEWARE_REACT_LOADABLE_MANIFEST = \"middleware-react-loadable-manifest\";\nconst CLIENT_STATIC_FILES_RUNTIME_MAIN = \"main\";\nconst CLIENT_STATIC_FILES_RUNTIME_MAIN_APP = \"\" + CLIENT_STATIC_FILES_RUNTIME_MAIN + \"-app\";\nconst APP_CLIENT_INTERNALS = \"app-pages-internals\";\nconst CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH = \"react-refresh\";\nconst CLIENT_STATIC_FILES_RUNTIME_AMP = \"amp\";\nconst CLIENT_STATIC_FILES_RUNTIME_WEBPACK = \"webpack\";\nconst CLIENT_STATIC_FILES_RUNTIME_POLYFILLS = \"polyfills\";\nconst CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL = Symbol(CLIENT_STATIC_FILES_RUNTIME_POLYFILLS);\nconst EDGE_RUNTIME_WEBPACK = \"edge-runtime-webpack\";\nconst TEMPORARY_REDIRECT_STATUS = 307;\nconst PERMANENT_REDIRECT_STATUS = 308;\nconst STATIC_PROPS_ID = \"__N_SSG\";\nconst SERVER_PROPS_ID = \"__N_SSP\";\nconst PAGE_SEGMENT_KEY = \"__PAGE__\";\nconst GOOGLE_FONT_PROVIDER = \"https://fonts.googleapis.com/\";\nconst OPTIMIZED_FONT_PROVIDERS = [\n    {\n        url: GOOGLE_FONT_PROVIDER,\n        preconnect: \"https://fonts.gstatic.com\"\n    },\n    {\n        url: \"https://use.typekit.net\",\n        preconnect: \"https://use.typekit.net\"\n    }\n];\nconst DEFAULT_SERIF_FONT = {\n    name: \"Times New Roman\",\n    xAvgCharWidth: 821,\n    azAvgWidth: 854.3953488372093,\n    unitsPerEm: 2048\n};\nconst DEFAULT_SANS_SERIF_FONT = {\n    name: \"Arial\",\n    xAvgCharWidth: 904,\n    azAvgWidth: 934.5116279069767,\n    unitsPerEm: 2048\n};\nconst STATIC_STATUS_PAGES = [\n    \"/500\"\n];\nconst TRACE_OUTPUT_VERSION = 1;\nconst TURBO_TRACE_DEFAULT_MEMORY_LIMIT = 6000;\nconst RSC_MODULE_TYPES = {\n    client: \"client\",\n    server: \"server\"\n};\nconst EDGE_UNSUPPORTED_NODE_APIS = [\n    \"clearImmediate\",\n    \"setImmediate\",\n    \"BroadcastChannel\",\n    \"ByteLengthQueuingStrategy\",\n    \"CompressionStream\",\n    \"CountQueuingStrategy\",\n    \"DecompressionStream\",\n    \"DomException\",\n    \"MessageChannel\",\n    \"MessageEvent\",\n    \"MessagePort\",\n    \"ReadableByteStreamController\",\n    \"ReadableStreamBYOBRequest\",\n    \"ReadableStreamDefaultController\",\n    \"TransformStreamDefaultController\",\n    \"WritableStreamDefaultController\"\n];\nconst SYSTEM_ENTRYPOINTS = new Set([\n    CLIENT_STATIC_FILES_RUNTIME_MAIN,\n    CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH,\n    CLIENT_STATIC_FILES_RUNTIME_AMP,\n    CLIENT_STATIC_FILES_RUNTIME_MAIN_APP\n]);\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/constants.js\n");

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/modern-browserslist-target.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/modern-browserslist-target.js ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
eval("// Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.\n// Keep file changes in sync with the corresponding `.d.ts` files.\n/**\n * These are the browser versions that support all of the following:\n * static import: https://caniuse.com/es6-module\n * dynamic import: https://caniuse.com/es6-module-dynamic-import\n * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta\n */ \nconst MODERN_BROWSERSLIST_TARGET = [\n    \"chrome 64\",\n    \"edge 79\",\n    \"firefox 67\",\n    \"opera 51\",\n    \"safari 12\"\n];\nmodule.exports = MODERN_BROWSERSLIST_TARGET; //# sourceMappingURL=modern-browserslist-target.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvbW9kZXJuLWJyb3dzZXJzbGlzdC10YXJnZXQuanMiLCJtYXBwaW5ncyI6IkFBQUEsb0ZBQW9GO0FBQ3BGLGtFQUFrRTtBQUNsRTs7Ozs7Q0FLQyxHQUFnQjtBQUNqQixNQUFNQSw2QkFBNkI7SUFDL0I7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0RDLE9BQU9DLE9BQU8sR0FBR0YsNEJBRWpCLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvbW9kZXJuLWJyb3dzZXJzbGlzdC10YXJnZXQuanM/YmUyOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOb3RlOiBUaGlzIGZpbGUgaXMgSlMgYmVjYXVzZSBpdCdzIHVzZWQgYnkgdGhlIHRhc2tmaWxlLXN3Yy5qcyBmaWxlLCB3aGljaCBpcyBKUy5cbi8vIEtlZXAgZmlsZSBjaGFuZ2VzIGluIHN5bmMgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBgLmQudHNgIGZpbGVzLlxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIGJyb3dzZXIgdmVyc2lvbnMgdGhhdCBzdXBwb3J0IGFsbCBvZiB0aGUgZm9sbG93aW5nOlxuICogc3RhdGljIGltcG9ydDogaHR0cHM6Ly9jYW5pdXNlLmNvbS9lczYtbW9kdWxlXG4gKiBkeW5hbWljIGltcG9ydDogaHR0cHM6Ly9jYW5pdXNlLmNvbS9lczYtbW9kdWxlLWR5bmFtaWMtaW1wb3J0XG4gKiBpbXBvcnQubWV0YTogaHR0cHM6Ly9jYW5pdXNlLmNvbS9tZG4tamF2YXNjcmlwdF9vcGVyYXRvcnNfaW1wb3J0X21ldGFcbiAqLyBcInVzZSBzdHJpY3RcIjtcbmNvbnN0IE1PREVSTl9CUk9XU0VSU0xJU1RfVEFSR0VUID0gW1xuICAgIFwiY2hyb21lIDY0XCIsXG4gICAgXCJlZGdlIDc5XCIsXG4gICAgXCJmaXJlZm94IDY3XCIsXG4gICAgXCJvcGVyYSA1MVwiLFxuICAgIFwic2FmYXJpIDEyXCJcbl07XG5tb2R1bGUuZXhwb3J0cyA9IE1PREVSTl9CUk9XU0VSU0xJU1RfVEFSR0VUO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2Rlcm4tYnJvd3NlcnNsaXN0LXRhcmdldC5qcy5tYXAiXSwibmFtZXMiOlsiTU9ERVJOX0JST1dTRVJTTElTVF9UQVJHRVQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/modern-browserslist-target.js\n");

/***/ }),

/***/ "./sentry.edge.config.ts":
/*!*******************************!*\
  !*** ./sentry.edge.config.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sentry_nextjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/nextjs */ \"./node_modules/@sentry/nextjs/build/esm/edge/index.js\");\n// This file configures the initialization of Sentry for edge features (middleware, edge routes, and so on).\n// The config you add here will be used whenever one of the edge features is loaded.\n// Note that this config is unrelated to the Vercel Edge Runtime and is also required when running locally.\n// https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n_sentry_nextjs__WEBPACK_IMPORTED_MODULE_0__.init({\n    dsn: \"https://0d094a34d123a2f68577afbbe5362c45@o4509412740694016.ingest.de.sentry.io/4509412746133584\",\n    // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n    tracesSampleRate: 1,\n    // Setting this option to true will print useful information to the console while you're setting up Sentry.\n    debug: false\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zZW50cnkuZWRnZS5jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSw0R0FBNEc7QUFDNUcsb0ZBQW9GO0FBQ3BGLDJHQUEyRztBQUMzRyw2REFBNkQ7QUFFcEI7QUFFekNBLGdEQUFXLENBQUM7SUFDVkUsS0FBSztJQUVMLG1IQUFtSDtJQUNuSEMsa0JBQWtCO0lBRWxCLDJHQUEyRztJQUMzR0MsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NlbnRyeS5lZGdlLmNvbmZpZy50cz8wZmZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBjb25maWd1cmVzIHRoZSBpbml0aWFsaXphdGlvbiBvZiBTZW50cnkgZm9yIGVkZ2UgZmVhdHVyZXMgKG1pZGRsZXdhcmUsIGVkZ2Ugcm91dGVzLCBhbmQgc28gb24pLlxuLy8gVGhlIGNvbmZpZyB5b3UgYWRkIGhlcmUgd2lsbCBiZSB1c2VkIHdoZW5ldmVyIG9uZSBvZiB0aGUgZWRnZSBmZWF0dXJlcyBpcyBsb2FkZWQuXG4vLyBOb3RlIHRoYXQgdGhpcyBjb25maWcgaXMgdW5yZWxhdGVkIHRvIHRoZSBWZXJjZWwgRWRnZSBSdW50aW1lIGFuZCBpcyBhbHNvIHJlcXVpcmVkIHdoZW4gcnVubmluZyBsb2NhbGx5LlxuLy8gaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbmV4dGpzL1xuXG5pbXBvcnQgKiBhcyBTZW50cnkgZnJvbSBcIkBzZW50cnkvbmV4dGpzXCI7XG5cblNlbnRyeS5pbml0KHtcbiAgZHNuOiBcImh0dHBzOi8vMGQwOTRhMzRkMTIzYTJmNjg1NzdhZmJiZTUzNjJjNDVAbzQ1MDk0MTI3NDA2OTQwMTYuaW5nZXN0LmRlLnNlbnRyeS5pby80NTA5NDEyNzQ2MTMzNTg0XCIsXG5cbiAgLy8gRGVmaW5lIGhvdyBsaWtlbHkgdHJhY2VzIGFyZSBzYW1wbGVkLiBBZGp1c3QgdGhpcyB2YWx1ZSBpbiBwcm9kdWN0aW9uLCBvciB1c2UgdHJhY2VzU2FtcGxlciBmb3IgZ3JlYXRlciBjb250cm9sLlxuICB0cmFjZXNTYW1wbGVSYXRlOiAxLFxuXG4gIC8vIFNldHRpbmcgdGhpcyBvcHRpb24gdG8gdHJ1ZSB3aWxsIHByaW50IHVzZWZ1bCBpbmZvcm1hdGlvbiB0byB0aGUgY29uc29sZSB3aGlsZSB5b3UncmUgc2V0dGluZyB1cCBTZW50cnkuXG4gIGRlYnVnOiBmYWxzZSxcbn0pO1xuIl0sIm5hbWVzIjpbIlNlbnRyeSIsImluaXQiLCJkc24iLCJ0cmFjZXNTYW1wbGVSYXRlIiwiZGVidWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./sentry.edge.config.ts\n");

/***/ }),

/***/ "./node_modules/next/dist/compiled/@opentelemetry/api/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@opentelemetry/api/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var __dirname = \"/\";\n(()=>{\"use strict\";var e={339:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ContextAPI=void 0;const n=r(44);const a=r(38);const o=r(741);const i=\"context\";const c=new n.NoopContextManager;class ContextAPI{constructor(){}static getInstance(){if(!this._instance){this._instance=new ContextAPI}return this._instance}setGlobalContextManager(e){return(0,a.registerGlobal)(i,e,o.DiagAPI.instance())}active(){return this._getContextManager().active()}with(e,t,r,...n){return this._getContextManager().with(e,t,r,...n)}bind(e,t){return this._getContextManager().bind(e,t)}_getContextManager(){return(0,a.getGlobal)(i)||c}disable(){this._getContextManager().disable();(0,a.unregisterGlobal)(i,o.DiagAPI.instance())}}t.ContextAPI=ContextAPI},741:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagAPI=void 0;const n=r(144);const a=r(871);const o=r(133);const i=r(38);const c=\"diag\";class DiagAPI{constructor(){function _logProxy(e){return function(...t){const r=(0,i.getGlobal)(\"diag\");if(!r)return;return r[e](...t)}}const e=this;const setLogger=(t,r={logLevel:o.DiagLogLevel.INFO})=>{var n,c,s;if(t===e){const t=new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");e.error((n=t.stack)!==null&&n!==void 0?n:t.message);return false}if(typeof r===\"number\"){r={logLevel:r}}const u=(0,i.getGlobal)(\"diag\");const l=(0,a.createLogLevelDiagLogger)((c=r.logLevel)!==null&&c!==void 0?c:o.DiagLogLevel.INFO,t);if(u&&!r.suppressOverrideMessage){const e=(s=(new Error).stack)!==null&&s!==void 0?s:\"<failed to generate stacktrace>\";u.warn(`Current logger will be overwritten from ${e}`);l.warn(`Current logger will overwrite one already registered from ${e}`)}return(0,i.registerGlobal)(\"diag\",l,e,true)};e.setLogger=setLogger;e.disable=()=>{(0,i.unregisterGlobal)(c,e)};e.createComponentLogger=e=>new n.DiagComponentLogger(e);e.verbose=_logProxy(\"verbose\");e.debug=_logProxy(\"debug\");e.info=_logProxy(\"info\");e.warn=_logProxy(\"warn\");e.error=_logProxy(\"error\")}static instance(){if(!this._instance){this._instance=new DiagAPI}return this._instance}}t.DiagAPI=DiagAPI},128:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.MetricsAPI=void 0;const n=r(333);const a=r(38);const o=r(741);const i=\"metrics\";class MetricsAPI{constructor(){}static getInstance(){if(!this._instance){this._instance=new MetricsAPI}return this._instance}setGlobalMeterProvider(e){return(0,a.registerGlobal)(i,e,o.DiagAPI.instance())}getMeterProvider(){return(0,a.getGlobal)(i)||n.NOOP_METER_PROVIDER}getMeter(e,t,r){return this.getMeterProvider().getMeter(e,t,r)}disable(){(0,a.unregisterGlobal)(i,o.DiagAPI.instance())}}t.MetricsAPI=MetricsAPI},930:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.PropagationAPI=void 0;const n=r(38);const a=r(600);const o=r(625);const i=r(377);const c=r(701);const s=r(741);const u=\"propagation\";const l=new a.NoopTextMapPropagator;class PropagationAPI{constructor(){this.createBaggage=c.createBaggage;this.getBaggage=i.getBaggage;this.getActiveBaggage=i.getActiveBaggage;this.setBaggage=i.setBaggage;this.deleteBaggage=i.deleteBaggage}static getInstance(){if(!this._instance){this._instance=new PropagationAPI}return this._instance}setGlobalPropagator(e){return(0,n.registerGlobal)(u,e,s.DiagAPI.instance())}inject(e,t,r=o.defaultTextMapSetter){return this._getGlobalPropagator().inject(e,t,r)}extract(e,t,r=o.defaultTextMapGetter){return this._getGlobalPropagator().extract(e,t,r)}fields(){return this._getGlobalPropagator().fields()}disable(){(0,n.unregisterGlobal)(u,s.DiagAPI.instance())}_getGlobalPropagator(){return(0,n.getGlobal)(u)||l}}t.PropagationAPI=PropagationAPI},967:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceAPI=void 0;const n=r(38);const a=r(414);const o=r(994);const i=r(542);const c=r(741);const s=\"trace\";class TraceAPI{constructor(){this._proxyTracerProvider=new a.ProxyTracerProvider;this.wrapSpanContext=o.wrapSpanContext;this.isSpanContextValid=o.isSpanContextValid;this.deleteSpan=i.deleteSpan;this.getSpan=i.getSpan;this.getActiveSpan=i.getActiveSpan;this.getSpanContext=i.getSpanContext;this.setSpan=i.setSpan;this.setSpanContext=i.setSpanContext}static getInstance(){if(!this._instance){this._instance=new TraceAPI}return this._instance}setGlobalTracerProvider(e){const t=(0,n.registerGlobal)(s,this._proxyTracerProvider,c.DiagAPI.instance());if(t){this._proxyTracerProvider.setDelegate(e)}return t}getTracerProvider(){return(0,n.getGlobal)(s)||this._proxyTracerProvider}getTracer(e,t){return this.getTracerProvider().getTracer(e,t)}disable(){(0,n.unregisterGlobal)(s,c.DiagAPI.instance());this._proxyTracerProvider=new a.ProxyTracerProvider}}t.TraceAPI=TraceAPI},377:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.deleteBaggage=t.setBaggage=t.getActiveBaggage=t.getBaggage=void 0;const n=r(339);const a=r(421);const o=(0,a.createContextKey)(\"OpenTelemetry Baggage Key\");function getBaggage(e){return e.getValue(o)||undefined}t.getBaggage=getBaggage;function getActiveBaggage(){return getBaggage(n.ContextAPI.getInstance().active())}t.getActiveBaggage=getActiveBaggage;function setBaggage(e,t){return e.setValue(o,t)}t.setBaggage=setBaggage;function deleteBaggage(e){return e.deleteValue(o)}t.deleteBaggage=deleteBaggage},496:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.BaggageImpl=void 0;class BaggageImpl{constructor(e){this._entries=e?new Map(e):new Map}getEntry(e){const t=this._entries.get(e);if(!t){return undefined}return Object.assign({},t)}getAllEntries(){return Array.from(this._entries.entries()).map((([e,t])=>[e,t]))}setEntry(e,t){const r=new BaggageImpl(this._entries);r._entries.set(e,t);return r}removeEntry(e){const t=new BaggageImpl(this._entries);t._entries.delete(e);return t}removeEntries(...e){const t=new BaggageImpl(this._entries);for(const r of e){t._entries.delete(r)}return t}clear(){return new BaggageImpl}}t.BaggageImpl=BaggageImpl},817:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.baggageEntryMetadataSymbol=void 0;t.baggageEntryMetadataSymbol=Symbol(\"BaggageEntryMetadata\")},701:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.baggageEntryMetadataFromString=t.createBaggage=void 0;const n=r(741);const a=r(496);const o=r(817);const i=n.DiagAPI.instance();function createBaggage(e={}){return new a.BaggageImpl(new Map(Object.entries(e)))}t.createBaggage=createBaggage;function baggageEntryMetadataFromString(e){if(typeof e!==\"string\"){i.error(`Cannot create baggage metadata from unknown type: ${typeof e}`);e=\"\"}return{__TYPE__:o.baggageEntryMetadataSymbol,toString(){return e}}}t.baggageEntryMetadataFromString=baggageEntryMetadataFromString},388:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.context=void 0;const n=r(339);t.context=n.ContextAPI.getInstance()},44:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopContextManager=void 0;const n=r(421);class NoopContextManager{active(){return n.ROOT_CONTEXT}with(e,t,r,...n){return t.call(r,...n)}bind(e,t){return t}enable(){return this}disable(){return this}}t.NoopContextManager=NoopContextManager},421:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ROOT_CONTEXT=t.createContextKey=void 0;function createContextKey(e){return Symbol.for(e)}t.createContextKey=createContextKey;class BaseContext{constructor(e){const t=this;t._currentContext=e?new Map(e):new Map;t.getValue=e=>t._currentContext.get(e);t.setValue=(e,r)=>{const n=new BaseContext(t._currentContext);n._currentContext.set(e,r);return n};t.deleteValue=e=>{const r=new BaseContext(t._currentContext);r._currentContext.delete(e);return r}}}t.ROOT_CONTEXT=new BaseContext},920:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.diag=void 0;const n=r(741);t.diag=n.DiagAPI.instance()},144:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagComponentLogger=void 0;const n=r(38);class DiagComponentLogger{constructor(e){this._namespace=e.namespace||\"DiagComponentLogger\"}debug(...e){return logProxy(\"debug\",this._namespace,e)}error(...e){return logProxy(\"error\",this._namespace,e)}info(...e){return logProxy(\"info\",this._namespace,e)}warn(...e){return logProxy(\"warn\",this._namespace,e)}verbose(...e){return logProxy(\"verbose\",this._namespace,e)}}t.DiagComponentLogger=DiagComponentLogger;function logProxy(e,t,r){const a=(0,n.getGlobal)(\"diag\");if(!a){return}r.unshift(t);return a[e](...r)}},689:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagConsoleLogger=void 0;const r=[{n:\"error\",c:\"error\"},{n:\"warn\",c:\"warn\"},{n:\"info\",c:\"info\"},{n:\"debug\",c:\"debug\"},{n:\"verbose\",c:\"trace\"}];class DiagConsoleLogger{constructor(){function _consoleFunc(e){return function(...t){if(console){let r=console[e];if(typeof r!==\"function\"){r=console.log}if(typeof r===\"function\"){return r.apply(console,t)}}}}for(let e=0;e<r.length;e++){this[r[e].n]=_consoleFunc(r[e].c)}}}t.DiagConsoleLogger=DiagConsoleLogger},871:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createLogLevelDiagLogger=void 0;const n=r(133);function createLogLevelDiagLogger(e,t){if(e<n.DiagLogLevel.NONE){e=n.DiagLogLevel.NONE}else if(e>n.DiagLogLevel.ALL){e=n.DiagLogLevel.ALL}t=t||{};function _filterFunc(r,n){const a=t[r];if(typeof a===\"function\"&&e>=n){return a.bind(t)}return function(){}}return{error:_filterFunc(\"error\",n.DiagLogLevel.ERROR),warn:_filterFunc(\"warn\",n.DiagLogLevel.WARN),info:_filterFunc(\"info\",n.DiagLogLevel.INFO),debug:_filterFunc(\"debug\",n.DiagLogLevel.DEBUG),verbose:_filterFunc(\"verbose\",n.DiagLogLevel.VERBOSE)}}t.createLogLevelDiagLogger=createLogLevelDiagLogger},133:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.DiagLogLevel=void 0;var r;(function(e){e[e[\"NONE\"]=0]=\"NONE\";e[e[\"ERROR\"]=30]=\"ERROR\";e[e[\"WARN\"]=50]=\"WARN\";e[e[\"INFO\"]=60]=\"INFO\";e[e[\"DEBUG\"]=70]=\"DEBUG\";e[e[\"VERBOSE\"]=80]=\"VERBOSE\";e[e[\"ALL\"]=9999]=\"ALL\"})(r=t.DiagLogLevel||(t.DiagLogLevel={}))},38:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.unregisterGlobal=t.getGlobal=t.registerGlobal=void 0;const n=r(966);const a=r(520);const o=r(565);const i=a.VERSION.split(\".\")[0];const c=Symbol.for(`opentelemetry.js.api.${i}`);const s=n._globalThis;function registerGlobal(e,t,r,n=false){var o;const i=s[c]=(o=s[c])!==null&&o!==void 0?o:{version:a.VERSION};if(!n&&i[e]){const t=new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e}`);r.error(t.stack||t.message);return false}if(i.version!==a.VERSION){const t=new Error(`@opentelemetry/api: Registration of version v${i.version} for ${e} does not match previously registered API v${a.VERSION}`);r.error(t.stack||t.message);return false}i[e]=t;r.debug(`@opentelemetry/api: Registered a global for ${e} v${a.VERSION}.`);return true}t.registerGlobal=registerGlobal;function getGlobal(e){var t,r;const n=(t=s[c])===null||t===void 0?void 0:t.version;if(!n||!(0,o.isCompatible)(n)){return}return(r=s[c])===null||r===void 0?void 0:r[e]}t.getGlobal=getGlobal;function unregisterGlobal(e,t){t.debug(`@opentelemetry/api: Unregistering a global for ${e} v${a.VERSION}.`);const r=s[c];if(r){delete r[e]}}t.unregisterGlobal=unregisterGlobal},565:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.isCompatible=t._makeCompatibilityCheck=void 0;const n=r(520);const a=/^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;function _makeCompatibilityCheck(e){const t=new Set([e]);const r=new Set;const n=e.match(a);if(!n){return()=>false}const o={major:+n[1],minor:+n[2],patch:+n[3],prerelease:n[4]};if(o.prerelease!=null){return function isExactmatch(t){return t===e}}function _reject(e){r.add(e);return false}function _accept(e){t.add(e);return true}return function isCompatible(e){if(t.has(e)){return true}if(r.has(e)){return false}const n=e.match(a);if(!n){return _reject(e)}const i={major:+n[1],minor:+n[2],patch:+n[3],prerelease:n[4]};if(i.prerelease!=null){return _reject(e)}if(o.major!==i.major){return _reject(e)}if(o.major===0){if(o.minor===i.minor&&o.patch<=i.patch){return _accept(e)}return _reject(e)}if(o.minor<=i.minor){return _accept(e)}return _reject(e)}}t._makeCompatibilityCheck=_makeCompatibilityCheck;t.isCompatible=_makeCompatibilityCheck(n.VERSION)},934:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.metrics=void 0;const n=r(128);t.metrics=n.MetricsAPI.getInstance()},28:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ValueType=void 0;var r;(function(e){e[e[\"INT\"]=0]=\"INT\";e[e[\"DOUBLE\"]=1]=\"DOUBLE\"})(r=t.ValueType||(t.ValueType={}))},962:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createNoopMeter=t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC=t.NOOP_OBSERVABLE_GAUGE_METRIC=t.NOOP_OBSERVABLE_COUNTER_METRIC=t.NOOP_UP_DOWN_COUNTER_METRIC=t.NOOP_HISTOGRAM_METRIC=t.NOOP_COUNTER_METRIC=t.NOOP_METER=t.NoopObservableUpDownCounterMetric=t.NoopObservableGaugeMetric=t.NoopObservableCounterMetric=t.NoopObservableMetric=t.NoopHistogramMetric=t.NoopUpDownCounterMetric=t.NoopCounterMetric=t.NoopMetric=t.NoopMeter=void 0;class NoopMeter{constructor(){}createHistogram(e,r){return t.NOOP_HISTOGRAM_METRIC}createCounter(e,r){return t.NOOP_COUNTER_METRIC}createUpDownCounter(e,r){return t.NOOP_UP_DOWN_COUNTER_METRIC}createObservableGauge(e,r){return t.NOOP_OBSERVABLE_GAUGE_METRIC}createObservableCounter(e,r){return t.NOOP_OBSERVABLE_COUNTER_METRIC}createObservableUpDownCounter(e,r){return t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC}addBatchObservableCallback(e,t){}removeBatchObservableCallback(e){}}t.NoopMeter=NoopMeter;class NoopMetric{}t.NoopMetric=NoopMetric;class NoopCounterMetric extends NoopMetric{add(e,t){}}t.NoopCounterMetric=NoopCounterMetric;class NoopUpDownCounterMetric extends NoopMetric{add(e,t){}}t.NoopUpDownCounterMetric=NoopUpDownCounterMetric;class NoopHistogramMetric extends NoopMetric{record(e,t){}}t.NoopHistogramMetric=NoopHistogramMetric;class NoopObservableMetric{addCallback(e){}removeCallback(e){}}t.NoopObservableMetric=NoopObservableMetric;class NoopObservableCounterMetric extends NoopObservableMetric{}t.NoopObservableCounterMetric=NoopObservableCounterMetric;class NoopObservableGaugeMetric extends NoopObservableMetric{}t.NoopObservableGaugeMetric=NoopObservableGaugeMetric;class NoopObservableUpDownCounterMetric extends NoopObservableMetric{}t.NoopObservableUpDownCounterMetric=NoopObservableUpDownCounterMetric;t.NOOP_METER=new NoopMeter;t.NOOP_COUNTER_METRIC=new NoopCounterMetric;t.NOOP_HISTOGRAM_METRIC=new NoopHistogramMetric;t.NOOP_UP_DOWN_COUNTER_METRIC=new NoopUpDownCounterMetric;t.NOOP_OBSERVABLE_COUNTER_METRIC=new NoopObservableCounterMetric;t.NOOP_OBSERVABLE_GAUGE_METRIC=new NoopObservableGaugeMetric;t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC=new NoopObservableUpDownCounterMetric;function createNoopMeter(){return t.NOOP_METER}t.createNoopMeter=createNoopMeter},333:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NOOP_METER_PROVIDER=t.NoopMeterProvider=void 0;const n=r(962);class NoopMeterProvider{getMeter(e,t,r){return n.NOOP_METER}}t.NoopMeterProvider=NoopMeterProvider;t.NOOP_METER_PROVIDER=new NoopMeterProvider},966:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){if(n===undefined)n=r;Object.defineProperty(e,n,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,n){if(n===undefined)n=r;e[n]=t[r]});var a=this&&this.__exportStar||function(e,t){for(var r in e)if(r!==\"default\"&&!Object.prototype.hasOwnProperty.call(t,r))n(t,e,r)};Object.defineProperty(t,\"__esModule\",{value:true});a(r(652),t)},385:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t._globalThis=void 0;t._globalThis=typeof globalThis===\"object\"?globalThis:__webpack_require__.g},652:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){if(n===undefined)n=r;Object.defineProperty(e,n,{enumerable:true,get:function(){return t[r]}})}:function(e,t,r,n){if(n===undefined)n=r;e[n]=t[r]});var a=this&&this.__exportStar||function(e,t){for(var r in e)if(r!==\"default\"&&!Object.prototype.hasOwnProperty.call(t,r))n(t,e,r)};Object.defineProperty(t,\"__esModule\",{value:true});a(r(385),t)},251:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.propagation=void 0;const n=r(930);t.propagation=n.PropagationAPI.getInstance()},600:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTextMapPropagator=void 0;class NoopTextMapPropagator{inject(e,t){}extract(e,t){return e}fields(){return[]}}t.NoopTextMapPropagator=NoopTextMapPropagator},625:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.defaultTextMapSetter=t.defaultTextMapGetter=void 0;t.defaultTextMapGetter={get(e,t){if(e==null){return undefined}return e[t]},keys(e){if(e==null){return[]}return Object.keys(e)}};t.defaultTextMapSetter={set(e,t,r){if(e==null){return}e[t]=r}}},978:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.trace=void 0;const n=r(967);t.trace=n.TraceAPI.getInstance()},76:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NonRecordingSpan=void 0;const n=r(304);class NonRecordingSpan{constructor(e=n.INVALID_SPAN_CONTEXT){this._spanContext=e}spanContext(){return this._spanContext}setAttribute(e,t){return this}setAttributes(e){return this}addEvent(e,t){return this}setStatus(e){return this}updateName(e){return this}end(e){}isRecording(){return false}recordException(e,t){}}t.NonRecordingSpan=NonRecordingSpan},527:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTracer=void 0;const n=r(339);const a=r(542);const o=r(76);const i=r(994);const c=n.ContextAPI.getInstance();class NoopTracer{startSpan(e,t,r=c.active()){const n=Boolean(t===null||t===void 0?void 0:t.root);if(n){return new o.NonRecordingSpan}const s=r&&(0,a.getSpanContext)(r);if(isSpanContext(s)&&(0,i.isSpanContextValid)(s)){return new o.NonRecordingSpan(s)}else{return new o.NonRecordingSpan}}startActiveSpan(e,t,r,n){let o;let i;let s;if(arguments.length<2){return}else if(arguments.length===2){s=t}else if(arguments.length===3){o=t;s=r}else{o=t;i=r;s=n}const u=i!==null&&i!==void 0?i:c.active();const l=this.startSpan(e,o,u);const g=(0,a.setSpan)(u,l);return c.with(g,s,undefined,l)}}t.NoopTracer=NoopTracer;function isSpanContext(e){return typeof e===\"object\"&&typeof e[\"spanId\"]===\"string\"&&typeof e[\"traceId\"]===\"string\"&&typeof e[\"traceFlags\"]===\"number\"}},228:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.NoopTracerProvider=void 0;const n=r(527);class NoopTracerProvider{getTracer(e,t,r){return new n.NoopTracer}}t.NoopTracerProvider=NoopTracerProvider},387:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ProxyTracer=void 0;const n=r(527);const a=new n.NoopTracer;class ProxyTracer{constructor(e,t,r,n){this._provider=e;this.name=t;this.version=r;this.options=n}startSpan(e,t,r){return this._getTracer().startSpan(e,t,r)}startActiveSpan(e,t,r,n){const a=this._getTracer();return Reflect.apply(a.startActiveSpan,a,arguments)}_getTracer(){if(this._delegate){return this._delegate}const e=this._provider.getDelegateTracer(this.name,this.version,this.options);if(!e){return a}this._delegate=e;return this._delegate}}t.ProxyTracer=ProxyTracer},414:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.ProxyTracerProvider=void 0;const n=r(387);const a=r(228);const o=new a.NoopTracerProvider;class ProxyTracerProvider{getTracer(e,t,r){var a;return(a=this.getDelegateTracer(e,t,r))!==null&&a!==void 0?a:new n.ProxyTracer(this,e,t,r)}getDelegate(){var e;return(e=this._delegate)!==null&&e!==void 0?e:o}setDelegate(e){this._delegate=e}getDelegateTracer(e,t,r){var n;return(n=this._delegate)===null||n===void 0?void 0:n.getTracer(e,t,r)}}t.ProxyTracerProvider=ProxyTracerProvider},505:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SamplingDecision=void 0;var r;(function(e){e[e[\"NOT_RECORD\"]=0]=\"NOT_RECORD\";e[e[\"RECORD\"]=1]=\"RECORD\";e[e[\"RECORD_AND_SAMPLED\"]=2]=\"RECORD_AND_SAMPLED\"})(r=t.SamplingDecision||(t.SamplingDecision={}))},542:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.getSpanContext=t.setSpanContext=t.deleteSpan=t.setSpan=t.getActiveSpan=t.getSpan=void 0;const n=r(421);const a=r(76);const o=r(339);const i=(0,n.createContextKey)(\"OpenTelemetry Context Key SPAN\");function getSpan(e){return e.getValue(i)||undefined}t.getSpan=getSpan;function getActiveSpan(){return getSpan(o.ContextAPI.getInstance().active())}t.getActiveSpan=getActiveSpan;function setSpan(e,t){return e.setValue(i,t)}t.setSpan=setSpan;function deleteSpan(e){return e.deleteValue(i)}t.deleteSpan=deleteSpan;function setSpanContext(e,t){return setSpan(e,new a.NonRecordingSpan(t))}t.setSpanContext=setSpanContext;function getSpanContext(e){var t;return(t=getSpan(e))===null||t===void 0?void 0:t.spanContext()}t.getSpanContext=getSpanContext},430:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceStateImpl=void 0;const n=r(450);const a=32;const o=512;const i=\",\";const c=\"=\";class TraceStateImpl{constructor(e){this._internalState=new Map;if(e)this._parse(e)}set(e,t){const r=this._clone();if(r._internalState.has(e)){r._internalState.delete(e)}r._internalState.set(e,t);return r}unset(e){const t=this._clone();t._internalState.delete(e);return t}get(e){return this._internalState.get(e)}serialize(){return this._keys().reduce(((e,t)=>{e.push(t+c+this.get(t));return e}),[]).join(i)}_parse(e){if(e.length>o)return;this._internalState=e.split(i).reverse().reduce(((e,t)=>{const r=t.trim();const a=r.indexOf(c);if(a!==-1){const o=r.slice(0,a);const i=r.slice(a+1,t.length);if((0,n.validateKey)(o)&&(0,n.validateValue)(i)){e.set(o,i)}else{}}return e}),new Map);if(this._internalState.size>a){this._internalState=new Map(Array.from(this._internalState.entries()).reverse().slice(0,a))}}_keys(){return Array.from(this._internalState.keys()).reverse()}_clone(){const e=new TraceStateImpl;e._internalState=new Map(this._internalState);return e}}t.TraceStateImpl=TraceStateImpl},450:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.validateValue=t.validateKey=void 0;const r=\"[_0-9a-z-*/]\";const n=`[a-z]${r}{0,255}`;const a=`[a-z0-9]${r}{0,240}@[a-z]${r}{0,13}`;const o=new RegExp(`^(?:${n}|${a})$`);const i=/^[ -~]{0,255}[!-~]$/;const c=/,|=/;function validateKey(e){return o.test(e)}t.validateKey=validateKey;function validateValue(e){return i.test(e)&&!c.test(e)}t.validateValue=validateValue},757:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.createTraceState=void 0;const n=r(430);function createTraceState(e){return new n.TraceStateImpl(e)}t.createTraceState=createTraceState},304:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.INVALID_SPAN_CONTEXT=t.INVALID_TRACEID=t.INVALID_SPANID=void 0;const n=r(762);t.INVALID_SPANID=\"0000000000000000\";t.INVALID_TRACEID=\"00000000000000000000000000000000\";t.INVALID_SPAN_CONTEXT={traceId:t.INVALID_TRACEID,spanId:t.INVALID_SPANID,traceFlags:n.TraceFlags.NONE}},902:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SpanKind=void 0;var r;(function(e){e[e[\"INTERNAL\"]=0]=\"INTERNAL\";e[e[\"SERVER\"]=1]=\"SERVER\";e[e[\"CLIENT\"]=2]=\"CLIENT\";e[e[\"PRODUCER\"]=3]=\"PRODUCER\";e[e[\"CONSUMER\"]=4]=\"CONSUMER\"})(r=t.SpanKind||(t.SpanKind={}))},994:(e,t,r)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.wrapSpanContext=t.isSpanContextValid=t.isValidSpanId=t.isValidTraceId=void 0;const n=r(304);const a=r(76);const o=/^([0-9a-f]{32})$/i;const i=/^[0-9a-f]{16}$/i;function isValidTraceId(e){return o.test(e)&&e!==n.INVALID_TRACEID}t.isValidTraceId=isValidTraceId;function isValidSpanId(e){return i.test(e)&&e!==n.INVALID_SPANID}t.isValidSpanId=isValidSpanId;function isSpanContextValid(e){return isValidTraceId(e.traceId)&&isValidSpanId(e.spanId)}t.isSpanContextValid=isSpanContextValid;function wrapSpanContext(e){return new a.NonRecordingSpan(e)}t.wrapSpanContext=wrapSpanContext},832:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.SpanStatusCode=void 0;var r;(function(e){e[e[\"UNSET\"]=0]=\"UNSET\";e[e[\"OK\"]=1]=\"OK\";e[e[\"ERROR\"]=2]=\"ERROR\"})(r=t.SpanStatusCode||(t.SpanStatusCode={}))},762:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.TraceFlags=void 0;var r;(function(e){e[e[\"NONE\"]=0]=\"NONE\";e[e[\"SAMPLED\"]=1]=\"SAMPLED\"})(r=t.TraceFlags||(t.TraceFlags={}))},520:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:true});t.VERSION=void 0;t.VERSION=\"1.4.1\"}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var a=t[r]={exports:{}};var o=true;try{e[r].call(a.exports,a,a.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return a.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r={};(()=>{var e=r;Object.defineProperty(e,\"__esModule\",{value:true});e.trace=e.propagation=e.metrics=e.diag=e.context=e.INVALID_SPAN_CONTEXT=e.INVALID_TRACEID=e.INVALID_SPANID=e.isValidSpanId=e.isValidTraceId=e.isSpanContextValid=e.createTraceState=e.TraceFlags=e.SpanStatusCode=e.SpanKind=e.SamplingDecision=e.ProxyTracerProvider=e.ProxyTracer=e.defaultTextMapSetter=e.defaultTextMapGetter=e.ValueType=e.createNoopMeter=e.DiagLogLevel=e.DiagConsoleLogger=e.ROOT_CONTEXT=e.createContextKey=e.baggageEntryMetadataFromString=void 0;var t=__nccwpck_require__(701);Object.defineProperty(e,\"baggageEntryMetadataFromString\",{enumerable:true,get:function(){return t.baggageEntryMetadataFromString}});var n=__nccwpck_require__(421);Object.defineProperty(e,\"createContextKey\",{enumerable:true,get:function(){return n.createContextKey}});Object.defineProperty(e,\"ROOT_CONTEXT\",{enumerable:true,get:function(){return n.ROOT_CONTEXT}});var a=__nccwpck_require__(689);Object.defineProperty(e,\"DiagConsoleLogger\",{enumerable:true,get:function(){return a.DiagConsoleLogger}});var o=__nccwpck_require__(133);Object.defineProperty(e,\"DiagLogLevel\",{enumerable:true,get:function(){return o.DiagLogLevel}});var i=__nccwpck_require__(962);Object.defineProperty(e,\"createNoopMeter\",{enumerable:true,get:function(){return i.createNoopMeter}});var c=__nccwpck_require__(28);Object.defineProperty(e,\"ValueType\",{enumerable:true,get:function(){return c.ValueType}});var s=__nccwpck_require__(625);Object.defineProperty(e,\"defaultTextMapGetter\",{enumerable:true,get:function(){return s.defaultTextMapGetter}});Object.defineProperty(e,\"defaultTextMapSetter\",{enumerable:true,get:function(){return s.defaultTextMapSetter}});var u=__nccwpck_require__(387);Object.defineProperty(e,\"ProxyTracer\",{enumerable:true,get:function(){return u.ProxyTracer}});var l=__nccwpck_require__(414);Object.defineProperty(e,\"ProxyTracerProvider\",{enumerable:true,get:function(){return l.ProxyTracerProvider}});var g=__nccwpck_require__(505);Object.defineProperty(e,\"SamplingDecision\",{enumerable:true,get:function(){return g.SamplingDecision}});var p=__nccwpck_require__(902);Object.defineProperty(e,\"SpanKind\",{enumerable:true,get:function(){return p.SpanKind}});var d=__nccwpck_require__(832);Object.defineProperty(e,\"SpanStatusCode\",{enumerable:true,get:function(){return d.SpanStatusCode}});var _=__nccwpck_require__(762);Object.defineProperty(e,\"TraceFlags\",{enumerable:true,get:function(){return _.TraceFlags}});var f=__nccwpck_require__(757);Object.defineProperty(e,\"createTraceState\",{enumerable:true,get:function(){return f.createTraceState}});var b=__nccwpck_require__(994);Object.defineProperty(e,\"isSpanContextValid\",{enumerable:true,get:function(){return b.isSpanContextValid}});Object.defineProperty(e,\"isValidTraceId\",{enumerable:true,get:function(){return b.isValidTraceId}});Object.defineProperty(e,\"isValidSpanId\",{enumerable:true,get:function(){return b.isValidSpanId}});var v=__nccwpck_require__(304);Object.defineProperty(e,\"INVALID_SPANID\",{enumerable:true,get:function(){return v.INVALID_SPANID}});Object.defineProperty(e,\"INVALID_TRACEID\",{enumerable:true,get:function(){return v.INVALID_TRACEID}});Object.defineProperty(e,\"INVALID_SPAN_CONTEXT\",{enumerable:true,get:function(){return v.INVALID_SPAN_CONTEXT}});const O=__nccwpck_require__(388);Object.defineProperty(e,\"context\",{enumerable:true,get:function(){return O.context}});const P=__nccwpck_require__(920);Object.defineProperty(e,\"diag\",{enumerable:true,get:function(){return P.diag}});const N=__nccwpck_require__(934);Object.defineProperty(e,\"metrics\",{enumerable:true,get:function(){return N.metrics}});const S=__nccwpck_require__(251);Object.defineProperty(e,\"propagation\",{enumerable:true,get:function(){return S.propagation}});const C=__nccwpck_require__(978);Object.defineProperty(e,\"trace\",{enumerable:true,get:function(){return C.trace}});e[\"default\"]={context:O.context,diag:P.diag,metrics:N.metrics,propagation:S.propagation,trace:C.trace}})();module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/@opentelemetry/api/index.js\n");

/***/ }),

/***/ "buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/api.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/api.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvelopeEndpointWithUrlEncodedAuth: () => (/* binding */ getEnvelopeEndpointWithUrlEncodedAuth),\n/* harmony export */   getReportDialogEndpoint: () => (/* binding */ getReportDialogEndpoint)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  const params = {\n    sentry_version: SENTRY_API_VERSION,\n  };\n\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkInfo) {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  const dsn = (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.makeDsn)(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${(0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.dsnToString)(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] )}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n\n\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTREOztBQUU1RDs7QUFFQTtBQUNBO0FBQ0EscUNBQXFDLGFBQWE7QUFDbEQsOEJBQThCLFNBQVM7QUFDdkMsWUFBWSxTQUFTLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxlQUFlLFNBQVMsT0FBTztBQUMxRTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSx3QkFBd0IsRUFBRSxjQUFjO0FBQ3BEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4QixhQUFhLEdBQUcsZ0JBQWdCO0FBQzlEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHdCQUF3QixHQUFHLDJCQUEyQjtBQUNwRjs7QUFFQTtBQUNBO0FBQ0EsY0FBYyw0REFBTztBQUNyQjtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLHdCQUF3Qjs7QUFFOUMsOEJBQThCLGdFQUFXLE1BQU07QUFDL0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyw4QkFBOEI7QUFDakU7QUFDQTtBQUNBLG9DQUFvQywrQkFBK0I7QUFDbkU7QUFDQSxNQUFNO0FBQ04sNEJBQTRCLHdCQUF3QixHQUFHLHdDQUF3QztBQUMvRjtBQUNBOztBQUVBLFlBQVksU0FBUyxHQUFHLGVBQWU7QUFDdkM7O0FBRTBFO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2FwaS5qcz80MDlhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1ha2VEc24sIGRzblRvU3RyaW5nIH0gZnJvbSAnLi91dGlscy1ob2lzdC9kc24uanMnO1xuXG5jb25zdCBTRU5UUllfQVBJX1ZFUlNJT04gPSAnNyc7XG5cbi8qKiBSZXR1cm5zIHRoZSBwcmVmaXggdG8gY29uc3RydWN0IFNlbnRyeSBpbmdlc3Rpb24gQVBJIGVuZHBvaW50cy4gKi9cbmZ1bmN0aW9uIGdldEJhc2VBcGlFbmRwb2ludChkc24pIHtcbiAgY29uc3QgcHJvdG9jb2wgPSBkc24ucHJvdG9jb2wgPyBgJHtkc24ucHJvdG9jb2x9OmAgOiAnJztcbiAgY29uc3QgcG9ydCA9IGRzbi5wb3J0ID8gYDoke2Rzbi5wb3J0fWAgOiAnJztcbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtkc24uaG9zdH0ke3BvcnR9JHtkc24ucGF0aCA/IGAvJHtkc24ucGF0aH1gIDogJyd9L2FwaS9gO1xufVxuXG4vKiogUmV0dXJucyB0aGUgaW5nZXN0IEFQSSBlbmRwb2ludCBmb3IgdGFyZ2V0LiAqL1xuZnVuY3Rpb24gX2dldEluZ2VzdEVuZHBvaW50KGRzbikge1xuICByZXR1cm4gYCR7Z2V0QmFzZUFwaUVuZHBvaW50KGRzbil9JHtkc24ucHJvamVjdElkfS9lbnZlbG9wZS9gO1xufVxuXG4vKiogUmV0dXJucyBhIFVSTC1lbmNvZGVkIHN0cmluZyB3aXRoIGF1dGggY29uZmlnIHN1aXRhYmxlIGZvciBhIHF1ZXJ5IHN0cmluZy4gKi9cbmZ1bmN0aW9uIF9lbmNvZGVkQXV0aChkc24sIHNka0luZm8pIHtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIHNlbnRyeV92ZXJzaW9uOiBTRU5UUllfQVBJX1ZFUlNJT04sXG4gIH07XG5cbiAgaWYgKGRzbi5wdWJsaWNLZXkpIHtcbiAgICAvLyBXZSBzZW5kIG9ubHkgdGhlIG1pbmltdW0gc2V0IG9mIHJlcXVpcmVkIGluZm9ybWF0aW9uLiBTZWVcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yNTcyLlxuICAgIHBhcmFtcy5zZW50cnlfa2V5ID0gZHNuLnB1YmxpY0tleTtcbiAgfVxuXG4gIGlmIChzZGtJbmZvKSB7XG4gICAgcGFyYW1zLnNlbnRyeV9jbGllbnQgPSBgJHtzZGtJbmZvLm5hbWV9LyR7c2RrSW5mby52ZXJzaW9ufWA7XG4gIH1cblxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMpLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZW52ZWxvcGUgZW5kcG9pbnQgVVJMIHdpdGggYXV0aCBpbiB0aGUgcXVlcnkgc3RyaW5nLlxuICpcbiAqIFNlbmRpbmcgYXV0aCBhcyBwYXJ0IG9mIHRoZSBxdWVyeSBzdHJpbmcgYW5kIG5vdCBhcyBjdXN0b20gSFRUUCBoZWFkZXJzIGF2b2lkcyBDT1JTIHByZWZsaWdodCByZXF1ZXN0cy5cbiAqL1xuZnVuY3Rpb24gZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aChkc24sIHR1bm5lbCwgc2RrSW5mbykge1xuICByZXR1cm4gdHVubmVsID8gdHVubmVsIDogYCR7X2dldEluZ2VzdEVuZHBvaW50KGRzbil9PyR7X2VuY29kZWRBdXRoKGRzbiwgc2RrSW5mbyl9YDtcbn1cblxuLyoqIFJldHVybnMgdGhlIHVybCB0byB0aGUgcmVwb3J0IGRpYWxvZyBlbmRwb2ludC4gKi9cbmZ1bmN0aW9uIGdldFJlcG9ydERpYWxvZ0VuZHBvaW50KGRzbkxpa2UsIGRpYWxvZ09wdGlvbnMpIHtcbiAgY29uc3QgZHNuID0gbWFrZURzbihkc25MaWtlKTtcbiAgaWYgKCFkc24pIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBjb25zdCBlbmRwb2ludCA9IGAke2dldEJhc2VBcGlFbmRwb2ludChkc24pfWVtYmVkL2Vycm9yLXBhZ2UvYDtcblxuICBsZXQgZW5jb2RlZE9wdGlvbnMgPSBgZHNuPSR7ZHNuVG9TdHJpbmcoZHNuKX1gO1xuICBmb3IgKGNvbnN0IGtleSBpbiBkaWFsb2dPcHRpb25zKSB7XG4gICAgaWYgKGtleSA9PT0gJ2RzbicpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdvbkNsb3NlJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3VzZXInKSB7XG4gICAgICBjb25zdCB1c2VyID0gZGlhbG9nT3B0aW9ucy51c2VyO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHVzZXIubmFtZSkge1xuICAgICAgICBlbmNvZGVkT3B0aW9ucyArPSBgJm5hbWU9JHtlbmNvZGVVUklDb21wb25lbnQodXNlci5uYW1lKX1gO1xuICAgICAgfVxuICAgICAgaWYgKHVzZXIuZW1haWwpIHtcbiAgICAgICAgZW5jb2RlZE9wdGlvbnMgKz0gYCZlbWFpbD0ke2VuY29kZVVSSUNvbXBvbmVudCh1c2VyLmVtYWlsKX1gO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGVkT3B0aW9ucyArPSBgJiR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KGRpYWxvZ09wdGlvbnNba2V5XSApfWA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGAke2VuZHBvaW50fT8ke2VuY29kZWRPcHRpb25zfWA7XG59XG5cbmV4cG9ydCB7IGdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgsIGdldFJlcG9ydERpYWxvZ0VuZHBvaW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/api.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/asyncContext/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/asyncContext/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAsyncContextStrategy: () => (/* binding */ getAsyncContextStrategy),\n/* harmony export */   setAsyncContextStrategy: () => (/* binding */ setAsyncContextStrategy)\n/* harmony export */ });\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../carrier.js */ \"./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _stackStrategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stackStrategy.js */ \"./node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js\");\n\n\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nfunction setAsyncContextStrategy(strategy) {\n  // Get main carrier (global for every environment)\n  const registry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n  const sentry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getSentryCarrier)(registry);\n  sentry.acs = strategy;\n}\n\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */\nfunction getAsyncContextStrategy(carrier) {\n  const sentry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getSentryCarrier)(carrier);\n\n  if (sentry.acs) {\n    return sentry.acs;\n  }\n\n  // Otherwise, use the default one (stack)\n  return (0,_stackStrategy_js__WEBPACK_IMPORTED_MODULE_1__.getStackAsyncContextStrategy)();\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9hc3luY0NvbnRleHQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpRTtBQUNDOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwyREFBYztBQUNqQyxpQkFBaUIsNkRBQWdCO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw2REFBZ0I7O0FBRWpDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVMsK0VBQTRCO0FBQ3JDOztBQUU0RDtBQUM1RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9hc3luY0NvbnRleHQvaW5kZXguanM/MDFhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRNYWluQ2FycmllciwgZ2V0U2VudHJ5Q2FycmllciB9IGZyb20gJy4uL2NhcnJpZXIuanMnO1xuaW1wb3J0IHsgZ2V0U3RhY2tBc3luY0NvbnRleHRTdHJhdGVneSB9IGZyb20gJy4vc3RhY2tTdHJhdGVneS5qcyc7XG5cbi8qKlxuICogQHByaXZhdGUgUHJpdmF0ZSBBUEkgd2l0aCBubyBzZW12ZXIgZ3VhcmFudGVlcyFcbiAqXG4gKiBTZXRzIHRoZSBnbG9iYWwgYXN5bmMgY29udGV4dCBzdHJhdGVneVxuICovXG5mdW5jdGlvbiBzZXRBc3luY0NvbnRleHRTdHJhdGVneShzdHJhdGVneSkge1xuICAvLyBHZXQgbWFpbiBjYXJyaWVyIChnbG9iYWwgZm9yIGV2ZXJ5IGVudmlyb25tZW50KVxuICBjb25zdCByZWdpc3RyeSA9IGdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IHNlbnRyeSA9IGdldFNlbnRyeUNhcnJpZXIocmVnaXN0cnkpO1xuICBzZW50cnkuYWNzID0gc3RyYXRlZ3k7XG59XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IGFzeW5jIGNvbnRleHQgc3RyYXRlZ3kuXG4gKiBJZiBub25lIGhhcyBiZWVuIHNldHVwLCB0aGUgZGVmYXVsdCB3aWxsIGJlIHVzZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEFzeW5jQ29udGV4dFN0cmF0ZWd5KGNhcnJpZXIpIHtcbiAgY29uc3Qgc2VudHJ5ID0gZ2V0U2VudHJ5Q2FycmllcihjYXJyaWVyKTtcblxuICBpZiAoc2VudHJ5LmFjcykge1xuICAgIHJldHVybiBzZW50cnkuYWNzO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlLCB1c2UgdGhlIGRlZmF1bHQgb25lIChzdGFjaylcbiAgcmV0dXJuIGdldFN0YWNrQXN5bmNDb250ZXh0U3RyYXRlZ3koKTtcbn1cblxuZXhwb3J0IHsgZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3ksIHNldEFzeW5jQ29udGV4dFN0cmF0ZWd5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/asyncContext/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncContextStack: () => (/* binding */ AsyncContextStack),\n/* harmony export */   getStackAsyncContextStrategy: () => (/* binding */ getStackAsyncContextStrategy)\n/* harmony export */ });\n/* harmony import */ var _defaultScopes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../defaultScopes.js */ \"./node_modules/@sentry/core/build/esm/defaultScopes.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scope.js */ \"./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../carrier.js */ \"./node_modules/@sentry/core/build/esm/carrier.js\");\n\n\n\n\n\n/**\n * This is an object that holds a stack of scopes.\n */\nclass AsyncContextStack {\n\n   constructor(scope, isolationScope) {\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new _scope_js__WEBPACK_IMPORTED_MODULE_0__.Scope();\n    } else {\n      assignedScope = scope;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new _scope_js__WEBPACK_IMPORTED_MODULE_0__.Scope();\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    // scope stack for domains or the process\n    this._stack = [{ scope: assignedScope }];\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Fork a scope for the stack.\n   */\n   withScope(callback) {\n    const scope = this._pushScope();\n\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      this._popScope();\n      throw e;\n    }\n\n    if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__.isThenable)(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          this._popScope();\n          return res;\n        },\n        e => {\n          this._popScope();\n          throw e;\n        },\n      );\n    }\n\n    this._popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * Get the client of the stack.\n   */\n   getClient() {\n    return this.getStackTop().client ;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   */\n   getScope() {\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * Get the isolation scope for the stack.\n   */\n   getIsolationScope() {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */\n   getStackTop() {\n    return this._stack[this._stack.length - 1] ;\n  }\n\n  /**\n   * Push a scope to the stack.\n   */\n   _pushScope() {\n    // We want to clone the content of prev scope\n    const scope = this.getScope().clone();\n    this._stack.push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * Pop a scope from the stack.\n   */\n   _popScope() {\n    if (this._stack.length <= 1) return false;\n    return !!this._stack.pop();\n  }\n}\n\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */\nfunction getAsyncContextStack() {\n  const registry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_2__.getMainCarrier)();\n  const sentry = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_2__.getSentryCarrier)(registry);\n\n  return (sentry.stack = sentry.stack || new AsyncContextStack((0,_defaultScopes_js__WEBPACK_IMPORTED_MODULE_3__.getDefaultCurrentScope)(), (0,_defaultScopes_js__WEBPACK_IMPORTED_MODULE_3__.getDefaultIsolationScope)()));\n}\n\nfunction withScope(callback) {\n  return getAsyncContextStack().withScope(callback);\n}\n\nfunction withSetScope(scope, callback) {\n  const stack = getAsyncContextStack() ;\n  return stack.withScope(() => {\n    stack.getStackTop().scope = scope;\n    return callback(scope);\n  });\n}\n\nfunction withIsolationScope(callback) {\n  return getAsyncContextStack().withScope(() => {\n    return callback(getAsyncContextStack().getIsolationScope());\n  });\n}\n\n/**\n * Get the stack-based async context strategy.\n */\nfunction getStackAsyncContextStrategy() {\n  return {\n    withIsolationScope,\n    withScope,\n    withSetScope,\n    withSetIsolationScope: (_isolationScope, callback) => {\n      return withIsolationScope(callback);\n    },\n    getCurrentScope: () => getAsyncContextStack().getScope(),\n    getIsolationScope: () => getAsyncContextStack().getIsolationScope(),\n  };\n}\n\n\n//# sourceMappingURL=stackStrategy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9hc3luY0NvbnRleHQvc3RhY2tTdHJhdGVneS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBdUY7QUFDbkQ7QUFDYztBQUNlOztBQUVqRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNENBQUs7QUFDL0IsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQyw0Q0FBSztBQUN4QyxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixzQkFBc0I7QUFDM0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUEsUUFBUSw4REFBVTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDJEQUFjO0FBQ2pDLGlCQUFpQiw2REFBZ0I7O0FBRWpDLCtEQUErRCx5RUFBc0IsSUFBSSwyRUFBd0I7QUFDakg7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUUyRDtBQUMzRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9hc3luY0NvbnRleHQvc3RhY2tTdHJhdGVneS5qcz80NjJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldERlZmF1bHRDdXJyZW50U2NvcGUsIGdldERlZmF1bHRJc29sYXRpb25TY29wZSB9IGZyb20gJy4uL2RlZmF1bHRTY29wZXMuanMnO1xuaW1wb3J0IHsgU2NvcGUgfSBmcm9tICcuLi9zY29wZS5qcyc7XG5pbXBvcnQgeyBpc1RoZW5hYmxlIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvaXMuanMnO1xuaW1wb3J0IHsgZ2V0TWFpbkNhcnJpZXIsIGdldFNlbnRyeUNhcnJpZXIgfSBmcm9tICcuLi9jYXJyaWVyLmpzJztcblxuLyoqXG4gKiBUaGlzIGlzIGFuIG9iamVjdCB0aGF0IGhvbGRzIGEgc3RhY2sgb2Ygc2NvcGVzLlxuICovXG5jbGFzcyBBc3luY0NvbnRleHRTdGFjayB7XG5cbiAgIGNvbnN0cnVjdG9yKHNjb3BlLCBpc29sYXRpb25TY29wZSkge1xuICAgIGxldCBhc3NpZ25lZFNjb3BlO1xuICAgIGlmICghc2NvcGUpIHtcbiAgICAgIGFzc2lnbmVkU2NvcGUgPSBuZXcgU2NvcGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduZWRTY29wZSA9IHNjb3BlO1xuICAgIH1cblxuICAgIGxldCBhc3NpZ25lZElzb2xhdGlvblNjb3BlO1xuICAgIGlmICghaXNvbGF0aW9uU2NvcGUpIHtcbiAgICAgIGFzc2lnbmVkSXNvbGF0aW9uU2NvcGUgPSBuZXcgU2NvcGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduZWRJc29sYXRpb25TY29wZSA9IGlzb2xhdGlvblNjb3BlO1xuICAgIH1cblxuICAgIC8vIHNjb3BlIHN0YWNrIGZvciBkb21haW5zIG9yIHRoZSBwcm9jZXNzXG4gICAgdGhpcy5fc3RhY2sgPSBbeyBzY29wZTogYXNzaWduZWRTY29wZSB9XTtcbiAgICB0aGlzLl9pc29sYXRpb25TY29wZSA9IGFzc2lnbmVkSXNvbGF0aW9uU2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogRm9yayBhIHNjb3BlIGZvciB0aGUgc3RhY2suXG4gICAqL1xuICAgd2l0aFNjb3BlKGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLl9wdXNoU2NvcGUoKTtcblxuICAgIGxldCBtYXliZVByb21pc2VSZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIG1heWJlUHJvbWlzZVJlc3VsdCA9IGNhbGxiYWNrKHNjb3BlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLl9wb3BTY29wZSgpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICBpZiAoaXNUaGVuYWJsZShtYXliZVByb21pc2VSZXN1bHQpKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gaXNUaGVuYWJsZSByZXR1cm5zIHRoZSB3cm9uZyB0eXBlXG4gICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0LnRoZW4oXG4gICAgICAgIHJlcyA9PiB7XG4gICAgICAgICAgdGhpcy5fcG9wU2NvcGUoKTtcbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9LFxuICAgICAgICBlID0+IHtcbiAgICAgICAgICB0aGlzLl9wb3BTY29wZSgpO1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX3BvcFNjb3BlKCk7XG4gICAgcmV0dXJuIG1heWJlUHJvbWlzZVJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNsaWVudCBvZiB0aGUgc3RhY2suXG4gICAqL1xuICAgZ2V0Q2xpZW50KCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0YWNrVG9wKCkuY2xpZW50IDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzY29wZSBvZiB0aGUgdG9wIHN0YWNrLlxuICAgKi9cbiAgIGdldFNjb3BlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0YWNrVG9wKCkuc2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBpc29sYXRpb24gc2NvcGUgZm9yIHRoZSBzdGFjay5cbiAgICovXG4gICBnZXRJc29sYXRpb25TY29wZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNvbGF0aW9uU2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdG9wbW9zdCBzY29wZSBsYXllciBpbiB0aGUgb3JkZXIgZG9tYWluID4gbG9jYWwgPiBwcm9jZXNzLlxuICAgKi9cbiAgIGdldFN0YWNrVG9wKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGFja1t0aGlzLl9zdGFjay5sZW5ndGggLSAxXSA7XG4gIH1cblxuICAvKipcbiAgICogUHVzaCBhIHNjb3BlIHRvIHRoZSBzdGFjay5cbiAgICovXG4gICBfcHVzaFNjb3BlKCkge1xuICAgIC8vIFdlIHdhbnQgdG8gY2xvbmUgdGhlIGNvbnRlbnQgb2YgcHJldiBzY29wZVxuICAgIGNvbnN0IHNjb3BlID0gdGhpcy5nZXRTY29wZSgpLmNsb25lKCk7XG4gICAgdGhpcy5fc3RhY2sucHVzaCh7XG4gICAgICBjbGllbnQ6IHRoaXMuZ2V0Q2xpZW50KCksXG4gICAgICBzY29wZSxcbiAgICB9KTtcbiAgICByZXR1cm4gc2NvcGU7XG4gIH1cblxuICAvKipcbiAgICogUG9wIGEgc2NvcGUgZnJvbSB0aGUgc3RhY2suXG4gICAqL1xuICAgX3BvcFNjb3BlKCkge1xuICAgIGlmICh0aGlzLl9zdGFjay5sZW5ndGggPD0gMSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAhIXRoaXMuX3N0YWNrLnBvcCgpO1xuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBnbG9iYWwgYXN5bmMgY29udGV4dCBzdGFjay5cbiAqIFRoaXMgd2lsbCBiZSByZW1vdmVkIGR1cmluZyB0aGUgdjggY3ljbGUgYW5kIGlzIG9ubHkgaGVyZSB0byBtYWtlIG1pZ3JhdGlvbiBlYXNpZXIuXG4gKi9cbmZ1bmN0aW9uIGdldEFzeW5jQ29udGV4dFN0YWNrKCkge1xuICBjb25zdCByZWdpc3RyeSA9IGdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IHNlbnRyeSA9IGdldFNlbnRyeUNhcnJpZXIocmVnaXN0cnkpO1xuXG4gIHJldHVybiAoc2VudHJ5LnN0YWNrID0gc2VudHJ5LnN0YWNrIHx8IG5ldyBBc3luY0NvbnRleHRTdGFjayhnZXREZWZhdWx0Q3VycmVudFNjb3BlKCksIGdldERlZmF1bHRJc29sYXRpb25TY29wZSgpKSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhTY29wZShjYWxsYmFjaykge1xuICByZXR1cm4gZ2V0QXN5bmNDb250ZXh0U3RhY2soKS53aXRoU2NvcGUoY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiB3aXRoU2V0U2NvcGUoc2NvcGUsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHN0YWNrID0gZ2V0QXN5bmNDb250ZXh0U3RhY2soKSA7XG4gIHJldHVybiBzdGFjay53aXRoU2NvcGUoKCkgPT4ge1xuICAgIHN0YWNrLmdldFN0YWNrVG9wKCkuc2NvcGUgPSBzY29wZTtcbiAgICByZXR1cm4gY2FsbGJhY2soc2NvcGUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gd2l0aElzb2xhdGlvblNjb3BlKGNhbGxiYWNrKSB7XG4gIHJldHVybiBnZXRBc3luY0NvbnRleHRTdGFjaygpLndpdGhTY29wZSgoKSA9PiB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKGdldEFzeW5jQ29udGV4dFN0YWNrKCkuZ2V0SXNvbGF0aW9uU2NvcGUoKSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgc3RhY2stYmFzZWQgYXN5bmMgY29udGV4dCBzdHJhdGVneS5cbiAqL1xuZnVuY3Rpb24gZ2V0U3RhY2tBc3luY0NvbnRleHRTdHJhdGVneSgpIHtcbiAgcmV0dXJuIHtcbiAgICB3aXRoSXNvbGF0aW9uU2NvcGUsXG4gICAgd2l0aFNjb3BlLFxuICAgIHdpdGhTZXRTY29wZSxcbiAgICB3aXRoU2V0SXNvbGF0aW9uU2NvcGU6IChfaXNvbGF0aW9uU2NvcGUsIGNhbGxiYWNrKSA9PiB7XG4gICAgICByZXR1cm4gd2l0aElzb2xhdGlvblNjb3BlKGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIGdldEN1cnJlbnRTY29wZTogKCkgPT4gZ2V0QXN5bmNDb250ZXh0U3RhY2soKS5nZXRTY29wZSgpLFxuICAgIGdldElzb2xhdGlvblNjb3BlOiAoKSA9PiBnZXRBc3luY0NvbnRleHRTdGFjaygpLmdldElzb2xhdGlvblNjb3BlKCksXG4gIH07XG59XG5cbmV4cG9ydCB7IEFzeW5jQ29udGV4dFN0YWNrLCBnZXRTdGFja0FzeW5jQ29udGV4dFN0cmF0ZWd5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFja1N0cmF0ZWd5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/breadcrumbs.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/breadcrumbs.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addBreadcrumb: () => (/* binding */ addBreadcrumb)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n\n\n\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nfunction addBreadcrumb(breadcrumb, hint) {\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  const isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n\n  if (!client) return;\n\n  const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();\n\n  if (maxBreadcrumbs <= 0) return;\n\n  const timestamp = (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__.dateTimestampInSeconds)();\n  const mergedBreadcrumb = { timestamp, ...breadcrumb };\n  const finalBreadcrumb = beforeBreadcrumb\n    ? ((0,_utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.consoleSandbox)(() => beforeBreadcrumb(mergedBreadcrumb, hint)) )\n    : mergedBreadcrumb;\n\n  if (finalBreadcrumb === null) return;\n\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\n\n\n//# sourceMappingURL=breadcrumbs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9icmVhZGNydW1icy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtFO0FBQ1Q7QUFDTTs7QUFFL0Q7QUFDQTtBQUNBLFNBQVMsNkJBQTZCO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsNERBQVM7QUFDMUIseUJBQXlCLG9FQUFpQjs7QUFFMUM7O0FBRUEsVUFBVSxnRUFBZ0U7O0FBRTFFOztBQUVBLG9CQUFvQiw0RUFBc0I7QUFDMUMsNkJBQTZCO0FBQzdCO0FBQ0EsT0FBTyxzRUFBYztBQUNyQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vYnJlYWRjcnVtYnMuanM/NTFkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDbGllbnQsIGdldElzb2xhdGlvblNjb3BlIH0gZnJvbSAnLi9jdXJyZW50U2NvcGVzLmpzJztcbmltcG9ydCB7IGNvbnNvbGVTYW5kYm94IH0gZnJvbSAnLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyB9IGZyb20gJy4vdXRpbHMtaG9pc3QvdGltZS5qcyc7XG5cbi8qKlxuICogRGVmYXVsdCBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC4gQ2FuIGJlIG92ZXJ3cml0dGVuXG4gKiB3aXRoIHtAbGluayBPcHRpb25zLm1heEJyZWFkY3J1bWJzfS5cbiAqL1xuY29uc3QgREVGQVVMVF9CUkVBRENSVU1CUyA9IDEwMDtcblxuLyoqXG4gKiBSZWNvcmRzIGEgbmV3IGJyZWFkY3J1bWIgd2hpY2ggd2lsbCBiZSBhdHRhY2hlZCB0byBmdXR1cmUgZXZlbnRzLlxuICpcbiAqIEJyZWFkY3J1bWJzIHdpbGwgYmUgYWRkZWQgdG8gc3Vic2VxdWVudCBldmVudHMgdG8gcHJvdmlkZSBtb3JlIGNvbnRleHQgb25cbiAqIHVzZXIncyBhY3Rpb25zIHByaW9yIHRvIGFuIGVycm9yIG9yIGNyYXNoLlxuICovXG5mdW5jdGlvbiBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIsIGhpbnQpIHtcbiAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gIGNvbnN0IGlzb2xhdGlvblNjb3BlID0gZ2V0SXNvbGF0aW9uU2NvcGUoKTtcblxuICBpZiAoIWNsaWVudCkgcmV0dXJuO1xuXG4gIGNvbnN0IHsgYmVmb3JlQnJlYWRjcnVtYiA9IG51bGwsIG1heEJyZWFkY3J1bWJzID0gREVGQVVMVF9CUkVBRENSVU1CUyB9ID0gY2xpZW50LmdldE9wdGlvbnMoKTtcblxuICBpZiAobWF4QnJlYWRjcnVtYnMgPD0gMCkgcmV0dXJuO1xuXG4gIGNvbnN0IHRpbWVzdGFtcCA9IGRhdGVUaW1lc3RhbXBJblNlY29uZHMoKTtcbiAgY29uc3QgbWVyZ2VkQnJlYWRjcnVtYiA9IHsgdGltZXN0YW1wLCAuLi5icmVhZGNydW1iIH07XG4gIGNvbnN0IGZpbmFsQnJlYWRjcnVtYiA9IGJlZm9yZUJyZWFkY3J1bWJcbiAgICA/IChjb25zb2xlU2FuZGJveCgoKSA9PiBiZWZvcmVCcmVhZGNydW1iKG1lcmdlZEJyZWFkY3J1bWIsIGhpbnQpKSApXG4gICAgOiBtZXJnZWRCcmVhZGNydW1iO1xuXG4gIGlmIChmaW5hbEJyZWFkY3J1bWIgPT09IG51bGwpIHJldHVybjtcblxuICBpZiAoY2xpZW50LmVtaXQpIHtcbiAgICBjbGllbnQuZW1pdCgnYmVmb3JlQWRkQnJlYWRjcnVtYicsIGZpbmFsQnJlYWRjcnVtYiwgaGludCk7XG4gIH1cblxuICBpc29sYXRpb25TY29wZS5hZGRCcmVhZGNydW1iKGZpbmFsQnJlYWRjcnVtYiwgbWF4QnJlYWRjcnVtYnMpO1xufVxuXG5leHBvcnQgeyBhZGRCcmVhZGNydW1iIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmVhZGNydW1icy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/breadcrumbs.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/carrier.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/carrier.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGlobalSingleton: () => (/* binding */ getGlobalSingleton),\n/* harmony export */   getMainCarrier: () => (/* binding */ getMainCarrier),\n/* harmony export */   getSentryCarrier: () => (/* binding */ getSentryCarrier)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/version.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/version.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  // This ensures a Sentry carrier exists\n  getSentryCarrier(_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ);\n  return _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ;\n}\n\n/** Will either get the existing sentry carrier, or create a new one. */\nfunction getSentryCarrier(carrier) {\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n\n  // For now: First SDK that sets the .version property wins\n  __SENTRY__.version = __SENTRY__.version || _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION;\n\n  // Intentionally populating and returning the version of \"this\" SDK instance\n  // rather than what's set in .version so that \"this\" SDK always gets its carrier\n  return (__SENTRY__[_utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION] = __SENTRY__[_utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION] || {});\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nfunction getGlobalSingleton(\n  name,\n  creator,\n  obj = _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ,\n) {\n  const __SENTRY__ = (obj.__SENTRY__ = obj.__SENTRY__ || {});\n  const carrier = (__SENTRY__[_utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION] = __SENTRY__[_utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION] || {});\n  // Note: We do not want to set `carrier.version` here, as this may be called before any `init` is called, e.g. for the default scopes\n  return carrier[name] || (carrier[name] = creator());\n}\n\n\n//# sourceMappingURL=carrier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jYXJyaWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXVEO0FBQ0M7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpRUFBVTtBQUM3QixTQUFTLGlFQUFVO0FBQ25COztBQUVBO0FBQ0E7QUFDQSxtRUFBbUU7O0FBRW5FO0FBQ0EsNkNBQTZDLGdFQUFXOztBQUV4RDtBQUNBO0FBQ0EscUJBQXFCLGdFQUFXLGVBQWUsZ0VBQVcsT0FBTztBQUNqRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBVTtBQUNsQjtBQUNBLDJEQUEyRDtBQUMzRCw4QkFBOEIsZ0VBQVcsZUFBZSxnRUFBVyxPQUFPO0FBQzFFO0FBQ0E7QUFDQTs7QUFFZ0U7QUFDaEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vY2Fycmllci5qcz8wNWJmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSAnLi91dGlscy1ob2lzdC92ZXJzaW9uLmpzJztcbmltcG9ydCB7IEdMT0JBTF9PQkogfSBmcm9tICcuL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcyc7XG5cbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgZ2xvYmFsbHkgYWNjZXNzaWJsZSBwcm9wZXJ0aWVzIGFuZCBtYWludGFpbnMgYSBzY29wZSBzdGFjay5cbiAqIEBoaWRkZW5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdsb2JhbCBzaGltIHJlZ2lzdHJ5LlxuICpcbiAqIEZJWE1FOiBUaGlzIGZ1bmN0aW9uIGlzIHByb2JsZW1hdGljLCBiZWNhdXNlIGRlc3BpdGUgYWx3YXlzIHJldHVybmluZyBhIHZhbGlkIENhcnJpZXIsXG4gKiBpdCBoYXMgYW4gb3B0aW9uYWwgYF9fU0VOVFJZX19gIHByb3BlcnR5LCB3aGljaCB0aGVuIGluIHR1cm4gcmVxdWlyZXMgdXMgdG8gYWx3YXlzIHBlcmZvcm0gYW4gdW5uZWNlc3NhcnkgY2hlY2tcbiAqIGF0IHRoZSBjYWxsLXNpdGUuIFdlIGFsd2F5cyBhY2Nlc3MgdGhlIGNhcnJpZXIgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uLCBzbyB3ZSBjYW4gZ3VhcmFudGVlIHRoYXQgYF9fU0VOVFJZX19gIGlzIHRoZXJlLlxuICoqL1xuZnVuY3Rpb24gZ2V0TWFpbkNhcnJpZXIoKSB7XG4gIC8vIFRoaXMgZW5zdXJlcyBhIFNlbnRyeSBjYXJyaWVyIGV4aXN0c1xuICBnZXRTZW50cnlDYXJyaWVyKEdMT0JBTF9PQkopO1xuICByZXR1cm4gR0xPQkFMX09CSjtcbn1cblxuLyoqIFdpbGwgZWl0aGVyIGdldCB0aGUgZXhpc3Rpbmcgc2VudHJ5IGNhcnJpZXIsIG9yIGNyZWF0ZSBhIG5ldyBvbmUuICovXG5mdW5jdGlvbiBnZXRTZW50cnlDYXJyaWVyKGNhcnJpZXIpIHtcbiAgY29uc3QgX19TRU5UUllfXyA9IChjYXJyaWVyLl9fU0VOVFJZX18gPSBjYXJyaWVyLl9fU0VOVFJZX18gfHwge30pO1xuXG4gIC8vIEZvciBub3c6IEZpcnN0IFNESyB0aGF0IHNldHMgdGhlIC52ZXJzaW9uIHByb3BlcnR5IHdpbnNcbiAgX19TRU5UUllfXy52ZXJzaW9uID0gX19TRU5UUllfXy52ZXJzaW9uIHx8IFNES19WRVJTSU9OO1xuXG4gIC8vIEludGVudGlvbmFsbHkgcG9wdWxhdGluZyBhbmQgcmV0dXJuaW5nIHRoZSB2ZXJzaW9uIG9mIFwidGhpc1wiIFNESyBpbnN0YW5jZVxuICAvLyByYXRoZXIgdGhhbiB3aGF0J3Mgc2V0IGluIC52ZXJzaW9uIHNvIHRoYXQgXCJ0aGlzXCIgU0RLIGFsd2F5cyBnZXRzIGl0cyBjYXJyaWVyXG4gIHJldHVybiAoX19TRU5UUllfX1tTREtfVkVSU0lPTl0gPSBfX1NFTlRSWV9fW1NES19WRVJTSU9OXSB8fCB7fSk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGdsb2JhbCBzaW5nbGV0b24gY29udGFpbmVkIGluIHRoZSBnbG9iYWwgYF9fU0VOVFJZX19bXWAgb2JqZWN0LlxuICpcbiAqIElmIHRoZSBzaW5nbGV0b24gZG9lc24ndCBhbHJlYWR5IGV4aXN0IGluIGBfX1NFTlRSWV9fYCwgaXQgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZSBnaXZlbiBmYWN0b3J5XG4gKiBmdW5jdGlvbiBhbmQgYWRkZWQgdG8gdGhlIGBfX1NFTlRSWV9fYCBvYmplY3QuXG4gKlxuICogQHBhcmFtIG5hbWUgbmFtZSBvZiB0aGUgZ2xvYmFsIHNpbmdsZXRvbiBvbiBfX1NFTlRSWV9fXG4gKiBAcGFyYW0gY3JlYXRvciBjcmVhdG9yIEZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBzaW5nbGV0b24gaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIGBfX1NFTlRSWV9fYFxuICogQHBhcmFtIG9iaiAoT3B0aW9uYWwpIFRoZSBnbG9iYWwgb2JqZWN0IG9uIHdoaWNoIHRvIGxvb2sgZm9yIGBfX1NFTlRSWV9fYCwgaWYgbm90IGBHTE9CQUxfT0JKYCdzIHJldHVybiB2YWx1ZVxuICogQHJldHVybnMgdGhlIHNpbmdsZXRvblxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxTaW5nbGV0b24oXG4gIG5hbWUsXG4gIGNyZWF0b3IsXG4gIG9iaiA9IEdMT0JBTF9PQkosXG4pIHtcbiAgY29uc3QgX19TRU5UUllfXyA9IChvYmouX19TRU5UUllfXyA9IG9iai5fX1NFTlRSWV9fIHx8IHt9KTtcbiAgY29uc3QgY2FycmllciA9IChfX1NFTlRSWV9fW1NES19WRVJTSU9OXSA9IF9fU0VOVFJZX19bU0RLX1ZFUlNJT05dIHx8IHt9KTtcbiAgLy8gTm90ZTogV2UgZG8gbm90IHdhbnQgdG8gc2V0IGBjYXJyaWVyLnZlcnNpb25gIGhlcmUsIGFzIHRoaXMgbWF5IGJlIGNhbGxlZCBiZWZvcmUgYW55IGBpbml0YCBpcyBjYWxsZWQsIGUuZy4gZm9yIHRoZSBkZWZhdWx0IHNjb3Blc1xuICByZXR1cm4gY2FycmllcltuYW1lXSB8fCAoY2FycmllcltuYW1lXSA9IGNyZWF0b3IoKSk7XG59XG5cbmV4cG9ydCB7IGdldEdsb2JhbFNpbmdsZXRvbiwgZ2V0TWFpbkNhcnJpZXIsIGdldFNlbnRyeUNhcnJpZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcnJpZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/carrier.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/checkin.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/checkin.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCheckInEnvelope: () => (/* binding */ createCheckInEnvelope)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n\n\n\n/**\n * Create envelope from check in item.\n */\nfunction createCheckInEnvelope(\n  checkIn,\n  dynamicSamplingContext,\n  metadata,\n  tunnel,\n  dsn,\n) {\n  const headers = {\n    sent_at: new Date().toISOString(),\n  };\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.dsnToString)(dsn);\n  }\n\n  if (dynamicSamplingContext) {\n    headers.trace = dynamicSamplingContext ;\n  }\n\n  const item = createCheckInEnvelopeItem(checkIn);\n  return (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.createEnvelope)(headers, [item]);\n}\n\nfunction createCheckInEnvelopeItem(checkIn) {\n  const checkInHeaders = {\n    type: 'check_in',\n  };\n  return [checkInHeaders, checkIn];\n}\n\n\n//# sourceMappingURL=checkin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jaGVja2luLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtRDtBQUNROztBQUUzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsZ0VBQVc7QUFDN0I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUyx3RUFBYztBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWlDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2NoZWNraW4uanM/OGNkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkc25Ub1N0cmluZyB9IGZyb20gJy4vdXRpbHMtaG9pc3QvZHNuLmpzJztcbmltcG9ydCB7IGNyZWF0ZUVudmVsb3BlIH0gZnJvbSAnLi91dGlscy1ob2lzdC9lbnZlbG9wZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGVudmVsb3BlIGZyb20gY2hlY2sgaW4gaXRlbS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hlY2tJbkVudmVsb3BlKFxuICBjaGVja0luLFxuICBkeW5hbWljU2FtcGxpbmdDb250ZXh0LFxuICBtZXRhZGF0YSxcbiAgdHVubmVsLFxuICBkc24sXG4pIHtcbiAgY29uc3QgaGVhZGVycyA9IHtcbiAgICBzZW50X2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gIH07XG5cbiAgaWYgKG1ldGFkYXRhPy5zZGspIHtcbiAgICBoZWFkZXJzLnNkayA9IHtcbiAgICAgIG5hbWU6IG1ldGFkYXRhLnNkay5uYW1lLFxuICAgICAgdmVyc2lvbjogbWV0YWRhdGEuc2RrLnZlcnNpb24sXG4gICAgfTtcbiAgfVxuXG4gIGlmICghIXR1bm5lbCAmJiAhIWRzbikge1xuICAgIGhlYWRlcnMuZHNuID0gZHNuVG9TdHJpbmcoZHNuKTtcbiAgfVxuXG4gIGlmIChkeW5hbWljU2FtcGxpbmdDb250ZXh0KSB7XG4gICAgaGVhZGVycy50cmFjZSA9IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgO1xuICB9XG5cbiAgY29uc3QgaXRlbSA9IGNyZWF0ZUNoZWNrSW5FbnZlbG9wZUl0ZW0oY2hlY2tJbik7XG4gIHJldHVybiBjcmVhdGVFbnZlbG9wZShoZWFkZXJzLCBbaXRlbV0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDaGVja0luRW52ZWxvcGVJdGVtKGNoZWNrSW4pIHtcbiAgY29uc3QgY2hlY2tJbkhlYWRlcnMgPSB7XG4gICAgdHlwZTogJ2NoZWNrX2luJyxcbiAgfTtcbiAgcmV0dXJuIFtjaGVja0luSGVhZGVycywgY2hlY2tJbl07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUNoZWNrSW5FbnZlbG9wZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlY2tpbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/checkin.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/client.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/client.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseClient: () => (/* binding */ BaseClient),\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   _getTraceInfoFromScope: () => (/* binding */ _getTraceInfoFromScope)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api.js */ \"./node_modules/@sentry/core/build/esm/api.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@sentry/core/build/esm/constants.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./envelope.js */ \"./node_modules/@sentry/core/build/esm/envelope.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./session.js */ \"./node_modules/@sentry/core/build/esm/session.js\");\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _utils_eventUtils_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/eventUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/eventUtils.js\");\n/* harmony import */ var _utils_merge_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/merge.js */ \"./node_modules/@sentry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/parseSampleRate.js */ \"./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js\");\n/* harmony import */ var _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/prepareEvent.js */ \"./node_modules/@sentry/core/build/esm/utils/prepareEvent.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_transactionEvent_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./utils/transactionEvent.js */ \"./node_modules/@sentry/core/build/esm/utils/transactionEvent.js\");\n/* harmony import */ var _utils_hoist_clientreport_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils-hoist/clientreport.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/clientreport.js\");\n/* harmony import */ var _utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils-hoist/misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* eslint-disable max-lines */\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\nconst MISSING_RELEASE_FOR_SESSION_ERROR = 'Discarded session because of missing or non-string release';\n\nconst INTERNAL_ERROR_SYMBOL = Symbol.for('SentryInternalError');\nconst DO_NOT_SEND_EVENT_SYMBOL = Symbol.for('SentryDoNotSendEventError');\n\nfunction _makeInternalError(message) {\n  return {\n    message,\n    [INTERNAL_ERROR_SYMBOL]: true,\n  };\n}\n\nfunction _makeDoNotSendEventError(message) {\n  return {\n    message,\n    [DO_NOT_SEND_EVENT_SYMBOL]: true,\n  };\n}\n\nfunction _isInternalError(error) {\n  return !!error && typeof error === 'object' && INTERNAL_ERROR_SYMBOL in error;\n}\n\nfunction _isDoNotSendEventError(error) {\n  return !!error && typeof error === 'object' && DO_NOT_SEND_EVENT_SYMBOL in error;\n}\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link Client._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends Client<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nclass Client {\n  /** Options passed to the SDK. */\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n  /** Array of set up integrations. */\n\n  /** Number of calls being processed */\n\n  /** Holds flushable  */\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n   constructor(options) {\n    this._options = options;\n    this._integrations = {};\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n\n    if (options.dsn) {\n      this._dsn = (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.makeDsn)(options.dsn);\n    } else {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn('No DSN provided, client will not send events.');\n    }\n\n    if (this._dsn) {\n      const url = (0,_api_js__WEBPACK_IMPORTED_MODULE_3__.getEnvelopeEndpointWithUrlEncodedAuth)(\n        this._dsn,\n        options.tunnel,\n        options._metadata ? options._metadata.sdk : undefined,\n      );\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * Captures an exception event and sends it to Sentry.\n   *\n   * Unlike `captureException` exported from every SDK, this method requires that you pass it the current scope.\n   */\n   captureException(exception, hint, scope) {\n    const eventId = (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.uuid4)();\n\n    // ensure we haven't captured this very object before\n    if ((0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.checkOrSetAlreadyCaught)(exception)) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    this._process(\n      this.eventFromException(exception, hintWithEventId).then(event =>\n        this._captureEvent(event, hintWithEventId, scope),\n      ),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a message event and sends it to Sentry.\n   *\n   * Unlike `captureMessage` exported from every SDK, this method requires that you pass it the current scope.\n   */\n   captureMessage(\n    message,\n    level,\n    hint,\n    currentScope,\n  ) {\n    const hintWithEventId = {\n      event_id: (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.uuid4)(),\n      ...hint,\n    };\n\n    const eventMessage = (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isParameterizedString)(message) ? message : String(message);\n\n    const promisedEvent = (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isPrimitive)(message)\n      ? this.eventFromMessage(eventMessage, level, hintWithEventId)\n      : this.eventFromException(message, hintWithEventId);\n\n    this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a manually created event and sends it to Sentry.\n   *\n   * Unlike `captureEvent` exported from every SDK, this method requires that you pass it the current scope.\n   */\n   captureEvent(event, hint, currentScope) {\n    const eventId = (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.uuid4)();\n\n    // ensure we haven't captured this very object before\n    if (hint?.originalException && (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.checkOrSetAlreadyCaught)(hint.originalException)) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope = sdkProcessingMetadata.capturedSpanScope;\n    const capturedSpanIsolationScope = sdkProcessingMetadata.capturedSpanIsolationScope;\n\n    this._process(\n      this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope, capturedSpanIsolationScope),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * Captures a session.\n   */\n   captureSession(session) {\n    this.sendSession(session);\n    // After sending, we set init false to indicate it's not the first occurrence\n    (0,_session_js__WEBPACK_IMPORTED_MODULE_6__.updateSession)(session, { init: false });\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry. This method is not available on all clients.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   * @param scope An optional scope containing event metadata.\n   * @returns A string representing the id of the check in.\n   */\n\n  /**\n   * Get the current Dsn.\n   */\n   getDsn() {\n    return this._dsn;\n  }\n\n  /**\n   * Get the current options.\n   */\n   getOptions() {\n    return this._options;\n  }\n\n  /**\n   * Get the SDK metadata.\n   * @see SdkMetadata\n   */\n   getSdkMetadata() {\n    return this._options._metadata;\n  }\n\n  /**\n   * Returns the transport that is used by the client.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   */\n   getTransport() {\n    return this._transport;\n  }\n\n  /**\n   * Wait for all events to be sent or the timeout to expire, whichever comes first.\n   *\n   * @param timeout Maximum time in ms the client should wait for events to be flushed. Omitting this parameter will\n   *   cause the client to wait until all events are sent before resolving the promise.\n   * @returns A promise that will resolve with `true` if all events are sent before the timeout, or `false` if there are\n   * still events in the queue when the timeout is reached.\n   */\n   flush(timeout) {\n    const transport = this._transport;\n    if (transport) {\n      this.emit('flush');\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__.resolvedSyncPromise)(true);\n    }\n  }\n\n  /**\n   * Flush the event queue and set the client to `enabled = false`. See {@link Client.flush}.\n   *\n   * @param {number} timeout Maximum time in ms the client should wait before shutting down. Omitting this parameter will cause\n   *   the client to wait until all events are sent before disabling itself.\n   * @returns {Promise<boolean>} A promise which resolves to `true` if the flush completes successfully before the timeout, or `false` if\n   * it doesn't.\n   */\n   close(timeout) {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      this.emit('close');\n      return result;\n    });\n  }\n\n  /**\n   * Get all installed event processors.\n   */\n   getEventProcessors() {\n    return this._eventProcessors;\n  }\n\n  /**\n   * Adds an event processor that applies to any event processed by this client.\n   */\n   addEventProcessor(eventProcessor) {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /**\n   * Initialize this client.\n   * Call this after the client was set on a scope.\n   */\n   init() {\n    if (\n      this._isEnabled() ||\n      // Force integrations to be setup even if no DSN was set when we have\n      // Spotlight enabled. This is particularly important for browser as we\n      // don't support the `spotlight` option there and rely on the users\n      // adding the `spotlightBrowserIntegration()` to their integrations which\n      // wouldn't get initialized with the check below when there's no DSN set.\n      this._options.integrations.some(({ name }) => name.startsWith('Spotlight'))\n    ) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns {Integration|undefined} The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n   getIntegrationByName(integrationName) {\n    return this._integrations[integrationName] ;\n  }\n\n  /**\n   * Add an integration to the client.\n   * This can be used to e.g. lazy load integrations.\n   * In most cases, this should not be necessary,\n   * and you're better off just passing the integrations via `integrations: []` at initialization time.\n   * However, if you find the need to conditionally load & add an integration, you can use `addIntegration` to do so.\n   */\n   addIntegration(integration) {\n    const isAlreadyInstalled = this._integrations[integration.name];\n\n    // This hook takes care of only installing if not already installed\n    (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.setupIntegration)(this, integration, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.afterSetupIntegrations)(this, [integration]);\n    }\n  }\n\n  /**\n   * Send a fully prepared event to Sentry.\n   */\n   sendEvent(event, hint = {}) {\n    this.emit('beforeSendEvent', event, hint);\n\n    let env = (0,_envelope_js__WEBPACK_IMPORTED_MODULE_9__.createEventEnvelope)(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n    for (const attachment of hint.attachments || []) {\n      env = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_10__.addItemToEnvelope)(env, (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_10__.createAttachmentEnvelopeItem)(attachment));\n    }\n\n    const promise = this.sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * Send a session or session aggregrates to Sentry.\n   */\n   sendSession(session) {\n    // Backfill release and environment on session\n    const { release: clientReleaseOption, environment: clientEnvironmentOption = _constants_js__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_ENVIRONMENT } = this._options;\n    if ('aggregates' in session) {\n      const sessionAttrs = session.attrs || {};\n      if (!sessionAttrs.release && !clientReleaseOption) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      sessionAttrs.release = sessionAttrs.release || clientReleaseOption;\n      sessionAttrs.environment = sessionAttrs.environment || clientEnvironmentOption;\n      session.attrs = sessionAttrs;\n    } else {\n      if (!session.release && !clientReleaseOption) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(MISSING_RELEASE_FOR_SESSION_ERROR);\n        return;\n      }\n      session.release = session.release || clientReleaseOption;\n      session.environment = session.environment || clientEnvironmentOption;\n    }\n\n    this.emit('beforeSendSession', session);\n\n    const env = (0,_envelope_js__WEBPACK_IMPORTED_MODULE_9__.createSessionEnvelope)(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(env);\n  }\n\n  /**\n   * Record on the client that an event got dropped (ie, an event that will not be sent to Sentry).\n   */\n   recordDroppedEvent(reason, category, count = 1) {\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n      this._outcomes[key] = (this._outcomes[key] || 0) + count;\n    }\n  }\n\n  /* eslint-disable @typescript-eslint/unified-signatures */\n  /**\n   * Register a callback for whenever a span is started.\n   * Receives the span as argument.\n   * @returns {() => void} A function that, when executed, removes the registered callback.\n   */\n\n  /**\n   * Register a hook on this client.\n   */\n   on(hook, callback) {\n    const hooks = (this._hooks[hook] = this._hooks[hook] || []);\n\n    // @ts-expect-error We assume the types are correct\n    hooks.push(callback);\n\n    // This function returns a callback execution handler that, when invoked,\n    // deregisters a callback. This is crucial for managing instances where callbacks\n    // need to be unregistered to prevent self-referencing in callback closures,\n    // ensuring proper garbage collection.\n    return () => {\n      // @ts-expect-error We assume the types are correct\n      const cbIndex = hooks.indexOf(callback);\n      if (cbIndex > -1) {\n        hooks.splice(cbIndex, 1);\n      }\n    };\n  }\n\n  /** Fire a hook whenever a span starts. */\n\n  /**\n   * Emit a hook that was previously registered via `on()`.\n   */\n   emit(hook, ...rest) {\n    const callbacks = this._hooks[hook];\n    if (callbacks) {\n      callbacks.forEach(callback => callback(...rest));\n    }\n  }\n\n  /**\n   * Send an envelope to Sentry.\n   */\n   sendEnvelope(envelope) {\n    this.emit('beforeEnvelope', envelope);\n\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.error('Error while sending envelope:', reason);\n        return reason;\n      });\n    }\n\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.error('Transport disabled');\n\n    return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__.resolvedSyncPromise)({});\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n   _setupIntegrations() {\n    const { integrations } = this._options;\n    this._integrations = (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.setupIntegrations)(this, integrations);\n    (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.afterSetupIntegrations)(this, integrations);\n  }\n\n  /** Updates existing session based on the provided event */\n   _updateSessionFromEvent(session, event) {\n    let crashed = event.level === 'fatal';\n    let errored = false;\n    const exceptions = event.exception?.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism?.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      (0,_session_js__WEBPACK_IMPORTED_MODULE_6__.updateSession)(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n   _isClientDoneProcessing(timeout) {\n    return new _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__.SyncPromise(resolve => {\n      let ticked = 0;\n      const tick = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n   _isEnabled() {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n   _prepareEvent(\n    event,\n    hint,\n    currentScope,\n    isolationScope,\n  ) {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations?.length) {\n      hint.integrations = integrations;\n    }\n\n    this.emit('preprocessEvent', event, hint);\n\n    if (!event.type) {\n      isolationScope.setLastEventId(event.event_id || hint.event_id);\n    }\n\n    return (0,_utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_12__.prepareEvent)(options, event, hint, currentScope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n\n      this.emit('postprocessEvent', evt, hint);\n\n      evt.contexts = {\n        trace: (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_13__.getTraceContextFromScope)(currentScope),\n        ...evt.contexts,\n      };\n\n      const dynamicSamplingContext = (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_14__.getDynamicSamplingContextFromScope)(this, currentScope);\n\n      evt.sdkProcessingMetadata = {\n        dynamicSamplingContext,\n        ...evt.sdkProcessingMetadata,\n      };\n\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n   _captureEvent(\n    event,\n    hint = {},\n    currentScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_13__.getCurrentScope)(),\n    isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_13__.getIsolationScope)(),\n  ) {\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && isErrorEvent(event)) {\n      _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(`Captured error event \\`${(0,_utils_eventUtils_js__WEBPACK_IMPORTED_MODULE_15__.getPossibleEventMessages)(event)[0] || '<unknown>'}\\``);\n    }\n\n    return this._processEvent(event, hint, currentScope, isolationScope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n          if (_isDoNotSendEventError(reason)) {\n            _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(reason.message);\n          } else if (_isInternalError(reason)) {\n            _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(reason.message);\n          } else {\n            _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(reason);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n   _processEvent(\n    event,\n    hint,\n    currentScope,\n    isolationScope,\n  ) {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : (0,_utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_16__.parseSampleRate)(sampleRate);\n    if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error');\n      return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_7__.rejectedSyncPromise)(\n        _makeDoNotSendEventError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    const dataCategory = (eventType === 'replay_event' ? 'replay' : eventType) ;\n\n    return this._prepareEvent(event, hint, currentScope, isolationScope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory);\n          throw _makeDoNotSendEventError('An event processor returned `null`, will not send event.');\n        }\n\n        const isInternalException = hint.data && (hint.data ).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(this, options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory);\n          if (isTransaction) {\n            const spans = event.spans || [];\n            // the transaction itself counts as one span, plus all the child spans that are added\n            const spanCount = 1 + spans.length;\n            this.recordDroppedEvent('before_send', 'span', spanCount);\n          }\n          throw _makeDoNotSendEventError(`${beforeSendLabel} returned \\`null\\`, will not send event.`);\n        }\n\n        const session = currentScope.getSession() || isolationScope.getSession();\n        if (isError && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        if (isTransaction) {\n          const spanCountBefore = processedEvent.sdkProcessingMetadata?.spanCountBeforeProcessing || 0;\n          const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n\n          const droppedSpanCount = spanCountBefore - spanCountAfter;\n          if (droppedSpanCount > 0) {\n            this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n          }\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (_isDoNotSendEventError(reason) || _isInternalError(reason)) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw _makeInternalError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n   _process(promise) {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n   _clearOutcomes() {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.entries(outcomes).map(([key, quantity]) => {\n      const [reason, category] = key.split(':') ;\n      return {\n        reason,\n        category,\n        quantity,\n      };\n    });\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n   _flushOutcomes() {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log('Flushing outcomes...');\n\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log('Sending outcomes:', outcomes);\n\n    const envelope = (0,_utils_hoist_clientreport_js__WEBPACK_IMPORTED_MODULE_17__.createClientReportEnvelope)(outcomes, this._options.tunnel && (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.dsnToString)(this._dsn));\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n\n  /**\n   * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n   */\n\n}\n\n/**\n * @deprecated Use `Client` instead. This alias may be removed in a future major version.\n */\n// TODO(v10): Remove\n\n/**\n * @deprecated Use `Client` instead. This alias may be removed in a future major version.\n */\n// TODO(v10): Remove\nconst BaseClient = Client;\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult,\n  beforeSendLabel,\n) {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isThenable)(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!(0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(event) && event !== null) {\n          throw _makeInternalError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw _makeInternalError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!(0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isPlainObject)(beforeSendResult) && beforeSendResult !== null) {\n    throw _makeInternalError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  client,\n  options,\n  event,\n  hint,\n) {\n  const { beforeSend, beforeSendTransaction, beforeSendSpan } = options;\n  let processedEvent = event;\n\n  if (isErrorEvent(processedEvent) && beforeSend) {\n    return beforeSend(processedEvent, hint);\n  }\n\n  if (isTransactionEvent(processedEvent)) {\n    if (beforeSendSpan) {\n      // process root span\n      const processedRootSpanJson = beforeSendSpan((0,_utils_transactionEvent_js__WEBPACK_IMPORTED_MODULE_18__.convertTransactionEventToSpanJson)(processedEvent));\n      if (!processedRootSpanJson) {\n        (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_19__.showSpanDropWarning)();\n      } else {\n        // update event with processed root span values\n        processedEvent = (0,_utils_merge_js__WEBPACK_IMPORTED_MODULE_20__.merge)(event, (0,_utils_transactionEvent_js__WEBPACK_IMPORTED_MODULE_18__.convertSpanJsonToTransactionEvent)(processedRootSpanJson));\n      }\n\n      // process child spans\n      if (processedEvent.spans) {\n        const processedSpans = [];\n        for (const span of processedEvent.spans) {\n          const processedSpan = beforeSendSpan(span);\n          if (!processedSpan) {\n            (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_19__.showSpanDropWarning)();\n            processedSpans.push(span);\n          } else {\n            processedSpans.push(processedSpan);\n          }\n        }\n        processedEvent.spans = processedSpans;\n      }\n    }\n\n    if (beforeSendTransaction) {\n      if (processedEvent.spans) {\n        // We store the # of spans before processing in SDK metadata,\n        // so we can compare it afterwards to determine how many spans were dropped\n        const spanCountBefore = processedEvent.spans.length;\n        processedEvent.sdkProcessingMetadata = {\n          ...event.sdkProcessingMetadata,\n          spanCountBeforeProcessing: spanCountBefore,\n        };\n      }\n      return beforeSendTransaction(processedEvent , hint);\n    }\n  }\n\n  return processedEvent;\n}\n\nfunction isErrorEvent(event) {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\n\n/** Extract trace information from scope */\nfunction _getTraceInfoFromScope(\n  client,\n  scope,\n) {\n  if (!scope) {\n    return [undefined, undefined];\n  }\n\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_13__.withScope)(scope, () => {\n    const span = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_19__.getActiveSpan)();\n    const traceContext = span ? (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_19__.spanToTraceContext)(span) : (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_13__.getTraceContextFromScope)(scope);\n    const dynamicSamplingContext = span\n      ? (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_14__.getDynamicSamplingContextFromSpan)(span)\n      : (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_14__.getDynamicSamplingContextFromScope)(client, scope);\n    return [dynamicSamplingContext, traceContext];\n  });\n}\n\n\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/client.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ENVIRONMENT: () => (/* binding */ DEFAULT_ENVIRONMENT)\n/* harmony export */ });\nconst DEFAULT_ENVIRONMENT = 'production';\n\n\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUUrQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jb25zdGFudHMuanM/OGUwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERUZBVUxUX0VOVklST05NRU5UID0gJ3Byb2R1Y3Rpb24nO1xuXG5leHBvcnQgeyBERUZBVUxUX0VOVklST05NRU5UIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/constants.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/currentScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/currentScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getClient: () => (/* binding */ getClient),\n/* harmony export */   getCurrentScope: () => (/* binding */ getCurrentScope),\n/* harmony export */   getGlobalScope: () => (/* binding */ getGlobalScope),\n/* harmony export */   getIsolationScope: () => (/* binding */ getIsolationScope),\n/* harmony export */   getTraceContextFromScope: () => (/* binding */ getTraceContextFromScope),\n/* harmony export */   withIsolationScope: () => (/* binding */ withIsolationScope),\n/* harmony export */   withScope: () => (/* binding */ withScope)\n/* harmony export */ });\n/* harmony import */ var _asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./asyncContext/index.js */ \"./node_modules/@sentry/core/build/esm/asyncContext/index.js\");\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./carrier.js */ \"./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scope.js */ \"./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-hoist/propagationContext.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n\n\n\n\n\n/**\n * Get the currently active scope.\n */\nfunction getCurrentScope() {\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n  const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__.getAsyncContextStrategy)(carrier);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nfunction getIsolationScope() {\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n  const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__.getAsyncContextStrategy)(carrier);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nfunction getGlobalScope() {\n  return (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalSingleton)('globalScope', () => new _scope_js__WEBPACK_IMPORTED_MODULE_2__.Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\n\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nfunction withScope(\n  ...rest\n) {\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n  const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__.getAsyncContextStrategy)(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n\n    return acs.withSetScope(scope, callback);\n  }\n\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\n\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nfunction withIsolationScope(\n  ...rest\n\n) {\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getMainCarrier)();\n  const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_1__.getAsyncContextStrategy)(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nfunction getClient() {\n  return getCurrentScope().getClient();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nfunction getTraceContextFromScope(scope) {\n  const propagationContext = scope.getPropagationContext();\n\n  const { traceId, parentSpanId, propagationSpanId } = propagationContext;\n\n  const traceContext = {\n    trace_id: traceId,\n    span_id: propagationSpanId || (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_3__.generateSpanId)(),\n  };\n\n  if (parentSpanId) {\n    traceContext.parent_span_id = parentSpanId;\n  }\n\n  return traceContext;\n}\n\n\n//# sourceMappingURL=currentScopes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jdXJyZW50U2NvcGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQWtFO0FBQ0E7QUFDL0I7QUFDa0M7O0FBRXJFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDJEQUFjO0FBQ2hDLGNBQWMsK0VBQXVCO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwyREFBYztBQUNoQyxjQUFjLCtFQUF1QjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtEQUFrQiwwQkFBMEIsNENBQUs7QUFDMUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMkRBQWM7QUFDaEMsY0FBYywrRUFBdUI7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsMkRBQWM7QUFDaEMsY0FBYywrRUFBdUI7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVUsMkNBQTJDOztBQUVyRDtBQUNBO0FBQ0Esa0NBQWtDLGtGQUFjO0FBQ2hEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVrSTtBQUNsSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9jdXJyZW50U2NvcGVzLmpzPzY1ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kgfSBmcm9tICcuL2FzeW5jQ29udGV4dC9pbmRleC5qcyc7XG5pbXBvcnQgeyBnZXRNYWluQ2FycmllciwgZ2V0R2xvYmFsU2luZ2xldG9uIH0gZnJvbSAnLi9jYXJyaWVyLmpzJztcbmltcG9ydCB7IFNjb3BlIH0gZnJvbSAnLi9zY29wZS5qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVNwYW5JZCB9IGZyb20gJy4vdXRpbHMtaG9pc3QvcHJvcGFnYXRpb25Db250ZXh0LmpzJztcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY29wZSgpIHtcbiAgY29uc3QgY2FycmllciA9IGdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IGFjcyA9IGdldEFzeW5jQ29udGV4dFN0cmF0ZWd5KGNhcnJpZXIpO1xuICByZXR1cm4gYWNzLmdldEN1cnJlbnRTY29wZSgpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBpc29sYXRpb24gc2NvcGUuXG4gKiBUaGUgaXNvbGF0aW9uIHNjb3BlIGlzIGFjdGl2ZSBmb3IgdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGNvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIGdldElzb2xhdGlvblNjb3BlKCkge1xuICBjb25zdCBjYXJyaWVyID0gZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3QgYWNzID0gZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koY2Fycmllcik7XG4gIHJldHVybiBhY3MuZ2V0SXNvbGF0aW9uU2NvcGUoKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGdsb2JhbCBzY29wZS5cbiAqIFRoaXMgc2NvcGUgaXMgYXBwbGllZCB0byBfYWxsXyBldmVudHMuXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbFNjb3BlKCkge1xuICByZXR1cm4gZ2V0R2xvYmFsU2luZ2xldG9uKCdnbG9iYWxTY29wZScsICgpID0+IG5ldyBTY29wZSgpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNjb3BlIHdpdGggYW5kIGV4ZWN1dGVzIHRoZSBnaXZlbiBvcGVyYXRpb24gd2l0aGluLlxuICogVGhlIHNjb3BlIGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBvbmNlIHRoZSBvcGVyYXRpb25cbiAqIGZpbmlzaGVzIG9yIHRocm93cy5cbiAqL1xuXG4vKipcbiAqIEVpdGhlciBjcmVhdGVzIGEgbmV3IGFjdGl2ZSBzY29wZSwgb3Igc2V0cyB0aGUgZ2l2ZW4gc2NvcGUgYXMgYWN0aXZlIHNjb3BlIGluIHRoZSBnaXZlbiBjYWxsYmFjay5cbiAqL1xuZnVuY3Rpb24gd2l0aFNjb3BlKFxuICAuLi5yZXN0XG4pIHtcbiAgY29uc3QgY2FycmllciA9IGdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IGFjcyA9IGdldEFzeW5jQ29udGV4dFN0cmF0ZWd5KGNhcnJpZXIpO1xuXG4gIC8vIElmIGEgc2NvcGUgaXMgZGVmaW5lZCwgd2Ugd2FudCB0byBtYWtlIHRoaXMgdGhlIGFjdGl2ZSBzY29wZSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IG9uZVxuICBpZiAocmVzdC5sZW5ndGggPT09IDIpIHtcbiAgICBjb25zdCBbc2NvcGUsIGNhbGxiYWNrXSA9IHJlc3Q7XG5cbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICByZXR1cm4gYWNzLndpdGhTY29wZShjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjcy53aXRoU2V0U2NvcGUoc2NvcGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHJldHVybiBhY3Mud2l0aFNjb3BlKHJlc3RbMF0pO1xufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGZvcmsgdGhlIGN1cnJlbnQgaXNvbGF0aW9uIHNjb3BlIGFuZCB0aGUgY3VycmVudCBzY29wZSBiYXNlZCBvbiB0aGUgY3VycmVudCBhc3luYyBjb250ZXh0IHN0cmF0ZWd5LiBJZiBub1xuICogYXN5bmMgY29udGV4dCBzdHJhdGVneSBpcyBzZXQsIHRoZSBpc29sYXRpb24gc2NvcGUgYW5kIHRoZSBjdXJyZW50IHNjb3BlIHdpbGwgbm90IGJlIGZvcmtlZCAodGhpcyBpcyBjdXJyZW50bHkgdGhlXG4gKiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIGJyb3dzZXIpLlxuICpcbiAqIFVzYWdlIG9mIHRoaXMgZnVuY3Rpb24gaW4gZW52aXJvbm1lbnRzIHdpdGhvdXQgYXN5bmMgY29udGV4dCBzdHJhdGVneSBpcyBkaXNjb3VyYWdlZCBhbmQgbWF5IGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvdXIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCBmb3IgU2VudHJ5IFNESyBhbmQgU0RLIGludGVncmF0aW9uIGRldmVsb3BtZW50LiBJdCBpcyBub3QgcmVjb21tZW5kZWQgdG8gYmUgdXNlZCBpbiBcIm5vcm1hbFwiXG4gKiBhcHBsaWNhdGlvbnMgZGlyZWN0bHkgYmVjYXVzZSBpdCBjb21lcyB3aXRoIHBpdGZhbGxzLiBVc2UgYXQgeW91ciBvd24gcmlzayFcbiAqL1xuXG4vKipcbiAqIEVpdGhlciBjcmVhdGVzIGEgbmV3IGFjdGl2ZSBpc29sYXRpb24gc2NvcGUsIG9yIHNldHMgdGhlIGdpdmVuIGlzb2xhdGlvbiBzY29wZSBhcyBhY3RpdmUgc2NvcGUgaW4gdGhlIGdpdmVuIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiB3aXRoSXNvbGF0aW9uU2NvcGUoXG4gIC4uLnJlc3RcblxuKSB7XG4gIGNvbnN0IGNhcnJpZXIgPSBnZXRNYWluQ2FycmllcigpO1xuICBjb25zdCBhY3MgPSBnZXRBc3luY0NvbnRleHRTdHJhdGVneShjYXJyaWVyKTtcblxuICAvLyBJZiBhIHNjb3BlIGlzIGRlZmluZWQsIHdlIHdhbnQgdG8gbWFrZSB0aGlzIHRoZSBhY3RpdmUgc2NvcGUgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBvbmVcbiAgaWYgKHJlc3QubGVuZ3RoID09PSAyKSB7XG4gICAgY29uc3QgW2lzb2xhdGlvblNjb3BlLCBjYWxsYmFja10gPSByZXN0O1xuXG4gICAgaWYgKCFpc29sYXRpb25TY29wZSkge1xuICAgICAgcmV0dXJuIGFjcy53aXRoSXNvbGF0aW9uU2NvcGUoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Mud2l0aFNldElzb2xhdGlvblNjb3BlKGlzb2xhdGlvblNjb3BlLCBjYWxsYmFjayk7XG4gIH1cblxuICByZXR1cm4gYWNzLndpdGhJc29sYXRpb25TY29wZShyZXN0WzBdKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgY2xpZW50LlxuICovXG5mdW5jdGlvbiBnZXRDbGllbnQoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50U2NvcGUoKS5nZXRDbGllbnQoKTtcbn1cblxuLyoqXG4gKiBHZXQgYSB0cmFjZSBjb250ZXh0IGZvciB0aGUgZ2l2ZW4gc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGdldFRyYWNlQ29udGV4dEZyb21TY29wZShzY29wZSkge1xuICBjb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSBzY29wZS5nZXRQcm9wYWdhdGlvbkNvbnRleHQoKTtcblxuICBjb25zdCB7IHRyYWNlSWQsIHBhcmVudFNwYW5JZCwgcHJvcGFnYXRpb25TcGFuSWQgfSA9IHByb3BhZ2F0aW9uQ29udGV4dDtcblxuICBjb25zdCB0cmFjZUNvbnRleHQgPSB7XG4gICAgdHJhY2VfaWQ6IHRyYWNlSWQsXG4gICAgc3Bhbl9pZDogcHJvcGFnYXRpb25TcGFuSWQgfHwgZ2VuZXJhdGVTcGFuSWQoKSxcbiAgfTtcblxuICBpZiAocGFyZW50U3BhbklkKSB7XG4gICAgdHJhY2VDb250ZXh0LnBhcmVudF9zcGFuX2lkID0gcGFyZW50U3BhbklkO1xuICB9XG5cbiAgcmV0dXJuIHRyYWNlQ29udGV4dDtcbn1cblxuZXhwb3J0IHsgZ2V0Q2xpZW50LCBnZXRDdXJyZW50U2NvcGUsIGdldEdsb2JhbFNjb3BlLCBnZXRJc29sYXRpb25TY29wZSwgZ2V0VHJhY2VDb250ZXh0RnJvbVNjb3BlLCB3aXRoSXNvbGF0aW9uU2NvcGUsIHdpdGhTY29wZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VycmVudFNjb3Blcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/currentScopes.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/debug-build.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/debug-build.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\n\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUF1QyxJQUFJLEtBQWdCOztBQUV6RDtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9kZWJ1Zy1idWlsZC5qcz80ZWZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydCB7IERFQlVHX0JVSUxEIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/debug-build.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/defaultScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/defaultScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultCurrentScope: () => (/* binding */ getDefaultCurrentScope),\n/* harmony export */   getDefaultIsolationScope: () => (/* binding */ getDefaultIsolationScope)\n/* harmony export */ });\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./carrier.js */ \"./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scope.js */ \"./node_modules/@sentry/core/build/esm/scope.js\");\n\n\n\n/** Get the default current scope. */\nfunction getDefaultCurrentScope() {\n  return (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalSingleton)('defaultCurrentScope', () => new _scope_js__WEBPACK_IMPORTED_MODULE_1__.Scope());\n}\n\n/** Get the default isolation scope. */\nfunction getDefaultIsolationScope() {\n  return (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getGlobalSingleton)('defaultIsolationScope', () => new _scope_js__WEBPACK_IMPORTED_MODULE_1__.Scope());\n}\n\n\n//# sourceMappingURL=defaultScopes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9kZWZhdWx0U2NvcGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0Q7QUFDZjs7QUFFbkM7QUFDQTtBQUNBLFNBQVMsK0RBQWtCLGtDQUFrQyw0Q0FBSztBQUNsRTs7QUFFQTtBQUNBO0FBQ0EsU0FBUywrREFBa0Isb0NBQW9DLDRDQUFLO0FBQ3BFOztBQUU0RDtBQUM1RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9kZWZhdWx0U2NvcGVzLmpzP2UwZTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0R2xvYmFsU2luZ2xldG9uIH0gZnJvbSAnLi9jYXJyaWVyLmpzJztcbmltcG9ydCB7IFNjb3BlIH0gZnJvbSAnLi9zY29wZS5qcyc7XG5cbi8qKiBHZXQgdGhlIGRlZmF1bHQgY3VycmVudCBzY29wZS4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRDdXJyZW50U2NvcGUoKSB7XG4gIHJldHVybiBnZXRHbG9iYWxTaW5nbGV0b24oJ2RlZmF1bHRDdXJyZW50U2NvcGUnLCAoKSA9PiBuZXcgU2NvcGUoKSk7XG59XG5cbi8qKiBHZXQgdGhlIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlLiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkge1xuICByZXR1cm4gZ2V0R2xvYmFsU2luZ2xldG9uKCdkZWZhdWx0SXNvbGF0aW9uU2NvcGUnLCAoKSA9PiBuZXcgU2NvcGUoKSk7XG59XG5cbmV4cG9ydCB7IGdldERlZmF1bHRDdXJyZW50U2NvcGUsIGdldERlZmF1bHRJc29sYXRpb25TY29wZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdFNjb3Blcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/defaultScopes.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/envelope.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/envelope.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEventEnvelope: () => (/* binding */ createEventEnvelope),\n/* harmony export */   createSessionEnvelope: () => (/* binding */ createSessionEnvelope),\n/* harmony export */   createSpanEnvelope: () => (/* binding */ createSpanEnvelope)\n/* harmony export */ });\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n\n\n\n\n\n\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nfunction createSessionEnvelope(\n  session,\n  dsn,\n  metadata,\n  tunnel,\n) {\n  const sdkInfo = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.getSdkMetadataForEnvelopeHeader)(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_1__.dsnToString)(dsn) }),\n  };\n\n  const envelopeItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session.toJSON()];\n\n  return (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createEnvelope)(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nfunction createEventEnvelope(\n  event,\n  dsn,\n  metadata,\n  tunnel,\n) {\n  const sdkInfo = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.getSdkMetadataForEnvelopeHeader)(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n\n  enhanceEventWithSdkInfo(event, metadata?.sdk);\n\n  const envelopeHeaders = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createEventEnvelopeHeaders)(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem = [{ type: eventType }, event];\n  return (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createEnvelope)(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nfunction createSpanEnvelope(spans, client) {\n  function dscHasRequiredProps(dsc) {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_2__.getDynamicSamplingContextFromSpan)(spans[0]);\n\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n\n  const headers = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && { trace: dsc }),\n    ...(!!tunnel && dsn && { dsn: (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_1__.dsnToString)(dsn) }),\n  };\n\n  const beforeSendSpan = client?.getOptions().beforeSendSpan;\n  const convertToSpanJSON = beforeSendSpan\n    ? (span) => {\n        const spanJson = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToJSON)(span);\n        const processedSpan = beforeSendSpan(spanJson);\n\n        if (!processedSpan) {\n          (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.showSpanDropWarning)();\n          return spanJson;\n        }\n\n        return processedSpan;\n      }\n    : _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToJSON;\n\n  const items = [];\n  for (const span of spans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push((0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createSpanEnvelopeItem)(spanJson));\n    }\n  }\n\n  return (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_0__.createEnvelope)(headers, items);\n}\n\n\n//# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9lbnZlbG9wZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXdGO0FBQ2pCO0FBQ3BCO0FBQzZGO0FBQ3RIO0FBQ087O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix5RkFBK0I7QUFDakQ7QUFDQTtBQUNBLHFCQUFxQixjQUFjO0FBQ25DLDZCQUE2QixLQUFLLGdFQUFXLE9BQU87QUFDcEQ7O0FBRUE7QUFDQSxpQ0FBaUMsa0JBQWtCLGdCQUFnQixpQkFBaUI7O0FBRXBGLFNBQVMsd0VBQWM7QUFDdkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlGQUErQjs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSwwQkFBMEIsb0ZBQTBCOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixpQkFBaUI7QUFDeEMsU0FBUyx3RUFBYztBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxR0FBaUM7O0FBRS9DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNDQUFzQyxZQUFZO0FBQ2xELDZCQUE2QixLQUFLLGdFQUFXLE9BQU87QUFDcEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLCtEQUFVO0FBQ25DOztBQUVBO0FBQ0EsVUFBVSx3RUFBbUI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTSwyREFBVTs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0ZBQXNCO0FBQ3ZDO0FBQ0E7O0FBRUEsU0FBUyx3RUFBYztBQUN2Qjs7QUFFMEU7QUFDMUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vZW52ZWxvcGUuanM/YWViNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4gfSBmcm9tICcuL3RyYWNpbmcvZHluYW1pY1NhbXBsaW5nQ29udGV4dC5qcyc7XG5pbXBvcnQgeyBzcGFuVG9KU09OLCBzaG93U3BhbkRyb3BXYXJuaW5nIH0gZnJvbSAnLi91dGlscy9zcGFuVXRpbHMuanMnO1xuaW1wb3J0IHsgZHNuVG9TdHJpbmcgfSBmcm9tICcuL3V0aWxzLWhvaXN0L2Rzbi5qcyc7XG5pbXBvcnQgeyBnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyLCBjcmVhdGVFdmVudEVudmVsb3BlSGVhZGVycywgY3JlYXRlRW52ZWxvcGUsIGNyZWF0ZVNwYW5FbnZlbG9wZUl0ZW0gfSBmcm9tICcuL3V0aWxzLWhvaXN0L2VudmVsb3BlLmpzJztcbmltcG9ydCAnLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgJy4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJztcblxuLyoqXG4gKiBBcHBseSBTZGtJbmZvIChuYW1lLCB2ZXJzaW9uLCBwYWNrYWdlcywgaW50ZWdyYXRpb25zKSB0byB0aGUgY29ycmVzcG9uZGluZyBldmVudCBrZXkuXG4gKiBNZXJnZSB3aXRoIGV4aXN0aW5nIGRhdGEgaWYgYW55LlxuICoqL1xuZnVuY3Rpb24gZW5oYW5jZUV2ZW50V2l0aFNka0luZm8oZXZlbnQsIHNka0luZm8pIHtcbiAgaWYgKCFzZGtJbmZvKSB7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG4gIGV2ZW50LnNkayA9IGV2ZW50LnNkayB8fCB7fTtcbiAgZXZlbnQuc2RrLm5hbWUgPSBldmVudC5zZGsubmFtZSB8fCBzZGtJbmZvLm5hbWU7XG4gIGV2ZW50LnNkay52ZXJzaW9uID0gZXZlbnQuc2RrLnZlcnNpb24gfHwgc2RrSW5mby52ZXJzaW9uO1xuICBldmVudC5zZGsuaW50ZWdyYXRpb25zID0gWy4uLihldmVudC5zZGsuaW50ZWdyYXRpb25zIHx8IFtdKSwgLi4uKHNka0luZm8uaW50ZWdyYXRpb25zIHx8IFtdKV07XG4gIGV2ZW50LnNkay5wYWNrYWdlcyA9IFsuLi4oZXZlbnQuc2RrLnBhY2thZ2VzIHx8IFtdKSwgLi4uKHNka0luZm8ucGFja2FnZXMgfHwgW10pXTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKiogQ3JlYXRlcyBhbiBlbnZlbG9wZSBmcm9tIGEgU2Vzc2lvbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2Vzc2lvbkVudmVsb3BlKFxuICBzZXNzaW9uLFxuICBkc24sXG4gIG1ldGFkYXRhLFxuICB0dW5uZWwsXG4pIHtcbiAgY29uc3Qgc2RrSW5mbyA9IGdldFNka01ldGFkYXRhRm9yRW52ZWxvcGVIZWFkZXIobWV0YWRhdGEpO1xuICBjb25zdCBlbnZlbG9wZUhlYWRlcnMgPSB7XG4gICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIC4uLihzZGtJbmZvICYmIHsgc2RrOiBzZGtJbmZvIH0pLFxuICAgIC4uLighIXR1bm5lbCAmJiBkc24gJiYgeyBkc246IGRzblRvU3RyaW5nKGRzbikgfSksXG4gIH07XG5cbiAgY29uc3QgZW52ZWxvcGVJdGVtID1cbiAgICAnYWdncmVnYXRlcycgaW4gc2Vzc2lvbiA/IFt7IHR5cGU6ICdzZXNzaW9ucycgfSwgc2Vzc2lvbl0gOiBbeyB0eXBlOiAnc2Vzc2lvbicgfSwgc2Vzc2lvbi50b0pTT04oKV07XG5cbiAgcmV0dXJuIGNyZWF0ZUVudmVsb3BlKGVudmVsb3BlSGVhZGVycywgW2VudmVsb3BlSXRlbV0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBFbnZlbG9wZSBmcm9tIGFuIGV2ZW50LlxuICovXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVudmVsb3BlKFxuICBldmVudCxcbiAgZHNuLFxuICBtZXRhZGF0YSxcbiAgdHVubmVsLFxuKSB7XG4gIGNvbnN0IHNka0luZm8gPSBnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyKG1ldGFkYXRhKTtcblxuICAvKlxuICAgIE5vdGU6IER1ZSB0byBUUywgZXZlbnQudHlwZSBtYXkgYmUgYHJlcGxheV9ldmVudGAsIHRoZW9yZXRpY2FsbHkuXG4gICAgSW4gcHJhY3RpY2UsIHdlIG5ldmVyIGNhbGwgYGNyZWF0ZUV2ZW50RW52ZWxvcGVgIHdpdGggYHJlcGxheV9ldmVudGAgdHlwZSxcbiAgICBhbmQgd2UnZCBoYXZlIHRvIGFkanVzdCBhIGxvb290IG9mIHR5cGVzIHRvIG1ha2UgdGhpcyB3b3JrIHByb3Blcmx5LlxuICAgIFdlIHdhbnQgdG8gYXZvaWQgY2FzdGluZyB0aGlzIGFyb3VuZCwgYXMgdGhhdCBjb3VsZCBsZWFkIHRvIGJ1Z3MgKGUuZy4gd2hlbiB3ZSBhZGQgYW5vdGhlciB0eXBlKVxuICAgIFNvIHRoZSBzYWZlIGNob2ljZSBpcyB0byByZWFsbHkgZ3VhcmQgYWdhaW5zdCB0aGUgcmVwbGF5X2V2ZW50IHR5cGUgaGVyZS5cbiAgKi9cbiAgY29uc3QgZXZlbnRUeXBlID0gZXZlbnQudHlwZSAmJiBldmVudC50eXBlICE9PSAncmVwbGF5X2V2ZW50JyA/IGV2ZW50LnR5cGUgOiAnZXZlbnQnO1xuXG4gIGVuaGFuY2VFdmVudFdpdGhTZGtJbmZvKGV2ZW50LCBtZXRhZGF0YT8uc2RrKTtcblxuICBjb25zdCBlbnZlbG9wZUhlYWRlcnMgPSBjcmVhdGVFdmVudEVudmVsb3BlSGVhZGVycyhldmVudCwgc2RrSW5mbywgdHVubmVsLCBkc24pO1xuXG4gIC8vIFByZXZlbnQgdGhpcyBkYXRhICh3aGljaCwgaWYgaXQgZXhpc3RzLCB3YXMgdXNlZCBpbiBlYXJsaWVyIHN0ZXBzIGluIHRoZSBwcm9jZXNzaW5nIHBpcGVsaW5lKSBmcm9tIGJlaW5nIHNlbnQgdG9cbiAgLy8gc2VudHJ5LiAoTm90ZTogT3VyIHVzZSBvZiB0aGlzIHByb3BlcnR5IGNvbWVzIGFuZCBnb2VzIHdpdGggd2hhdGV2ZXIgd2UgbWlnaHQgYmUgZGVidWdnaW5nLCB3aGF0ZXZlciBoYWNrcyB3ZSBtYXlcbiAgLy8gaGF2ZSB0ZW1wb3JhcmlseSBhZGRlZCwgZXRjLiBFdmVuIGlmIHdlIGRvbid0IGhhcHBlbiB0byBiZSB1c2luZyBpdCBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUsIGxldCdzIG5vdCBnZXQgcmlkXG4gIC8vIG9mIHRoaXMgYGRlbGV0ZWAsIGxlc3Qgd2UgbWlzcyBwdXR0aW5nIGl0IGJhY2sgaW4gdGhlIG5leHQgdGltZSB0aGUgcHJvcGVydHkgaXMgaW4gdXNlLilcbiAgZGVsZXRlIGV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YTtcblxuICBjb25zdCBldmVudEl0ZW0gPSBbeyB0eXBlOiBldmVudFR5cGUgfSwgZXZlbnRdO1xuICByZXR1cm4gY3JlYXRlRW52ZWxvcGUoZW52ZWxvcGVIZWFkZXJzLCBbZXZlbnRJdGVtXSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGVudmVsb3BlIGZyb20gU3BhbiBpdGVtLlxuICpcbiAqIFRha2VzIGFuIG9wdGlvbmFsIGNsaWVudCBhbmQgcnVucyBzcGFucyB0aHJvdWdoIGBiZWZvcmVTZW5kU3BhbmAgaWYgYXZhaWxhYmxlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVTcGFuRW52ZWxvcGUoc3BhbnMsIGNsaWVudCkge1xuICBmdW5jdGlvbiBkc2NIYXNSZXF1aXJlZFByb3BzKGRzYykge1xuICAgIHJldHVybiAhIWRzYy50cmFjZV9pZCAmJiAhIWRzYy5wdWJsaWNfa2V5O1xuICB9XG5cbiAgLy8gRm9yIHRoZSBtb21lbnQgd2UnbGwgb2J0YWluIHRoZSBEU0MgZnJvbSB0aGUgZmlyc3Qgc3BhbiBpbiB0aGUgYXJyYXlcbiAgLy8gVGhpcyBtaWdodCBuZWVkIHRvIGJlIGNoYW5nZWQgaWYgd2UgcGVybWl0IHNlbmRpbmcgbXVsdGlwbGUgc3BhbnMgZnJvbVxuICAvLyBkaWZmZXJlbnQgc2VnbWVudHMgaW4gb25lIGVudmVsb3BlXG4gIGNvbnN0IGRzYyA9IGdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbihzcGFuc1swXSk7XG5cbiAgY29uc3QgZHNuID0gY2xpZW50Py5nZXREc24oKTtcbiAgY29uc3QgdHVubmVsID0gY2xpZW50Py5nZXRPcHRpb25zKCkudHVubmVsO1xuXG4gIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIC4uLihkc2NIYXNSZXF1aXJlZFByb3BzKGRzYykgJiYgeyB0cmFjZTogZHNjIH0pLFxuICAgIC4uLighIXR1bm5lbCAmJiBkc24gJiYgeyBkc246IGRzblRvU3RyaW5nKGRzbikgfSksXG4gIH07XG5cbiAgY29uc3QgYmVmb3JlU2VuZFNwYW4gPSBjbGllbnQ/LmdldE9wdGlvbnMoKS5iZWZvcmVTZW5kU3BhbjtcbiAgY29uc3QgY29udmVydFRvU3BhbkpTT04gPSBiZWZvcmVTZW5kU3BhblxuICAgID8gKHNwYW4pID0+IHtcbiAgICAgICAgY29uc3Qgc3Bhbkpzb24gPSBzcGFuVG9KU09OKHNwYW4pO1xuICAgICAgICBjb25zdCBwcm9jZXNzZWRTcGFuID0gYmVmb3JlU2VuZFNwYW4oc3Bhbkpzb24pO1xuXG4gICAgICAgIGlmICghcHJvY2Vzc2VkU3Bhbikge1xuICAgICAgICAgIHNob3dTcGFuRHJvcFdhcm5pbmcoKTtcbiAgICAgICAgICByZXR1cm4gc3Bhbkpzb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkU3BhbjtcbiAgICAgIH1cbiAgICA6IHNwYW5Ub0pTT047XG5cbiAgY29uc3QgaXRlbXMgPSBbXTtcbiAgZm9yIChjb25zdCBzcGFuIG9mIHNwYW5zKSB7XG4gICAgY29uc3Qgc3Bhbkpzb24gPSBjb252ZXJ0VG9TcGFuSlNPTihzcGFuKTtcbiAgICBpZiAoc3Bhbkpzb24pIHtcbiAgICAgIGl0ZW1zLnB1c2goY3JlYXRlU3BhbkVudmVsb3BlSXRlbShzcGFuSnNvbikpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbnZlbG9wZShoZWFkZXJzLCBpdGVtcyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUV2ZW50RW52ZWxvcGUsIGNyZWF0ZVNlc3Npb25FbnZlbG9wZSwgY3JlYXRlU3BhbkVudmVsb3BlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnZlbG9wZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/envelope.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/eventProcessors.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/eventProcessors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   notifyEventProcessors: () => (/* binding */ notifyEventProcessors)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n\n\n\n\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nfunction notifyEventProcessors(\n  processors,\n  event,\n  hint,\n  index = 0,\n) {\n  return new _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.SyncPromise((resolve, reject) => {\n    const processor = processors[index];\n    if (event === null || typeof processor !== 'function') {\n      resolve(event);\n    } else {\n      const result = processor({ ...event }, hint) ;\n\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && processor.id && result === null && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n      if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_3__.isThenable)(result)) {\n        void result\n          .then(final => notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n          .then(null, reject);\n      } else {\n        void notifyEventProcessors(processors, result, hint, index + 1)\n          .then(resolve)\n          .then(null, reject);\n      }\n    }\n  });\n}\n\n\n//# sourceMappingURL=eventProcessors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9ldmVudFByb2Nlc3NvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0M7QUFDRTtBQUNBO0FBQ1U7O0FBRTNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsb0VBQVc7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLGlDQUFpQyxVQUFVOztBQUUzQyxNQUFNLHdEQUFXLHVDQUF1QywwREFBTSx5QkFBeUIsYUFBYTs7QUFFcEcsVUFBVSw4REFBVTtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vZXZlbnRQcm9jZXNzb3JzLmpzPzAwNDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IGlzVGhlbmFibGUgfSBmcm9tICcuL3V0aWxzLWhvaXN0L2lzLmpzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJztcbmltcG9ydCB7IFN5bmNQcm9taXNlIH0gZnJvbSAnLi91dGlscy1ob2lzdC9zeW5jcHJvbWlzZS5qcyc7XG5cbi8qKlxuICogUHJvY2VzcyBhbiBhcnJheSBvZiBldmVudCBwcm9jZXNzb3JzLCByZXR1cm5pbmcgdGhlIHByb2Nlc3NlZCBldmVudCAob3IgYG51bGxgIGlmIHRoZSBldmVudCB3YXMgZHJvcHBlZCkuXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeUV2ZW50UHJvY2Vzc29ycyhcbiAgcHJvY2Vzc29ycyxcbiAgZXZlbnQsXG4gIGhpbnQsXG4gIGluZGV4ID0gMCxcbikge1xuICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBwcm9jZXNzb3IgPSBwcm9jZXNzb3JzW2luZGV4XTtcbiAgICBpZiAoZXZlbnQgPT09IG51bGwgfHwgdHlwZW9mIHByb2Nlc3NvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVzb2x2ZShldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHByb2Nlc3Nvcih7IC4uLmV2ZW50IH0sIGhpbnQpIDtcblxuICAgICAgREVCVUdfQlVJTEQgJiYgcHJvY2Vzc29yLmlkICYmIHJlc3VsdCA9PT0gbnVsbCAmJiBsb2dnZXIubG9nKGBFdmVudCBwcm9jZXNzb3IgXCIke3Byb2Nlc3Nvci5pZH1cIiBkcm9wcGVkIGV2ZW50YCk7XG5cbiAgICAgIGlmIChpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgdm9pZCByZXN1bHRcbiAgICAgICAgICAudGhlbihmaW5hbCA9PiBub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgZmluYWwsIGhpbnQsIGluZGV4ICsgMSkudGhlbihyZXNvbHZlKSlcbiAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm9pZCBub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgcmVzdWx0LCBoaW50LCBpbmRleCArIDEpXG4gICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCB7IG5vdGlmeUV2ZW50UHJvY2Vzc29ycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRQcm9jZXNzb3JzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/eventProcessors.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/exports.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/exports.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEventProcessor: () => (/* binding */ addEventProcessor),\n/* harmony export */   captureCheckIn: () => (/* binding */ captureCheckIn),\n/* harmony export */   captureEvent: () => (/* binding */ captureEvent),\n/* harmony export */   captureException: () => (/* binding */ captureException),\n/* harmony export */   captureMessage: () => (/* binding */ captureMessage),\n/* harmony export */   captureSession: () => (/* binding */ captureSession),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   endSession: () => (/* binding */ endSession),\n/* harmony export */   flush: () => (/* binding */ flush),\n/* harmony export */   isEnabled: () => (/* binding */ isEnabled),\n/* harmony export */   isInitialized: () => (/* binding */ isInitialized),\n/* harmony export */   lastEventId: () => (/* binding */ lastEventId),\n/* harmony export */   setContext: () => (/* binding */ setContext),\n/* harmony export */   setExtra: () => (/* binding */ setExtra),\n/* harmony export */   setExtras: () => (/* binding */ setExtras),\n/* harmony export */   setTag: () => (/* binding */ setTag),\n/* harmony export */   setTags: () => (/* binding */ setTags),\n/* harmony export */   setUser: () => (/* binding */ setUser),\n/* harmony export */   startSession: () => (/* binding */ startSession),\n/* harmony export */   withMonitor: () => (/* binding */ withMonitor)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./session.js */ \"./node_modules/@sentry/core/build/esm/session.js\");\n/* harmony import */ var _utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/prepareEvent.js */ \"./node_modules/@sentry/core/build/esm/utils/prepareEvent.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils-hoist/misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils-hoist/time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nfunction captureException(exception, hint) {\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)().captureException(exception, (0,_utils_prepareEvent_js__WEBPACK_IMPORTED_MODULE_1__.parseEventHintOrCaptureContext)(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nfunction captureMessage(message, captureContext) {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nfunction captureEvent(event, hint) {\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)().captureEvent(event, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\nfunction setContext(name, context) {\n  (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nfunction setExtras(extras) {\n  (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nfunction setExtra(key, extra) {\n  (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nfunction setTags(tags) {\n  (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nfunction setTag(key, value) {\n  (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nfunction setUser(user) {\n  (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setUser(user);\n}\n\n/**\n * The last error event id of the isolation scope.\n *\n * Warning: This function really returns the last recorded error event id on the current\n * isolation scope. If you call this function after handling a certain error and another error\n * is captured in between, the last one is returned instead of the one you might expect.\n * Also, ids of events that were never sent to Sentry (for example because\n * they were dropped in `beforeSend`) could be returned.\n *\n * @returns The last event id of the isolation scope.\n */\nfunction lastEventId() {\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().lastEventId();\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nfunction captureCheckIn(checkIn, upsertMonitorConfig) {\n  const scope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  if (!client) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n\n  return (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_4__.uuid4)();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nfunction withMonitor(\n  monitorSlug,\n  callback,\n  upsertMonitorConfig,\n) {\n  const checkInId = captureCheckIn({ monitorSlug, status: 'in_progress' }, upsertMonitorConfig);\n  const now = (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_5__.timestampInSeconds)();\n\n  function finishCheckIn(status) {\n    captureCheckIn({ monitorSlug, status, checkInId, duration: (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_5__.timestampInSeconds)() - now });\n  }\n\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.withIsolationScope)(() => {\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback();\n    } catch (e) {\n      finishCheckIn('error');\n      throw e;\n    }\n\n    if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_6__.isThenable)(maybePromiseResult)) {\n      Promise.resolve(maybePromiseResult).then(\n        () => {\n          finishCheckIn('ok');\n        },\n        e => {\n          finishCheckIn('error');\n          throw e;\n        },\n      );\n    } else {\n      finishCheckIn('ok');\n    }\n\n    return maybePromiseResult;\n  });\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nasync function flush(timeout) {\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  if (client) {\n    return client.flush(timeout);\n  }\n  _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nasync function close(timeout) {\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  if (client) {\n    return client.close(timeout);\n  }\n  _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Returns true if Sentry has been properly initialized.\n */\nfunction isInitialized() {\n  return !!(0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n}\n\n/** If the SDK is initialized & enabled. */\nfunction isEnabled() {\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  return client?.getOptions().enabled !== false && !!client?.getTransport();\n}\n\n/**\n * Add an event processor.\n * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n * context will have the processor applied.\n */\nfunction addEventProcessor(callback) {\n  (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().addEventProcessor(callback);\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nfunction startSession(context) {\n  const isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n  const currentScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n\n  // Will fetch userAgent if called from browser sdk\n  const { userAgent } = _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_7__.GLOBAL_OBJ.navigator || {};\n\n  const session = (0,_session_js__WEBPACK_IMPORTED_MODULE_8__.makeSession)({\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && { userAgent }),\n    ...context,\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession?.status === 'ok') {\n    (0,_session_js__WEBPACK_IMPORTED_MODULE_8__.updateSession)(currentSession, { status: 'exited' });\n  }\n\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session);\n\n  return session;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nfunction endSession() {\n  const isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n  const currentScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session) {\n    (0,_session_js__WEBPACK_IMPORTED_MODULE_8__.closeSession)(session);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate() {\n  const isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  const session = isolationScope.getSession();\n  if (session && client) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nfunction captureSession(end = false) {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\n\n\n//# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9leHBvcnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVHO0FBQ3hEO0FBQ3lCO0FBQ0M7QUFDeEI7QUFDQTtBQUNIO0FBQ2E7QUFDSDs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsa0VBQWUsK0JBQStCLHNGQUE4QjtBQUNyRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELGlCQUFpQjtBQUMxRSxTQUFTLGtFQUFlO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtFQUFlO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsb0VBQWlCO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLG9FQUFpQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLG9FQUFpQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxvRUFBaUI7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxvRUFBaUI7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxvRUFBaUI7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxvRUFBaUI7QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixrRUFBZTtBQUMvQixpQkFBaUIsNERBQVM7QUFDMUI7QUFDQSxJQUFJLHdEQUFXLElBQUksMERBQU07QUFDekIsSUFBSTtBQUNKLElBQUksd0RBQVcsSUFBSSwwREFBTTtBQUN6QixJQUFJO0FBQ0o7QUFDQTs7QUFFQSxTQUFTLDJEQUFLO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLG9DQUFvQztBQUN6RSxjQUFjLHdFQUFrQjs7QUFFaEM7QUFDQSxxQkFBcUIsMENBQTBDLHdFQUFrQixVQUFVO0FBQzNGOztBQUVBLFNBQVMscUVBQWtCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUEsUUFBUSw4REFBVTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSwrREFBK0QsbUJBQW1CO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDREQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLEVBQUUsd0RBQVcsSUFBSSwwREFBTTtBQUN2QjtBQUNBOztBQUVBO0FBQ0EsK0RBQStELG1CQUFtQjtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw0REFBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxFQUFFLHdEQUFXLElBQUksMERBQU07QUFDdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNERBQVM7QUFDcEI7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQiw0REFBUztBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsb0VBQWlCO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsb0VBQWlCO0FBQzFDLHVCQUF1QixrRUFBZTs7QUFFdEM7QUFDQSxVQUFVLFlBQVksRUFBRSxpRUFBVTs7QUFFbEMsa0JBQWtCLHdEQUFXO0FBQzdCO0FBQ0EsdUJBQXVCLFdBQVc7QUFDbEM7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLElBQUksMERBQWEsbUJBQW1CLGtCQUFrQjtBQUN0RDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsb0VBQWlCO0FBQzFDLHVCQUF1QixrRUFBZTs7QUFFdEM7QUFDQTtBQUNBLElBQUkseURBQVk7QUFDaEI7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvRUFBaUI7QUFDMUMsaUJBQWlCLDREQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFb1E7QUFDcFEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vZXhwb3J0cy5qcz8yMzJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEN1cnJlbnRTY29wZSwgZ2V0Q2xpZW50LCB3aXRoSXNvbGF0aW9uU2NvcGUsIGdldElzb2xhdGlvblNjb3BlIH0gZnJvbSAnLi9jdXJyZW50U2NvcGVzLmpzJztcbmltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBtYWtlU2Vzc2lvbiwgdXBkYXRlU2Vzc2lvbiwgY2xvc2VTZXNzaW9uIH0gZnJvbSAnLi9zZXNzaW9uLmpzJztcbmltcG9ydCB7IHBhcnNlRXZlbnRIaW50T3JDYXB0dXJlQ29udGV4dCB9IGZyb20gJy4vdXRpbHMvcHJlcGFyZUV2ZW50LmpzJztcbmltcG9ydCB7IGlzVGhlbmFibGUgfSBmcm9tICcuL3V0aWxzLWhvaXN0L2lzLmpzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJztcbmltcG9ydCB7IHV1aWQ0IH0gZnJvbSAnLi91dGlscy1ob2lzdC9taXNjLmpzJztcbmltcG9ydCB7IHRpbWVzdGFtcEluU2Vjb25kcyB9IGZyb20gJy4vdXRpbHMtaG9pc3QvdGltZS5qcyc7XG5pbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi91dGlscy1ob2lzdC93b3JsZHdpZGUuanMnO1xuXG4vKipcbiAqIENhcHR1cmVzIGFuIGV4Y2VwdGlvbiBldmVudCBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBleGNlcHRpb24gVGhlIGV4Y2VwdGlvbiB0byBjYXB0dXJlLlxuICogQHBhcmFtIGhpbnQgT3B0aW9uYWwgYWRkaXRpb25hbCBkYXRhIHRvIGF0dGFjaCB0byB0aGUgU2VudHJ5IGV2ZW50LlxuICogQHJldHVybnMgdGhlIGlkIG9mIHRoZSBjYXB0dXJlZCBTZW50cnkgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGNhcHR1cmVFeGNlcHRpb24oZXhjZXB0aW9uLCBoaW50KSB7XG4gIHJldHVybiBnZXRDdXJyZW50U2NvcGUoKS5jYXB0dXJlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgcGFyc2VFdmVudEhpbnRPckNhcHR1cmVDb250ZXh0KGhpbnQpKTtcbn1cblxuLyoqXG4gKiBDYXB0dXJlcyBhIG1lc3NhZ2UgZXZlbnQgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzZW5kIHRvIFNlbnRyeS5cbiAqIEBwYXJhbSBjYXB0dXJlQ29udGV4dCBEZWZpbmUgdGhlIGxldmVsIG9mIHRoZSBtZXNzYWdlIG9yIHBhc3MgaW4gYWRkaXRpb25hbCBkYXRhIHRvIGF0dGFjaCB0byB0aGUgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHRoZSBpZCBvZiB0aGUgY2FwdHVyZWQgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZU1lc3NhZ2UobWVzc2FnZSwgY2FwdHVyZUNvbnRleHQpIHtcbiAgLy8gVGhpcyBpcyBuZWNlc3NhcnkgdG8gcHJvdmlkZSBleHBsaWNpdCBzY29wZXMgdXBncmFkZSwgd2l0aG91dCBjaGFuZ2luZyB0aGUgb3JpZ2luYWxcbiAgLy8gYXJpdHkgb2YgdGhlIGBjYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBsZXZlbClgIG1ldGhvZC5cbiAgY29uc3QgbGV2ZWwgPSB0eXBlb2YgY2FwdHVyZUNvbnRleHQgPT09ICdzdHJpbmcnID8gY2FwdHVyZUNvbnRleHQgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGNvbnRleHQgPSB0eXBlb2YgY2FwdHVyZUNvbnRleHQgIT09ICdzdHJpbmcnID8geyBjYXB0dXJlQ29udGV4dCB9IDogdW5kZWZpbmVkO1xuICByZXR1cm4gZ2V0Q3VycmVudFNjb3BlKCkuY2FwdHVyZU1lc3NhZ2UobWVzc2FnZSwgbGV2ZWwsIGNvbnRleHQpO1xufVxuXG4vKipcbiAqIENhcHR1cmVzIGEgbWFudWFsbHkgY3JlYXRlZCBldmVudCBhbmQgc2VuZHMgaXQgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gc2VuZCB0byBTZW50cnkuXG4gKiBAcGFyYW0gaGludCBPcHRpb25hbCBhZGRpdGlvbmFsIGRhdGEgdG8gYXR0YWNoIHRvIHRoZSBTZW50cnkgZXZlbnQuXG4gKiBAcmV0dXJucyB0aGUgaWQgb2YgdGhlIGNhcHR1cmVkIGV2ZW50LlxuICovXG5mdW5jdGlvbiBjYXB0dXJlRXZlbnQoZXZlbnQsIGhpbnQpIHtcbiAgcmV0dXJuIGdldEN1cnJlbnRTY29wZSgpLmNhcHR1cmVFdmVudChldmVudCwgaGludCk7XG59XG5cbi8qKlxuICogU2V0cyBjb250ZXh0IGRhdGEgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAqIEBwYXJhbSBuYW1lIG9mIHRoZSBjb250ZXh0XG4gKiBAcGFyYW0gY29udGV4dCBBbnkga2luZCBvZiBkYXRhLiBUaGlzIGRhdGEgd2lsbCBiZSBub3JtYWxpemVkLlxuICovXG5mdW5jdGlvbiBzZXRDb250ZXh0KG5hbWUsIGNvbnRleHQpIHtcbiAgZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRDb250ZXh0KG5hbWUsIGNvbnRleHQpO1xufVxuXG4vKipcbiAqIFNldCBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIG1lcmdlZCBzZW50IGFzIGV4dHJhIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gKiBAcGFyYW0gZXh0cmFzIEV4dHJhcyBvYmplY3QgdG8gbWVyZ2UgaW50byBjdXJyZW50IGNvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIHNldEV4dHJhcyhleHRyYXMpIHtcbiAgZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRFeHRyYXMoZXh0cmFzKTtcbn1cblxuLyoqXG4gKiBTZXQga2V5OnZhbHVlIHRoYXQgd2lsbCBiZSBzZW50IGFzIGV4dHJhIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ga2V5IFN0cmluZyBvZiBleHRyYVxuICogQHBhcmFtIGV4dHJhIEFueSBraW5kIG9mIGRhdGEuIFRoaXMgZGF0YSB3aWxsIGJlIG5vcm1hbGl6ZWQuXG4gKi9cbmZ1bmN0aW9uIHNldEV4dHJhKGtleSwgZXh0cmEpIHtcbiAgZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRFeHRyYShrZXksIGV4dHJhKTtcbn1cblxuLyoqXG4gKiBTZXQgYW4gb2JqZWN0IHRoYXQgd2lsbCBiZSBtZXJnZWQgc2VudCBhcyB0YWdzIGRhdGEgd2l0aCB0aGUgZXZlbnQuXG4gKiBAcGFyYW0gdGFncyBUYWdzIGNvbnRleHQgb2JqZWN0IHRvIG1lcmdlIGludG8gY3VycmVudCBjb250ZXh0LlxuICovXG5mdW5jdGlvbiBzZXRUYWdzKHRhZ3MpIHtcbiAgZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRUYWdzKHRhZ3MpO1xufVxuXG4vKipcbiAqIFNldCBrZXk6dmFsdWUgdGhhdCB3aWxsIGJlIHNlbnQgYXMgdGFncyBkYXRhIHdpdGggdGhlIGV2ZW50LlxuICpcbiAqIENhbiBhbHNvIGJlIHVzZWQgdG8gdW5zZXQgYSB0YWcsIGJ5IHBhc3NpbmcgYHVuZGVmaW5lZGAuXG4gKlxuICogQHBhcmFtIGtleSBTdHJpbmcga2V5IG9mIHRhZ1xuICogQHBhcmFtIHZhbHVlIFZhbHVlIG9mIHRhZ1xuICovXG5mdW5jdGlvbiBzZXRUYWcoa2V5LCB2YWx1ZSkge1xuICBnZXRJc29sYXRpb25TY29wZSgpLnNldFRhZyhrZXksIHZhbHVlKTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHVzZXIgY29udGV4dCBpbmZvcm1hdGlvbiBmb3IgZnV0dXJlIGV2ZW50cy5cbiAqXG4gKiBAcGFyYW0gdXNlciBVc2VyIGNvbnRleHQgb2JqZWN0IHRvIGJlIHNldCBpbiB0aGUgY3VycmVudCBjb250ZXh0LiBQYXNzIGBudWxsYCB0byB1bnNldCB0aGUgdXNlci5cbiAqL1xuZnVuY3Rpb24gc2V0VXNlcih1c2VyKSB7XG4gIGdldElzb2xhdGlvblNjb3BlKCkuc2V0VXNlcih1c2VyKTtcbn1cblxuLyoqXG4gKiBUaGUgbGFzdCBlcnJvciBldmVudCBpZCBvZiB0aGUgaXNvbGF0aW9uIHNjb3BlLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgZnVuY3Rpb24gcmVhbGx5IHJldHVybnMgdGhlIGxhc3QgcmVjb3JkZWQgZXJyb3IgZXZlbnQgaWQgb24gdGhlIGN1cnJlbnRcbiAqIGlzb2xhdGlvbiBzY29wZS4gSWYgeW91IGNhbGwgdGhpcyBmdW5jdGlvbiBhZnRlciBoYW5kbGluZyBhIGNlcnRhaW4gZXJyb3IgYW5kIGFub3RoZXIgZXJyb3JcbiAqIGlzIGNhcHR1cmVkIGluIGJldHdlZW4sIHRoZSBsYXN0IG9uZSBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIHRoZSBvbmUgeW91IG1pZ2h0IGV4cGVjdC5cbiAqIEFsc28sIGlkcyBvZiBldmVudHMgdGhhdCB3ZXJlIG5ldmVyIHNlbnQgdG8gU2VudHJ5IChmb3IgZXhhbXBsZSBiZWNhdXNlXG4gKiB0aGV5IHdlcmUgZHJvcHBlZCBpbiBgYmVmb3JlU2VuZGApIGNvdWxkIGJlIHJldHVybmVkLlxuICpcbiAqIEByZXR1cm5zIFRoZSBsYXN0IGV2ZW50IGlkIG9mIHRoZSBpc29sYXRpb24gc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGxhc3RFdmVudElkKCkge1xuICByZXR1cm4gZ2V0SXNvbGF0aW9uU2NvcGUoKS5sYXN0RXZlbnRJZCgpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNyb24gbW9uaXRvciBjaGVjayBpbiBhbmQgc2VuZCBpdCB0byBTZW50cnkuXG4gKlxuICogQHBhcmFtIGNoZWNrSW4gQW4gb2JqZWN0IHRoYXQgZGVzY3JpYmVzIGEgY2hlY2sgaW4uXG4gKiBAcGFyYW0gdXBzZXJ0TW9uaXRvckNvbmZpZyBBbiBvcHRpb25hbCBvYmplY3QgdGhhdCBkZXNjcmliZXMgYSBtb25pdG9yIGNvbmZpZy4gVXNlIHRoaXMgaWYgeW91IHdhbnRcbiAqIHRvIGNyZWF0ZSBhIG1vbml0b3IgYXV0b21hdGljYWxseSB3aGVuIHNlbmRpbmcgYSBjaGVjayBpbi5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZUNoZWNrSW4oY2hlY2tJbiwgdXBzZXJ0TW9uaXRvckNvbmZpZykge1xuICBjb25zdCBzY29wZSA9IGdldEN1cnJlbnRTY29wZSgpO1xuICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcbiAgaWYgKCFjbGllbnQpIHtcbiAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIud2FybignQ2Fubm90IGNhcHR1cmUgY2hlY2staW4uIE5vIGNsaWVudCBkZWZpbmVkLicpO1xuICB9IGVsc2UgaWYgKCFjbGllbnQuY2FwdHVyZUNoZWNrSW4pIHtcbiAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIud2FybignQ2Fubm90IGNhcHR1cmUgY2hlY2staW4uIENsaWVudCBkb2VzIG5vdCBzdXBwb3J0IHNlbmRpbmcgY2hlY2staW5zLicpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjbGllbnQuY2FwdHVyZUNoZWNrSW4oY2hlY2tJbiwgdXBzZXJ0TW9uaXRvckNvbmZpZywgc2NvcGUpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ0KCk7XG59XG5cbi8qKlxuICogV3JhcHMgYSBjYWxsYmFjayB3aXRoIGEgY3JvbiBtb25pdG9yIGNoZWNrIGluLiBUaGUgY2hlY2sgaW4gd2lsbCBiZSBzZW50IHRvIFNlbnRyeSB3aGVuIHRoZSBjYWxsYmFjayBmaW5pc2hlcy5cbiAqXG4gKiBAcGFyYW0gbW9uaXRvclNsdWcgVGhlIGRpc3RpbmN0IHNsdWcgb2YgdGhlIG1vbml0b3IuXG4gKiBAcGFyYW0gdXBzZXJ0TW9uaXRvckNvbmZpZyBBbiBvcHRpb25hbCBvYmplY3QgdGhhdCBkZXNjcmliZXMgYSBtb25pdG9yIGNvbmZpZy4gVXNlIHRoaXMgaWYgeW91IHdhbnRcbiAqIHRvIGNyZWF0ZSBhIG1vbml0b3IgYXV0b21hdGljYWxseSB3aGVuIHNlbmRpbmcgYSBjaGVjayBpbi5cbiAqL1xuZnVuY3Rpb24gd2l0aE1vbml0b3IoXG4gIG1vbml0b3JTbHVnLFxuICBjYWxsYmFjayxcbiAgdXBzZXJ0TW9uaXRvckNvbmZpZyxcbikge1xuICBjb25zdCBjaGVja0luSWQgPSBjYXB0dXJlQ2hlY2tJbih7IG1vbml0b3JTbHVnLCBzdGF0dXM6ICdpbl9wcm9ncmVzcycgfSwgdXBzZXJ0TW9uaXRvckNvbmZpZyk7XG4gIGNvbnN0IG5vdyA9IHRpbWVzdGFtcEluU2Vjb25kcygpO1xuXG4gIGZ1bmN0aW9uIGZpbmlzaENoZWNrSW4oc3RhdHVzKSB7XG4gICAgY2FwdHVyZUNoZWNrSW4oeyBtb25pdG9yU2x1Zywgc3RhdHVzLCBjaGVja0luSWQsIGR1cmF0aW9uOiB0aW1lc3RhbXBJblNlY29uZHMoKSAtIG5vdyB9KTtcbiAgfVxuXG4gIHJldHVybiB3aXRoSXNvbGF0aW9uU2NvcGUoKCkgPT4ge1xuICAgIGxldCBtYXliZVByb21pc2VSZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIG1heWJlUHJvbWlzZVJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZmluaXNoQ2hlY2tJbignZXJyb3InKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgaWYgKGlzVGhlbmFibGUobWF5YmVQcm9taXNlUmVzdWx0KSkge1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKG1heWJlUHJvbWlzZVJlc3VsdCkudGhlbihcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIGZpbmlzaENoZWNrSW4oJ29rJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGUgPT4ge1xuICAgICAgICAgIGZpbmlzaENoZWNrSW4oJ2Vycm9yJyk7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbmlzaENoZWNrSW4oJ29rJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heWJlUHJvbWlzZVJlc3VsdDtcbiAgfSk7XG59XG5cbi8qKlxuICogQ2FsbCBgZmx1c2goKWAgb24gdGhlIGN1cnJlbnQgY2xpZW50LCBpZiB0aGVyZSBpcyBvbmUuIFNlZSB7QGxpbmsgQ2xpZW50LmZsdXNofS5cbiAqXG4gKiBAcGFyYW0gdGltZW91dCBNYXhpbXVtIHRpbWUgaW4gbXMgdGhlIGNsaWVudCBzaG91bGQgd2FpdCB0byBmbHVzaCBpdHMgZXZlbnQgcXVldWUuIE9taXR0aW5nIHRoaXMgcGFyYW1ldGVyIHdpbGwgY2F1c2VcbiAqIHRoZSBjbGllbnQgdG8gd2FpdCB1bnRpbCBhbGwgZXZlbnRzIGFyZSBzZW50IGJlZm9yZSByZXNvbHZpbmcgdGhlIHByb21pc2UuXG4gKiBAcmV0dXJucyBBIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gYHRydWVgIGlmIHRoZSBxdWV1ZSBzdWNjZXNzZnVsbHkgZHJhaW5zIGJlZm9yZSB0aGUgdGltZW91dCwgb3IgYGZhbHNlYCBpZiBpdFxuICogZG9lc24ndCAob3IgaWYgdGhlcmUncyBubyBjbGllbnQgZGVmaW5lZCkuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZsdXNoKHRpbWVvdXQpIHtcbiAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gIGlmIChjbGllbnQpIHtcbiAgICByZXR1cm4gY2xpZW50LmZsdXNoKHRpbWVvdXQpO1xuICB9XG4gIERFQlVHX0JVSUxEICYmIGxvZ2dlci53YXJuKCdDYW5ub3QgZmx1c2ggZXZlbnRzLiBObyBjbGllbnQgZGVmaW5lZC4nKTtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG59XG5cbi8qKlxuICogQ2FsbCBgY2xvc2UoKWAgb24gdGhlIGN1cnJlbnQgY2xpZW50LCBpZiB0aGVyZSBpcyBvbmUuIFNlZSB7QGxpbmsgQ2xpZW50LmNsb3NlfS5cbiAqXG4gKiBAcGFyYW0gdGltZW91dCBNYXhpbXVtIHRpbWUgaW4gbXMgdGhlIGNsaWVudCBzaG91bGQgd2FpdCB0byBmbHVzaCBpdHMgZXZlbnQgcXVldWUgYmVmb3JlIHNodXR0aW5nIGRvd24uIE9taXR0aW5nIHRoaXNcbiAqIHBhcmFtZXRlciB3aWxsIGNhdXNlIHRoZSBjbGllbnQgdG8gd2FpdCB1bnRpbCBhbGwgZXZlbnRzIGFyZSBzZW50IGJlZm9yZSBkaXNhYmxpbmcgaXRzZWxmLlxuICogQHJldHVybnMgQSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIGB0cnVlYCBpZiB0aGUgcXVldWUgc3VjY2Vzc2Z1bGx5IGRyYWlucyBiZWZvcmUgdGhlIHRpbWVvdXQsIG9yIGBmYWxzZWAgaWYgaXRcbiAqIGRvZXNuJ3QgKG9yIGlmIHRoZXJlJ3Mgbm8gY2xpZW50IGRlZmluZWQpLlxuICovXG5hc3luYyBmdW5jdGlvbiBjbG9zZSh0aW1lb3V0KSB7XG4gIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICBpZiAoY2xpZW50KSB7XG4gICAgcmV0dXJuIGNsaWVudC5jbG9zZSh0aW1lb3V0KTtcbiAgfVxuICBERUJVR19CVUlMRCAmJiBsb2dnZXIud2FybignQ2Fubm90IGZsdXNoIGV2ZW50cyBhbmQgZGlzYWJsZSBTREsuIE5vIGNsaWVudCBkZWZpbmVkLicpO1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgU2VudHJ5IGhhcyBiZWVuIHByb3Blcmx5IGluaXRpYWxpemVkLlxuICovXG5mdW5jdGlvbiBpc0luaXRpYWxpemVkKCkge1xuICByZXR1cm4gISFnZXRDbGllbnQoKTtcbn1cblxuLyoqIElmIHRoZSBTREsgaXMgaW5pdGlhbGl6ZWQgJiBlbmFibGVkLiAqL1xuZnVuY3Rpb24gaXNFbmFibGVkKCkge1xuICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcbiAgcmV0dXJuIGNsaWVudD8uZ2V0T3B0aW9ucygpLmVuYWJsZWQgIT09IGZhbHNlICYmICEhY2xpZW50Py5nZXRUcmFuc3BvcnQoKTtcbn1cblxuLyoqXG4gKiBBZGQgYW4gZXZlbnQgcHJvY2Vzc29yLlxuICogVGhpcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBjdXJyZW50IGlzb2xhdGlvbiBzY29wZSwgZW5zdXJpbmcgYW55IGV2ZW50IHRoYXQgaXMgcHJvY2Vzc2VkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvblxuICogY29udGV4dCB3aWxsIGhhdmUgdGhlIHByb2Nlc3NvciBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBhZGRFdmVudFByb2Nlc3NvcihjYWxsYmFjaykge1xuICBnZXRJc29sYXRpb25TY29wZSgpLmFkZEV2ZW50UHJvY2Vzc29yKGNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBTdGFydCBhIHNlc3Npb24gb24gdGhlIGN1cnJlbnQgaXNvbGF0aW9uIHNjb3BlLlxuICpcbiAqIEBwYXJhbSBjb250ZXh0IChvcHRpb25hbCkgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJldHVybmVkIHNlc3Npb24gb2JqZWN0XG4gKlxuICogQHJldHVybnMgdGhlIG5ldyBhY3RpdmUgc2Vzc2lvblxuICovXG5mdW5jdGlvbiBzdGFydFNlc3Npb24oY29udGV4dCkge1xuICBjb25zdCBpc29sYXRpb25TY29wZSA9IGdldElzb2xhdGlvblNjb3BlKCk7XG4gIGNvbnN0IGN1cnJlbnRTY29wZSA9IGdldEN1cnJlbnRTY29wZSgpO1xuXG4gIC8vIFdpbGwgZmV0Y2ggdXNlckFnZW50IGlmIGNhbGxlZCBmcm9tIGJyb3dzZXIgc2RrXG4gIGNvbnN0IHsgdXNlckFnZW50IH0gPSBHTE9CQUxfT0JKLm5hdmlnYXRvciB8fCB7fTtcblxuICBjb25zdCBzZXNzaW9uID0gbWFrZVNlc3Npb24oe1xuICAgIHVzZXI6IGN1cnJlbnRTY29wZS5nZXRVc2VyKCkgfHwgaXNvbGF0aW9uU2NvcGUuZ2V0VXNlcigpLFxuICAgIC4uLih1c2VyQWdlbnQgJiYgeyB1c2VyQWdlbnQgfSksXG4gICAgLi4uY29udGV4dCxcbiAgfSk7XG5cbiAgLy8gRW5kIGV4aXN0aW5nIHNlc3Npb24gaWYgdGhlcmUncyBvbmVcbiAgY29uc3QgY3VycmVudFNlc3Npb24gPSBpc29sYXRpb25TY29wZS5nZXRTZXNzaW9uKCk7XG4gIGlmIChjdXJyZW50U2Vzc2lvbj8uc3RhdHVzID09PSAnb2snKSB7XG4gICAgdXBkYXRlU2Vzc2lvbihjdXJyZW50U2Vzc2lvbiwgeyBzdGF0dXM6ICdleGl0ZWQnIH0pO1xuICB9XG5cbiAgZW5kU2Vzc2lvbigpO1xuXG4gIC8vIEFmdGVyd2FyZHMgd2Ugc2V0IHRoZSBuZXcgc2Vzc2lvbiBvbiB0aGUgc2NvcGVcbiAgaXNvbGF0aW9uU2NvcGUuc2V0U2Vzc2lvbihzZXNzaW9uKTtcblxuICByZXR1cm4gc2Vzc2lvbjtcbn1cblxuLyoqXG4gKiBFbmQgdGhlIHNlc3Npb24gb24gdGhlIGN1cnJlbnQgaXNvbGF0aW9uIHNjb3BlLlxuICovXG5mdW5jdGlvbiBlbmRTZXNzaW9uKCkge1xuICBjb25zdCBpc29sYXRpb25TY29wZSA9IGdldElzb2xhdGlvblNjb3BlKCk7XG4gIGNvbnN0IGN1cnJlbnRTY29wZSA9IGdldEN1cnJlbnRTY29wZSgpO1xuXG4gIGNvbnN0IHNlc3Npb24gPSBjdXJyZW50U2NvcGUuZ2V0U2Vzc2lvbigpIHx8IGlzb2xhdGlvblNjb3BlLmdldFNlc3Npb24oKTtcbiAgaWYgKHNlc3Npb24pIHtcbiAgICBjbG9zZVNlc3Npb24oc2Vzc2lvbik7XG4gIH1cbiAgX3NlbmRTZXNzaW9uVXBkYXRlKCk7XG5cbiAgLy8gdGhlIHNlc3Npb24gaXMgb3ZlcjsgdGFrZSBpdCBvZmYgb2YgdGhlIHNjb3BlXG4gIGlzb2xhdGlvblNjb3BlLnNldFNlc3Npb24oKTtcbn1cblxuLyoqXG4gKiBTZW5kcyB0aGUgY3VycmVudCBTZXNzaW9uIG9uIHRoZSBzY29wZVxuICovXG5mdW5jdGlvbiBfc2VuZFNlc3Npb25VcGRhdGUoKSB7XG4gIGNvbnN0IGlzb2xhdGlvblNjb3BlID0gZ2V0SXNvbGF0aW9uU2NvcGUoKTtcbiAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gIGNvbnN0IHNlc3Npb24gPSBpc29sYXRpb25TY29wZS5nZXRTZXNzaW9uKCk7XG4gIGlmIChzZXNzaW9uICYmIGNsaWVudCkge1xuICAgIGNsaWVudC5jYXB0dXJlU2Vzc2lvbihzZXNzaW9uKTtcbiAgfVxufVxuXG4vKipcbiAqIFNlbmRzIHRoZSBjdXJyZW50IHNlc3Npb24gb24gdGhlIHNjb3BlIHRvIFNlbnRyeVxuICpcbiAqIEBwYXJhbSBlbmQgSWYgc2V0IHRoZSBzZXNzaW9uIHdpbGwgYmUgbWFya2VkIGFzIGV4aXRlZCBhbmQgcmVtb3ZlZCBmcm9tIHRoZSBzY29wZS5cbiAqICAgICAgICAgICAgRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZVNlc3Npb24oZW5kID0gZmFsc2UpIHtcbiAgLy8gYm90aCBzZW5kIHRoZSB1cGRhdGUgYW5kIHB1bGwgdGhlIHNlc3Npb24gZnJvbSB0aGUgc2NvcGVcbiAgaWYgKGVuZCkge1xuICAgIGVuZFNlc3Npb24oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBvbmx5IHNlbmQgdGhlIHVwZGF0ZVxuICBfc2VuZFNlc3Npb25VcGRhdGUoKTtcbn1cblxuZXhwb3J0IHsgYWRkRXZlbnRQcm9jZXNzb3IsIGNhcHR1cmVDaGVja0luLCBjYXB0dXJlRXZlbnQsIGNhcHR1cmVFeGNlcHRpb24sIGNhcHR1cmVNZXNzYWdlLCBjYXB0dXJlU2Vzc2lvbiwgY2xvc2UsIGVuZFNlc3Npb24sIGZsdXNoLCBpc0VuYWJsZWQsIGlzSW5pdGlhbGl6ZWQsIGxhc3RFdmVudElkLCBzZXRDb250ZXh0LCBzZXRFeHRyYSwgc2V0RXh0cmFzLCBzZXRUYWcsIHNldFRhZ3MsIHNldFVzZXIsIHN0YXJ0U2Vzc2lvbiwgd2l0aE1vbml0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cG9ydHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/exports.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/feedback.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/feedback.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureFeedback: () => (/* binding */ captureFeedback)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n\n\n/**\n * Send user feedback to Sentry.\n */\nfunction captureFeedback(\n  params,\n  hint = {},\n  scope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)(),\n) {\n  const { message, name, email, url, source, associatedEventId, tags } = params;\n\n  const feedbackEvent = {\n    contexts: {\n      feedback: {\n        contact_email: email,\n        name,\n        message,\n        url,\n        source,\n        associated_event_id: associatedEventId,\n      },\n    },\n    type: 'feedback',\n    level: 'info',\n    tags,\n  };\n\n  const client = scope?.getClient() || (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n\n  if (client) {\n    client.emit('beforeSendFeedback', feedbackEvent, hint);\n  }\n\n  const eventId = scope.captureEvent(feedbackEvent, hint);\n\n  return eventId;\n}\n\n\n//# sourceMappingURL=feedback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9mZWVkYmFjay5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRTs7QUFFaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVLGtFQUFlO0FBQ3pCO0FBQ0EsVUFBVSw2REFBNkQ7O0FBRXZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUNBQXVDLDREQUFTOztBQUVoRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vZmVlZGJhY2suanM/YmM1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDdXJyZW50U2NvcGUsIGdldENsaWVudCB9IGZyb20gJy4vY3VycmVudFNjb3Blcy5qcyc7XG5cbi8qKlxuICogU2VuZCB1c2VyIGZlZWRiYWNrIHRvIFNlbnRyeS5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZUZlZWRiYWNrKFxuICBwYXJhbXMsXG4gIGhpbnQgPSB7fSxcbiAgc2NvcGUgPSBnZXRDdXJyZW50U2NvcGUoKSxcbikge1xuICBjb25zdCB7IG1lc3NhZ2UsIG5hbWUsIGVtYWlsLCB1cmwsIHNvdXJjZSwgYXNzb2NpYXRlZEV2ZW50SWQsIHRhZ3MgfSA9IHBhcmFtcztcblxuICBjb25zdCBmZWVkYmFja0V2ZW50ID0ge1xuICAgIGNvbnRleHRzOiB7XG4gICAgICBmZWVkYmFjazoge1xuICAgICAgICBjb250YWN0X2VtYWlsOiBlbWFpbCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgdXJsLFxuICAgICAgICBzb3VyY2UsXG4gICAgICAgIGFzc29jaWF0ZWRfZXZlbnRfaWQ6IGFzc29jaWF0ZWRFdmVudElkLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHR5cGU6ICdmZWVkYmFjaycsXG4gICAgbGV2ZWw6ICdpbmZvJyxcbiAgICB0YWdzLFxuICB9O1xuXG4gIGNvbnN0IGNsaWVudCA9IHNjb3BlPy5nZXRDbGllbnQoKSB8fCBnZXRDbGllbnQoKTtcblxuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50LmVtaXQoJ2JlZm9yZVNlbmRGZWVkYmFjaycsIGZlZWRiYWNrRXZlbnQsIGhpbnQpO1xuICB9XG5cbiAgY29uc3QgZXZlbnRJZCA9IHNjb3BlLmNhcHR1cmVFdmVudChmZWVkYmFja0V2ZW50LCBoaW50KTtcblxuICByZXR1cm4gZXZlbnRJZDtcbn1cblxuZXhwb3J0IHsgY2FwdHVyZUZlZWRiYWNrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZWVkYmFjay5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/feedback.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/fetch.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/fetch.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _addTracingHeadersToFetchRequest: () => (/* binding */ _addTracingHeadersToFetchRequest),\n/* harmony export */   instrumentFetchRequest: () => (/* binding */ instrumentFetchRequest)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hasSpansEnabled_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/hasSpansEnabled.js */ \"./node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils-hoist/baggage.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js\");\n/* harmony import */ var _tracing_sentryNonRecordingSpan_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tracing/sentryNonRecordingSpan.js */ \"./node_modules/@sentry/core/build/esm/tracing/sentryNonRecordingSpan.js\");\n/* harmony import */ var _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tracing/spanstatus.js */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _tracing_trace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracing/trace.js */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n/* harmony import */ var _utils_traceData_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/traceData.js */ \"./node_modules/@sentry/core/build/esm/utils/traceData.js\");\n/* harmony import */ var _utils_hoist_url_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils-hoist/url.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/url.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction instrumentFetchRequest(\n  handlerData,\n  shouldCreateSpan,\n  shouldAttachHeaders,\n  spans,\n  spanOrigin = 'auto.http.browser',\n) {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n\n  const { method, url } = handlerData.fetchData;\n\n  const shouldCreateSpanResult = (0,_utils_hasSpansEnabled_js__WEBPACK_IMPORTED_MODULE_0__.hasSpansEnabled)() && shouldCreateSpan(url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hasParent = !!(0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.getActiveSpan)();\n\n  const span =\n    shouldCreateSpanResult && hasParent\n      ? (0,_tracing_trace_js__WEBPACK_IMPORTED_MODULE_2__.startInactiveSpan)(getSpanStartOptions(url, method, spanOrigin))\n      : new _tracing_sentryNonRecordingSpan_js__WEBPACK_IMPORTED_MODULE_3__.SentryNonRecordingSpan();\n\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n\n  if (shouldAttachHeaders(handlerData.fetchData.url)) {\n    const request = handlerData.args[0];\n\n    const options = handlerData.args[1] || {};\n\n    const headers = _addTracingHeadersToFetchRequest(\n      request,\n      options,\n      // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n      // we do not want to use the span as base for the trace headers,\n      // which means that the headers will be generated from the scope and the sampling decision is deferred\n      (0,_utils_hasSpansEnabled_js__WEBPACK_IMPORTED_MODULE_0__.hasSpansEnabled)() && hasParent ? span : undefined,\n    );\n    if (headers) {\n      // Ensure this is actually set, if no options have been passed previously\n      handlerData.args[1] = options;\n      options.headers = headers;\n    }\n  }\n\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_4__.getClient)();\n\n  if (client) {\n    const fetchHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp: handlerData.startTimestamp,\n      endTimestamp: handlerData.endTimestamp,\n    } ;\n\n    client.emit('beforeOutgoingRequestSpan', span, fetchHint);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n * exported only for testing purposes\n *\n * When we determine if we should add a baggage header, there are 3 cases:\n * 1. No previous baggage header -> add baggage\n * 2. Previous baggage header has no sentry baggage values -> add our baggage\n * 3. Previous baggage header has sentry baggage values -> do nothing (might have been added manually by users)\n */\n// eslint-disable-next-line complexity -- yup it's this complicated :(\nfunction _addTracingHeadersToFetchRequest(\n  request,\n  fetchOptionsObj\n\n,\n  span,\n) {\n  const traceHeaders = (0,_utils_traceData_js__WEBPACK_IMPORTED_MODULE_5__.getTraceData)({ span });\n  const sentryTrace = traceHeaders['sentry-trace'];\n  const baggage = traceHeaders.baggage;\n\n  // Nothing to do, when we return undefined here, the original headers will be used\n  if (!sentryTrace) {\n    return undefined;\n  }\n\n  const originalHeaders = fetchOptionsObj.headers || ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_6__.isRequest)(request) ? request.headers : undefined);\n\n  if (!originalHeaders) {\n    return { ...traceHeaders };\n  } else if (isHeaders(originalHeaders)) {\n    const newHeaders = new Headers(originalHeaders);\n\n    // We don't want to override manually added sentry headers\n    if (!newHeaders.get('sentry-trace')) {\n      newHeaders.set('sentry-trace', sentryTrace);\n    }\n\n    if (baggage) {\n      const prevBaggageHeader = newHeaders.get('baggage');\n\n      if (!prevBaggageHeader) {\n        newHeaders.set('baggage', baggage);\n      } else if (!baggageHeaderHasSentryBaggageValues(prevBaggageHeader)) {\n        newHeaders.set('baggage', `${prevBaggageHeader},${baggage}`);\n      }\n    }\n\n    return newHeaders;\n  } else if (Array.isArray(originalHeaders)) {\n    const newHeaders = [...originalHeaders];\n\n    if (!originalHeaders.find(header => header[0] === 'sentry-trace')) {\n      newHeaders.push(['sentry-trace', sentryTrace]);\n    }\n\n    const prevBaggageHeaderWithSentryValues = originalHeaders.find(\n      header => header[0] === 'baggage' && baggageHeaderHasSentryBaggageValues(header[1]),\n    );\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push(['baggage', baggage]);\n    }\n\n    return newHeaders ;\n  } else {\n    const existingSentryTraceHeader = 'sentry-trace' in originalHeaders ? originalHeaders['sentry-trace'] : undefined;\n\n    const existingBaggageHeader = 'baggage' in originalHeaders ? originalHeaders.baggage : undefined;\n    const newBaggageHeaders = existingBaggageHeader\n      ? Array.isArray(existingBaggageHeader)\n        ? [...existingBaggageHeader]\n        : [existingBaggageHeader]\n      : [];\n\n    const prevBaggageHeaderWithSentryValues =\n      existingBaggageHeader &&\n      (Array.isArray(existingBaggageHeader)\n        ? existingBaggageHeader.find(headerItem => baggageHeaderHasSentryBaggageValues(headerItem))\n        : baggageHeaderHasSentryBaggageValues(existingBaggageHeader));\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      newBaggageHeaders.push(baggage);\n    }\n\n    return {\n      ...(originalHeaders ),\n      'sentry-trace': (existingSentryTraceHeader ) ?? sentryTrace,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\nfunction endSpan(span, handlerData) {\n  if (handlerData.response) {\n    (0,_tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_7__.setHttpStatus)(span, handlerData.response.status);\n\n    const contentLength = handlerData.response?.headers && handlerData.response.headers.get('content-length');\n\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({ code: _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_7__.SPAN_STATUS_ERROR, message: 'internal_error' });\n  }\n  span.end();\n}\n\nfunction baggageHeaderHasSentryBaggageValues(baggageHeader) {\n  return baggageHeader.split(',').some(baggageEntry => baggageEntry.trim().startsWith(_utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_8__.SENTRY_BAGGAGE_KEY_PREFIX));\n}\n\nfunction isHeaders(headers) {\n  return typeof Headers !== 'undefined' && (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_6__.isInstanceOf)(headers, Headers);\n}\n\nfunction getSpanStartOptions(\n  url,\n  method,\n  spanOrigin,\n) {\n  const parsedUrl = (0,_utils_hoist_url_js__WEBPACK_IMPORTED_MODULE_9__.parseStringToURLObject)(url);\n  return {\n    name: parsedUrl ? `${method} ${(0,_utils_hoist_url_js__WEBPACK_IMPORTED_MODULE_9__.getSanitizedUrlStringFromUrlObject)(parsedUrl)}` : method,\n    attributes: getFetchSpanAttributes(url, parsedUrl, method, spanOrigin),\n  };\n}\n\nfunction getFetchSpanAttributes(\n  url,\n  parsedUrl,\n  method,\n  spanOrigin,\n) {\n  const attributes = {\n    url,\n    type: 'fetch',\n    'http.method': method,\n    [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_10__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_10__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',\n  };\n  if (parsedUrl) {\n    if (!(0,_utils_hoist_url_js__WEBPACK_IMPORTED_MODULE_9__.isURLObjectRelative)(parsedUrl)) {\n      attributes['http.url'] = parsedUrl.href;\n      attributes['server.address'] = parsedUrl.host;\n    }\n    if (parsedUrl.search) {\n      attributes['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      attributes['http.fragment'] = parsedUrl.hash;\n    }\n  }\n  return attributes;\n}\n\n\n//# sourceMappingURL=fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/fetch.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integration.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integration.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addIntegration: () => (/* binding */ addIntegration),\n/* harmony export */   afterSetupIntegrations: () => (/* binding */ afterSetupIntegrations),\n/* harmony export */   defineIntegration: () => (/* binding */ defineIntegration),\n/* harmony export */   getIntegrationsToSetup: () => (/* binding */ getIntegrationsToSetup),\n/* harmony export */   installedIntegrations: () => (/* binding */ installedIntegrations),\n/* harmony export */   setupIntegration: () => (/* binding */ setupIntegration),\n/* harmony export */   setupIntegrations: () => (/* binding */ setupIntegrations)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\n\nconst installedIntegrations = [];\n\n/** Map of integrations assigned to a client */\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preserve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations) {\n  const integrationsByName = {};\n\n  integrations.forEach((currentInstance) => {\n    const { name } = currentInstance;\n\n    const existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.values(integrationsByName);\n}\n\n/** Gets integrations to install */\nfunction getIntegrationsToSetup(options) {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach((integration) => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations;\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    const resolvedUserIntegrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [resolvedUserIntegrations];\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  return filterDuplicates(integrations);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nfunction setupIntegrations(client, integrations) {\n  const integrationIndex = {};\n\n  integrations.forEach((integration) => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nfunction afterSetupIntegrations(client, integrations) {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration?.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nfunction setupIntegration(client, integration, integrationIndex) {\n  if (integrationIndex[integration.name]) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {\n    integration.setupOnce();\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n\n  if (typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration) ;\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n\n  if (typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration) ;\n\n    const processor = Object.assign((event, hint) => callback(event, hint, client), {\n      id: integration.name,\n    });\n\n    client.addEventProcessor(processor);\n  }\n\n  _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current scope's client. */\nfunction addIntegration(integration) {\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_2__.getClient)();\n\n  if (!client) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n\n  client.addIntegration(integration);\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nfunction defineIntegration(fn) {\n  return fn;\n}\n\n\n//# sourceMappingURL=integration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integration.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/captureconsole.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/captureconsole.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureConsoleIntegration: () => (/* binding */ captureConsoleIntegration)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _exports_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../exports.js */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_instrument_console_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/instrument/console.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils-hoist/misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_severity_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils-hoist/severity.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/severity.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils-hoist/string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\n\n\n\n\n\n\nconst INTEGRATION_NAME = 'CaptureConsole';\n\nconst _captureConsoleIntegration = ((options = {}) => {\n  const levels = options.levels || _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_0__.CONSOLE_LEVELS;\n  const handled = options.handled ?? true;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!(\"console\" in _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ)) {\n        return;\n      }\n\n      (0,_utils_hoist_instrument_console_js__WEBPACK_IMPORTED_MODULE_2__.addConsoleInstrumentationHandler)(({ args, level }) => {\n        if ((0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_3__.getClient)() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        consoleHandler(args, level, handled);\n      });\n    },\n  };\n}) ;\n\n/**\n * Send Console API calls as Sentry Events.\n */\nconst captureConsoleIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_4__.defineIntegration)(_captureConsoleIntegration);\n\nfunction consoleHandler(args, level, handled) {\n  const captureContext = {\n    level: (0,_utils_hoist_severity_js__WEBPACK_IMPORTED_MODULE_5__.severityLevelFromString)(level),\n    extra: {\n      arguments: args,\n    },\n  };\n\n  (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_3__.withScope)(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n\n      (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_6__.addExceptionMechanism)(event, {\n        handled,\n        type: 'console',\n      });\n\n      return event;\n    });\n\n    if (level === 'assert') {\n      if (!args[0]) {\n        const message = `Assertion failed: ${(0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_7__.safeJoin)(args.slice(1), ' ') || 'console.assert'}`;\n        scope.setExtra('arguments', args.slice(1));\n        (0,_exports_js__WEBPACK_IMPORTED_MODULE_8__.captureMessage)(message, captureContext);\n      }\n      return;\n    }\n\n    const error = args.find(arg => arg instanceof Error);\n    if (error) {\n      (0,_exports_js__WEBPACK_IMPORTED_MODULE_8__.captureException)(error, captureContext);\n      return;\n    }\n\n    const message = (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_7__.safeJoin)(args, ' ');\n    (0,_exports_js__WEBPACK_IMPORTED_MODULE_8__.captureMessage)(message, captureContext);\n  });\n}\n\n\n//# sourceMappingURL=captureconsole.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvY2FwdHVyZWNvbnNvbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUEyRDtBQUNNO0FBQ1g7QUFDa0M7QUFDOUI7QUFDSztBQUNNO0FBQ2pCO0FBQ0s7O0FBRXpEOztBQUVBLGlEQUFpRDtBQUNqRCxtQ0FBbUMsa0VBQWM7QUFDakQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSw4RUFBdUI7QUFDbkM7QUFDQTs7QUFFQSxNQUFNLG9HQUFnQyxJQUFJLGFBQWE7QUFDdkQsWUFBWSw0REFBUztBQUNyQjtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtFQUFpQjs7QUFFbkQ7QUFDQTtBQUNBLFdBQVcsaUZBQXVCO0FBQ2xDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsRUFBRSw0REFBUztBQUNYO0FBQ0E7O0FBRUEsTUFBTSwyRUFBcUI7QUFDM0I7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSw2Q0FBNkMsZ0VBQVEseUNBQXlDO0FBQzlGO0FBQ0EsUUFBUSwyREFBYztBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU0sNkRBQWdCO0FBQ3RCO0FBQ0E7O0FBRUEsb0JBQW9CLGdFQUFRO0FBQzVCLElBQUksMkRBQWM7QUFDbEIsR0FBRztBQUNIOztBQUVxQztBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvY2FwdHVyZWNvbnNvbGUuanM/NWM3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDbGllbnQsIHdpdGhTY29wZSB9IGZyb20gJy4uL2N1cnJlbnRTY29wZXMuanMnO1xuaW1wb3J0IHsgY2FwdHVyZU1lc3NhZ2UsIGNhcHR1cmVFeGNlcHRpb24gfSBmcm9tICcuLi9leHBvcnRzLmpzJztcbmltcG9ydCB7IGRlZmluZUludGVncmF0aW9uIH0gZnJvbSAnLi4vaW50ZWdyYXRpb24uanMnO1xuaW1wb3J0IHsgYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIgfSBmcm9tICcuLi91dGlscy1ob2lzdC9pbnN0cnVtZW50L2NvbnNvbGUuanMnO1xuaW1wb3J0IHsgQ09OU09MRV9MRVZFTFMgfSBmcm9tICcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuaW1wb3J0IHsgYWRkRXhjZXB0aW9uTWVjaGFuaXNtIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvbWlzYy5qcyc7XG5pbXBvcnQgeyBzZXZlcml0eUxldmVsRnJvbVN0cmluZyB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L3NldmVyaXR5LmpzJztcbmltcG9ydCB7IHNhZmVKb2luIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3Qvc3RyaW5nLmpzJztcbmltcG9ydCB7IEdMT0JBTF9PQkogfSBmcm9tICcuLi91dGlscy1ob2lzdC93b3JsZHdpZGUuanMnO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0NhcHR1cmVDb25zb2xlJztcblxuY29uc3QgX2NhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBsZXZlbHMgPSBvcHRpb25zLmxldmVscyB8fCBDT05TT0xFX0xFVkVMUztcbiAgY29uc3QgaGFuZGxlZCA9IG9wdGlvbnMuaGFuZGxlZCA/PyB0cnVlO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGlmICghKCdjb25zb2xlJyBpbiBHTE9CQUxfT0JKKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyKCh7IGFyZ3MsIGxldmVsIH0pID0+IHtcbiAgICAgICAgaWYgKGdldENsaWVudCgpICE9PSBjbGllbnQgfHwgIWxldmVscy5pbmNsdWRlcyhsZXZlbCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlSGFuZGxlcihhcmdzLCBsZXZlbCwgaGFuZGxlZCk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIFNlbmQgQ29uc29sZSBBUEkgY2FsbHMgYXMgU2VudHJ5IEV2ZW50cy5cbiAqL1xuY29uc3QgY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbiA9IGRlZmluZUludGVncmF0aW9uKF9jYXB0dXJlQ29uc29sZUludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gY29uc29sZUhhbmRsZXIoYXJncywgbGV2ZWwsIGhhbmRsZWQpIHtcbiAgY29uc3QgY2FwdHVyZUNvbnRleHQgPSB7XG4gICAgbGV2ZWw6IHNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nKGxldmVsKSxcbiAgICBleHRyYToge1xuICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgIH0sXG4gIH07XG5cbiAgd2l0aFNjb3BlKHNjb3BlID0+IHtcbiAgICBzY29wZS5hZGRFdmVudFByb2Nlc3NvcihldmVudCA9PiB7XG4gICAgICBldmVudC5sb2dnZXIgPSAnY29uc29sZSc7XG5cbiAgICAgIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICBoYW5kbGVkLFxuICAgICAgICB0eXBlOiAnY29uc29sZScsXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0pO1xuXG4gICAgaWYgKGxldmVsID09PSAnYXNzZXJ0Jykge1xuICAgICAgaWYgKCFhcmdzWzBdKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgQXNzZXJ0aW9uIGZhaWxlZDogJHtzYWZlSm9pbihhcmdzLnNsaWNlKDEpLCAnICcpIHx8ICdjb25zb2xlLmFzc2VydCd9YDtcbiAgICAgICAgc2NvcGUuc2V0RXh0cmEoJ2FyZ3VtZW50cycsIGFyZ3Muc2xpY2UoMSkpO1xuICAgICAgICBjYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBjYXB0dXJlQ29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3IgPSBhcmdzLmZpbmQoYXJnID0+IGFyZyBpbnN0YW5jZW9mIEVycm9yKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIGNhcHR1cmVDb250ZXh0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtZXNzYWdlID0gc2FmZUpvaW4oYXJncywgJyAnKTtcbiAgICBjYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBjYXB0dXJlQ29udGV4dCk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyBjYXB0dXJlQ29uc29sZUludGVncmF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXB0dXJlY29uc29sZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/captureconsole.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/console.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/console.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addConsoleBreadcrumb: () => (/* binding */ addConsoleBreadcrumb),\n/* harmony export */   consoleIntegration: () => (/* binding */ consoleIntegration)\n/* harmony export */ });\n/* harmony import */ var _breadcrumbs_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../breadcrumbs.js */ \"./node_modules/@sentry/core/build/esm/breadcrumbs.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_instrument_console_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/instrument/console.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_severity_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils-hoist/severity.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/severity.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils-hoist/string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\n\n\n\n\n\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Captures calls to the `console` API as breadcrumbs in Sentry.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```js\n * Sentry.init({\n *   integrations: [Sentry.consoleIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nconst consoleIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)((options = {}) => {\n  const levels = new Set(options.levels || _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.CONSOLE_LEVELS);\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      (0,_utils_hoist_instrument_console_js__WEBPACK_IMPORTED_MODULE_2__.addConsoleInstrumentationHandler)(({ args, level }) => {\n        if ((0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_3__.getClient)() !== client || !levels.has(level)) {\n          return;\n        }\n\n        addConsoleBreadcrumb(level, args);\n      });\n    },\n  };\n});\n\n/**\n * Capture a console breadcrumb.\n *\n * Exported just for tests.\n */\nfunction addConsoleBreadcrumb(level, args) {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: args,\n      logger: 'console',\n    },\n    level: (0,_utils_hoist_severity_js__WEBPACK_IMPORTED_MODULE_4__.severityLevelFromString)(level),\n    message: formatConsoleArgs(args),\n  };\n\n  if (level === 'assert') {\n    if (args[0] === false) {\n      const assertionArgs = args.slice(1);\n      breadcrumb.message =\n        assertionArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(assertionArgs)}` : 'Assertion failed';\n      breadcrumb.data.arguments = assertionArgs;\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  (0,_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_5__.addBreadcrumb)(breadcrumb, {\n    input: args,\n    level,\n  });\n}\n\nfunction formatConsoleArgs(values) {\n  return \"util\" in _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_6__.GLOBAL_OBJ && typeof (_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_6__.GLOBAL_OBJ ).util.format === 'function'\n    ? (_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_6__.GLOBAL_OBJ ).util.format(...values)\n    : (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_7__.safeJoin)(values, ' ');\n}\n\n\n//# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWtEO0FBQ0Y7QUFDTTtBQUNrQztBQUM5QjtBQUNXO0FBQ2pCO0FBQ0s7O0FBRXpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsMkJBQTJCO0FBQzNFLElBQUk7QUFDSjtBQUNBO0FBQ0EsMkJBQTJCLGtFQUFpQixjQUFjO0FBQzFELDJDQUEyQyxrRUFBYzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0EsTUFBTSxvR0FBZ0MsSUFBSSxhQUFhO0FBQ3ZELFlBQVksNERBQVM7QUFDckI7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsV0FBVyxpRkFBdUI7QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxpQ0FBaUM7QUFDekY7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRSw4REFBYTtBQUNmO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxTQUFTLDJFQUFvQixZQUFZLGlFQUFVO0FBQ25ELE9BQU8saUVBQVU7QUFDakIsTUFBTSxnRUFBUTtBQUNkOztBQUVvRDtBQUNwRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvY29uc29sZS5qcz9lYzg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZEJyZWFkY3J1bWIgfSBmcm9tICcuLi9icmVhZGNydW1icy5qcyc7XG5pbXBvcnQgeyBnZXRDbGllbnQgfSBmcm9tICcuLi9jdXJyZW50U2NvcGVzLmpzJztcbmltcG9ydCB7IGRlZmluZUludGVncmF0aW9uIH0gZnJvbSAnLi4vaW50ZWdyYXRpb24uanMnO1xuaW1wb3J0IHsgYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIgfSBmcm9tICcuLi91dGlscy1ob2lzdC9pbnN0cnVtZW50L2NvbnNvbGUuanMnO1xuaW1wb3J0IHsgQ09OU09MRV9MRVZFTFMgfSBmcm9tICcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuaW1wb3J0IHsgc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcgfSBmcm9tICcuLi91dGlscy1ob2lzdC9zZXZlcml0eS5qcyc7XG5pbXBvcnQgeyBzYWZlSm9pbiB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L3N0cmluZy5qcyc7XG5pbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzJztcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDb25zb2xlJztcblxuLyoqXG4gKiBDYXB0dXJlcyBjYWxscyB0byB0aGUgYGNvbnNvbGVgIEFQSSBhcyBicmVhZGNydW1icyBpbiBTZW50cnkuXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgaW50ZWdyYXRpb24gaW5zdHJ1bWVudHMgYGNvbnNvbGUuZGVidWdgLCBgY29uc29sZS5pbmZvYCwgYGNvbnNvbGUud2FybmAsIGBjb25zb2xlLmVycm9yYCxcbiAqIGBjb25zb2xlLmxvZ2AsIGBjb25zb2xlLnRyYWNlYCwgYW5kIGBjb25zb2xlLmFzc2VydGAuIFlvdSBjYW4gdXNlIHRoZSBgbGV2ZWxzYCBvcHRpb24gdG8gY3VzdG9taXplIHdoaWNoXG4gKiBsZXZlbHMgYXJlIGNhcHR1cmVkLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmNvbnNvbGVJbnRlZ3JhdGlvbih7IGxldmVsczogWydlcnJvcicsICd3YXJuJ10gfSldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgY29uc29sZUludGVncmF0aW9uID0gZGVmaW5lSW50ZWdyYXRpb24oKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBsZXZlbHMgPSBuZXcgU2V0KG9wdGlvbnMubGV2ZWxzIHx8IENPTlNPTEVfTEVWRUxTKTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBhZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlcigoeyBhcmdzLCBsZXZlbCB9KSA9PiB7XG4gICAgICAgIGlmIChnZXRDbGllbnQoKSAhPT0gY2xpZW50IHx8ICFsZXZlbHMuaGFzKGxldmVsKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZENvbnNvbGVCcmVhZGNydW1iKGxldmVsLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuLyoqXG4gKiBDYXB0dXJlIGEgY29uc29sZSBicmVhZGNydW1iLlxuICpcbiAqIEV4cG9ydGVkIGp1c3QgZm9yIHRlc3RzLlxuICovXG5mdW5jdGlvbiBhZGRDb25zb2xlQnJlYWRjcnVtYihsZXZlbCwgYXJncykge1xuICBjb25zdCBicmVhZGNydW1iID0ge1xuICAgIGNhdGVnb3J5OiAnY29uc29sZScsXG4gICAgZGF0YToge1xuICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgICAgbG9nZ2VyOiAnY29uc29sZScsXG4gICAgfSxcbiAgICBsZXZlbDogc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcobGV2ZWwpLFxuICAgIG1lc3NhZ2U6IGZvcm1hdENvbnNvbGVBcmdzKGFyZ3MpLFxuICB9O1xuXG4gIGlmIChsZXZlbCA9PT0gJ2Fzc2VydCcpIHtcbiAgICBpZiAoYXJnc1swXSA9PT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGFzc2VydGlvbkFyZ3MgPSBhcmdzLnNsaWNlKDEpO1xuICAgICAgYnJlYWRjcnVtYi5tZXNzYWdlID1cbiAgICAgICAgYXNzZXJ0aW9uQXJncy5sZW5ndGggPiAwID8gYEFzc2VydGlvbiBmYWlsZWQ6ICR7Zm9ybWF0Q29uc29sZUFyZ3MoYXNzZXJ0aW9uQXJncyl9YCA6ICdBc3NlcnRpb24gZmFpbGVkJztcbiAgICAgIGJyZWFkY3J1bWIuZGF0YS5hcmd1bWVudHMgPSBhc3NlcnRpb25BcmdzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEb24ndCBjYXB0dXJlIGEgYnJlYWRjcnVtYiBmb3IgcGFzc2VkIGFzc2VydGlvbnNcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIsIHtcbiAgICBpbnB1dDogYXJncyxcbiAgICBsZXZlbCxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdENvbnNvbGVBcmdzKHZhbHVlcykge1xuICByZXR1cm4gJ3V0aWwnIGluIEdMT0JBTF9PQkogJiYgdHlwZW9mIChHTE9CQUxfT0JKICkudXRpbC5mb3JtYXQgPT09ICdmdW5jdGlvbidcbiAgICA/IChHTE9CQUxfT0JKICkudXRpbC5mb3JtYXQoLi4udmFsdWVzKVxuICAgIDogc2FmZUpvaW4odmFsdWVzLCAnICcpO1xufVxuXG5leHBvcnQgeyBhZGRDb25zb2xlQnJlYWRjcnVtYiwgY29uc29sZUludGVncmF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/console.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/dedupe.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/dedupe.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _shouldDropEvent: () => (/* binding */ _shouldDropEvent),\n/* harmony export */   dedupeIntegration: () => (/* binding */ dedupeIntegration)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/stacktrace.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n\n\n\n\n\nconst INTEGRATION_NAME = 'Dedupe';\n\nconst _dedupeIntegration = (() => {\n  let previousEvent;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch (_oO) {} // eslint-disable-line no-empty\n\n      return (previousEvent = currentEvent);\n    },\n  };\n}) ;\n\n/**\n * Deduplication filter.\n */\nconst dedupeIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_2__.defineIntegration)(_dedupeIntegration);\n\n/** only exported for tests. */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  let currentFrames = (0,_utils_hoist_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFramesFromEvent)(currentEvent);\n  let previousFrames = (0,_utils_hoist_stacktrace_js__WEBPACK_IMPORTED_MODULE_3__.getFramesFromEvent)(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames ;\n  previousFrames = previousFrames ;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i];\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint ;\n  previousFingerprint = previousFingerprint ;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\nfunction _getExceptionFromEvent(event) {\n  return event.exception?.values && event.exception.values[0];\n}\n\n\n//# sourceMappingURL=dedupe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/dedupe.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/eventFilters.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/eventFilters.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eventFiltersIntegration: () => (/* binding */ eventFiltersIntegration),\n/* harmony export */   inboundFiltersIntegration: () => (/* binding */ inboundFiltersIntegration)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_eventUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/eventUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/eventUtils.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils-hoist/string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n\n\n\n\n\n\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n  /^Script error\\.?$/,\n  /^Javascript error: Script error\\.? on line 0$/,\n  /^ResizeObserver loop completed with undelivered notifications.$/, // The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.\n  /^Cannot redefine property: googletag$/, // This is thrown when google tag manager is used in combination with an ad blocker\n  /^Can't find variable: gmo$/, // Error from Google Search App https://issuetracker.google.com/issues/396043331\n  /^undefined is not an object \\(evaluating 'a\\.[A-Z]'\\)$/, // Random error that happens but not actionable or noticeable to end-users.\n  'can\\'t redefine non-configurable property \"solana\"', // Probably a browser extension or custom browser (Brave) throwing this error\n  \"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\", // Error thrown by GTM, seemingly not affecting end-users\n  \"Can't find variable: _AutofillCallbackHandler\", // Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/\n  /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/, // unactionable error from CEFSharp, a .NET library that embeds chromium in .NET apps\n  /^Java exception was raised during method invocation$/, // error from Facebook Mobile browser (https://github.com/getsentry/sentry-javascript/issues/15065)\n];\n\n/** Options for the EventFilters integration */\n\nconst INTEGRATION_NAME = 'EventFilters';\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n */\nconst eventFiltersIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)((options = {}) => {\n  let mergedOptions;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const clientOptions = client.getOptions();\n      mergedOptions = _mergeOptions(options, clientOptions);\n    },\n    processEvent(event, _hint, client) {\n      if (!mergedOptions) {\n        const clientOptions = client.getOptions();\n        mergedOptions = _mergeOptions(options, clientOptions);\n      }\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    },\n  };\n});\n\n/**\n * An integration that filters out events (errors and transactions) based on:\n *\n * - (Errors) A curated list of known low-value or irrelevant errors (see {@link DEFAULT_IGNORE_ERRORS})\n * - (Errors) A list of error messages or urls/filenames passed in via\n *   - Top level Sentry.init options (`ignoreErrors`, `denyUrls`, `allowUrls`)\n *   - The same options passed to the integration directly via @param options\n * - (Transactions/Spans) A list of root span (transaction) names passed in via\n *   - Top level Sentry.init option (`ignoreTransactions`)\n *   - The same option passed to the integration directly via @param options\n *\n * Events filtered by this integration will not be sent to Sentry.\n *\n * @deprecated this integration was renamed and will be removed in a future major version.\n * Use `eventFiltersIntegration` instead.\n */\nconst inboundFiltersIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)(((options = {}) => {\n  return {\n    ...eventFiltersIntegration(options),\n    name: 'InboundFilters',\n  };\n}) );\n\nfunction _mergeOptions(\n  internalOptions = {},\n  clientOptions = {},\n) {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],\n  };\n}\n\nfunction _shouldDropEvent(event, options) {\n  if (!event.type) {\n    // Filter errors\n    if (_isIgnoredError(event, options.ignoreErrors)) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD &&\n        _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\n          `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}`,\n        );\n      return true;\n    }\n    if (_isUselessError(event)) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD &&\n        _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\n          `Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(\n            event,\n          )}`,\n        );\n      return true;\n    }\n    if (_isDeniedUrl(event, options.denyUrls)) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD &&\n        _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\n          `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n    if (!_isAllowedUrl(event, options.allowUrls)) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD &&\n        _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\n          `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(\n            event,\n          )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n        );\n      return true;\n    }\n  } else if (event.type === 'transaction') {\n    // Filter transactions\n\n    if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD &&\n        _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\n          `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}`,\n        );\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event, ignoreErrors) {\n  if (!ignoreErrors?.length) {\n    return false;\n  }\n\n  return (0,_utils_eventUtils_js__WEBPACK_IMPORTED_MODULE_4__.getPossibleEventMessages)(event).some(message => (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_5__.stringMatchesSomePattern)(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event, ignoreTransactions) {\n  if (!ignoreTransactions?.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_5__.stringMatchesSomePattern)(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event, denyUrls) {\n  if (!denyUrls?.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_5__.stringMatchesSomePattern)(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event, allowUrls) {\n  if (!allowUrls?.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_5__.stringMatchesSomePattern)(url, allowUrls);\n}\n\nfunction _getLastValidUrl(frames = []) {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event) {\n  try {\n    // If there are linked exceptions or exception aggregates we only want to match against the top frame of the \"root\" (the main exception)\n    // The root always comes last in linked exceptions\n    const rootException = [...(event.exception?.values ?? [])]\n      .reverse()\n      .find(value => value.mechanism?.parent_id === undefined && value.stacktrace?.frames?.length);\n    const frames = rootException?.stacktrace?.frames;\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.error(`Cannot extract url for event ${(0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_3__.getEventDescription)(event)}`);\n    return null;\n  }\n}\n\nfunction _isUselessError(event) {\n  // We only want to consider events for dropping that actually have recorded exception values.\n  if (!event.exception?.values?.length) {\n    return false;\n  }\n\n  return (\n    // No top-level message\n    !event.message &&\n    // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some(value => value.stacktrace || (value.type && value.type !== 'Error') || value.value)\n  );\n}\n\n\n//# sourceMappingURL=eventFilters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/eventFilters.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/extraerrordata.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/extraerrordata.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extraErrorDataIntegration: () => (/* binding */ extraErrorDataIntegration)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/normalize.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils-hoist/string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n\n\n\n\n\n\n\n\nconst INTEGRATION_NAME = 'ExtraErrorData';\n\n/**\n * Extract additional data for from original exceptions.\n */\nconst _extraErrorDataIntegration = ((options = {}) => {\n  const { depth = 3, captureErrorCause = true } = options;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, hint, client) {\n      const { maxValueLength = 250 } = client.getOptions();\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause, maxValueLength);\n    },\n  };\n}) ;\n\nconst extraErrorDataIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)(_extraErrorDataIntegration);\n\nfunction _enhanceEventWithErrorData(\n  event,\n  hint = {},\n  depth,\n  captureErrorCause,\n  maxValueLength,\n) {\n  if (!hint.originalException || !(0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__.isError)(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = (hint.originalException ).name || hint.originalException.constructor.name;\n\n  const errorData = _extractErrorData(hint.originalException , captureErrorCause, maxValueLength);\n\n  if (errorData) {\n    const contexts = {\n      ...event.contexts,\n    };\n\n    const normalizedErrorData = (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_2__.normalize)(errorData, depth);\n\n    if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_3__.addNonEnumerableProperty)(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n\n    return {\n      ...event,\n      contexts,\n    };\n  }\n\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(\n  error,\n  captureErrorCause,\n  maxValueLength,\n) {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = [\n      'name',\n      'message',\n      'stack',\n      'line',\n      'column',\n      'fileName',\n      'lineNumber',\n      'columnNumber',\n      'toJSON',\n    ];\n\n    const extraErrorInfo = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__.isError)(value) || typeof value === 'string' ? (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(`${value}`, maxValueLength) : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__.isError)(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON() ;\n\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_1__.isError)(value) ? value.toString() : value;\n      }\n    }\n\n    return extraErrorInfo;\n  } catch (oO) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_5__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_6__.logger.error('Unable to extract extra data from the Error object:', oO);\n  }\n\n  return null;\n}\n\n\n//# sourceMappingURL=extraerrordata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvZXh0cmFlcnJvcmRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDTTtBQUNRO0FBQ1o7QUFDTTtBQUNZO0FBQ2hCOztBQUVwRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQsVUFBVSxzQ0FBc0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsY0FBYyx1QkFBdUI7QUFDckM7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELGtDQUFrQyxrRUFBaUI7O0FBRW5EO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsMkRBQU87QUFDekM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDQUFnQyxvRUFBUzs7QUFFekMsUUFBUSxpRUFBYTtBQUNyQjtBQUNBO0FBQ0EsTUFBTSxnRkFBd0I7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyREFBTyx1Q0FBdUMsZ0VBQVEsSUFBSSxNQUFNO0FBQzVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QiwyREFBTztBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QiwyREFBTztBQUNyQztBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKLElBQUksd0RBQVcsSUFBSSwwREFBTTtBQUN6Qjs7QUFFQTtBQUNBOztBQUVxQztBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvZXh0cmFlcnJvcmRhdGEuanM/YzIzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4uL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IGRlZmluZUludGVncmF0aW9uIH0gZnJvbSAnLi4vaW50ZWdyYXRpb24uanMnO1xuaW1wb3J0IHsgaXNFcnJvciwgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L2lzLmpzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcyc7XG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tICcuLi91dGlscy1ob2lzdC9ub3JtYWxpemUuanMnO1xuaW1wb3J0IHsgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5IH0gZnJvbSAnLi4vdXRpbHMtaG9pc3Qvb2JqZWN0LmpzJztcbmltcG9ydCB7IHRydW5jYXRlIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3Qvc3RyaW5nLmpzJztcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdFeHRyYUVycm9yRGF0YSc7XG5cbi8qKlxuICogRXh0cmFjdCBhZGRpdGlvbmFsIGRhdGEgZm9yIGZyb20gb3JpZ2luYWwgZXhjZXB0aW9ucy5cbiAqL1xuY29uc3QgX2V4dHJhRXJyb3JEYXRhSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7IGRlcHRoID0gMywgY2FwdHVyZUVycm9yQ2F1c2UgPSB0cnVlIH0gPSBvcHRpb25zO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJvY2Vzc0V2ZW50KGV2ZW50LCBoaW50LCBjbGllbnQpIHtcbiAgICAgIGNvbnN0IHsgbWF4VmFsdWVMZW5ndGggPSAyNTAgfSA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG4gICAgICByZXR1cm4gX2VuaGFuY2VFdmVudFdpdGhFcnJvckRhdGEoZXZlbnQsIGhpbnQsIGRlcHRoLCBjYXB0dXJlRXJyb3JDYXVzZSwgbWF4VmFsdWVMZW5ndGgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IGV4dHJhRXJyb3JEYXRhSW50ZWdyYXRpb24gPSBkZWZpbmVJbnRlZ3JhdGlvbihfZXh0cmFFcnJvckRhdGFJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIF9lbmhhbmNlRXZlbnRXaXRoRXJyb3JEYXRhKFxuICBldmVudCxcbiAgaGludCA9IHt9LFxuICBkZXB0aCxcbiAgY2FwdHVyZUVycm9yQ2F1c2UsXG4gIG1heFZhbHVlTGVuZ3RoLFxuKSB7XG4gIGlmICghaGludC5vcmlnaW5hbEV4Y2VwdGlvbiB8fCAhaXNFcnJvcihoaW50Lm9yaWdpbmFsRXhjZXB0aW9uKSkge1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuICBjb25zdCBleGNlcHRpb25OYW1lID0gKGhpbnQub3JpZ2luYWxFeGNlcHRpb24gKS5uYW1lIHx8IGhpbnQub3JpZ2luYWxFeGNlcHRpb24uY29uc3RydWN0b3IubmFtZTtcblxuICBjb25zdCBlcnJvckRhdGEgPSBfZXh0cmFjdEVycm9yRGF0YShoaW50Lm9yaWdpbmFsRXhjZXB0aW9uICwgY2FwdHVyZUVycm9yQ2F1c2UsIG1heFZhbHVlTGVuZ3RoKTtcblxuICBpZiAoZXJyb3JEYXRhKSB7XG4gICAgY29uc3QgY29udGV4dHMgPSB7XG4gICAgICAuLi5ldmVudC5jb250ZXh0cyxcbiAgICB9O1xuXG4gICAgY29uc3Qgbm9ybWFsaXplZEVycm9yRGF0YSA9IG5vcm1hbGl6ZShlcnJvckRhdGEsIGRlcHRoKTtcblxuICAgIGlmIChpc1BsYWluT2JqZWN0KG5vcm1hbGl6ZWRFcnJvckRhdGEpKSB7XG4gICAgICAvLyBXZSBtYXJrIHRoZSBlcnJvciBkYXRhIGFzIFwiYWxyZWFkeSBub3JtYWxpemVkXCIgaGVyZSwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IG90aGVyIG5vcm1hbGl6YXRpb24gcHJvY2VkdXJlcyB0b1xuICAgICAgLy8gcG90ZW50aWFsbHkgdHJ1bmNhdGUgdGhlIGRhdGEgd2UganVzdCBhbHJlYWR5IG5vcm1hbGl6ZWQsIHdpdGggYSBjZXJ0YWluIGRlcHRoIHNldHRpbmcuXG4gICAgICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkobm9ybWFsaXplZEVycm9yRGF0YSwgJ19fc2VudHJ5X3NraXBfbm9ybWFsaXphdGlvbl9fJywgdHJ1ZSk7XG4gICAgICBjb250ZXh0c1tleGNlcHRpb25OYW1lXSA9IG5vcm1hbGl6ZWRFcnJvckRhdGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmV2ZW50LFxuICAgICAgY29udGV4dHMsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBldmVudDtcbn1cblxuLyoqXG4gKiBFeHRyYWN0IGV4dHJhIGluZm9ybWF0aW9uIGZyb20gdGhlIEVycm9yIG9iamVjdFxuICovXG5mdW5jdGlvbiBfZXh0cmFjdEVycm9yRGF0YShcbiAgZXJyb3IsXG4gIGNhcHR1cmVFcnJvckNhdXNlLFxuICBtYXhWYWx1ZUxlbmd0aCxcbikge1xuICAvLyBXZSBhcmUgdHJ5aW5nIHRvIGVuaGFuY2UgYWxyZWFkeSBleGlzdGluZyBldmVudCwgc28gbm8gaGFybSBkb25lIGlmIGl0IHdvbid0IHN1Y2NlZWRcbiAgdHJ5IHtcbiAgICBjb25zdCBuYXRpdmVLZXlzID0gW1xuICAgICAgJ25hbWUnLFxuICAgICAgJ21lc3NhZ2UnLFxuICAgICAgJ3N0YWNrJyxcbiAgICAgICdsaW5lJyxcbiAgICAgICdjb2x1bW4nLFxuICAgICAgJ2ZpbGVOYW1lJyxcbiAgICAgICdsaW5lTnVtYmVyJyxcbiAgICAgICdjb2x1bW5OdW1iZXInLFxuICAgICAgJ3RvSlNPTicsXG4gICAgXTtcblxuICAgIGNvbnN0IGV4dHJhRXJyb3JJbmZvID0ge307XG5cbiAgICAvLyBXZSB3YW50IG9ubHkgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLCB0aHVzIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBpcyByZWR1bmRhbnQgaGVyZSwgYXMgd2UgZmlsdGVyIGtleXMgYW55d2F5LlxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGVycm9yKSkge1xuICAgICAgaWYgKG5hdGl2ZUtleXMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlID0gZXJyb3Jba2V5XTtcbiAgICAgIGV4dHJhRXJyb3JJbmZvW2tleV0gPSBpc0Vycm9yKHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdHJ1bmNhdGUoYCR7dmFsdWV9YCwgbWF4VmFsdWVMZW5ndGgpIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gRXJyb3IuY2F1c2UgaXMgYSBzdGFuZGFyZCBwcm9wZXJ0eSB0aGF0IGlzIG5vbiBlbnVtZXJhYmxlLCB3ZSB0aGVyZWZvcmUgbmVlZCB0byBhY2Nlc3MgaXQgc2VwYXJhdGVseS5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvci9jYXVzZVxuICAgIGlmIChjYXB0dXJlRXJyb3JDYXVzZSAmJiBlcnJvci5jYXVzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBleHRyYUVycm9ySW5mby5jYXVzZSA9IGlzRXJyb3IoZXJyb3IuY2F1c2UpID8gZXJyb3IuY2F1c2UudG9TdHJpbmcoKSA6IGVycm9yLmNhdXNlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHNvbWVvbmUgYXR0YWNoZWQgYHRvSlNPTmAgbWV0aG9kIHRvIGdyYWIgZXZlbiBtb3JlIHByb3BlcnRpZXMgKGVnLiBheGlvcyBpcyBkb2luZyB0aGF0KVxuICAgIGlmICh0eXBlb2YgZXJyb3IudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zdCBzZXJpYWxpemVkRXJyb3IgPSBlcnJvci50b0pTT04oKSA7XG5cbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNlcmlhbGl6ZWRFcnJvcikpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzZXJpYWxpemVkRXJyb3Jba2V5XTtcbiAgICAgICAgZXh0cmFFcnJvckluZm9ba2V5XSA9IGlzRXJyb3IodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBleHRyYUVycm9ySW5mbztcbiAgfSBjYXRjaCAob08pIHtcbiAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIuZXJyb3IoJ1VuYWJsZSB0byBleHRyYWN0IGV4dHJhIGRhdGEgZnJvbSB0aGUgRXJyb3Igb2JqZWN0OicsIG9PKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgeyBleHRyYUVycm9yRGF0YUludGVncmF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWVycm9yZGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/extraerrordata.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/functiontostring.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/functiontostring.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   functionToStringIntegration: () => (/* binding */ functionToStringIntegration)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n\n\n\n\nlet originalFunctionToString;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst SETUP_CLIENTS = new WeakMap();\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function ( ...args) {\n          const originalFunction = (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.getOriginalFunction)(this);\n          const context =\n            SETUP_CLIENTS.has((0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_1__.getClient)() ) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) ;\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nconst functionToStringIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_2__.defineIntegration)(_functionToStringIntegration);\n\n\n//# sourceMappingURL=functiontostring.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdEO0FBQ007QUFDUzs7QUFFL0Q7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDJFQUFtQjtBQUN0RDtBQUNBLDhCQUE4Qiw0REFBUztBQUN2QztBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0Esb0NBQW9DLGtFQUFpQjs7QUFFZDtBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvZnVuY3Rpb250b3N0cmluZy5qcz8zMTkxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENsaWVudCB9IGZyb20gJy4uL2N1cnJlbnRTY29wZXMuanMnO1xuaW1wb3J0IHsgZGVmaW5lSW50ZWdyYXRpb24gfSBmcm9tICcuLi9pbnRlZ3JhdGlvbi5qcyc7XG5pbXBvcnQgeyBnZXRPcmlnaW5hbEZ1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3Qvb2JqZWN0LmpzJztcblxubGV0IG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZztcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdGdW5jdGlvblRvU3RyaW5nJztcblxuY29uc3QgU0VUVVBfQ0xJRU5UUyA9IG5ldyBXZWFrTWFwKCk7XG5cbmNvbnN0IF9mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4gICAgICAvLyBpbnRyaW5zaWNzIChsaWtlIEZ1bmN0aW9uLnByb3RvdHlwZSkgbWlnaHQgYmUgaW1tdXRhYmxlIGluIHNvbWUgZW52aXJvbm1lbnRzXG4gICAgICAvLyBlLmcuIE5vZGUgd2l0aCAtLWZyb3plbi1pbnRyaW5zaWNzLCBYUyAoYW4gZW1iZWRkZWQgSmF2YVNjcmlwdCBlbmdpbmUpIG9yIFNFUyAoYSBKYXZhU2NyaXB0IHByb3Bvc2FsKVxuICAgICAgdHJ5IHtcbiAgICAgICAgRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCAuLi5hcmdzKSB7XG4gICAgICAgICAgY29uc3Qgb3JpZ2luYWxGdW5jdGlvbiA9IGdldE9yaWdpbmFsRnVuY3Rpb24odGhpcyk7XG4gICAgICAgICAgY29uc3QgY29udGV4dCA9XG4gICAgICAgICAgICBTRVRVUF9DTElFTlRTLmhhcyhnZXRDbGllbnQoKSApICYmIG9yaWdpbmFsRnVuY3Rpb24gIT09IHVuZGVmaW5lZCA/IG9yaWdpbmFsRnVuY3Rpb24gOiB0aGlzO1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmcuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gaWdub3JlIGVycm9ycyBoZXJlLCBqdXN0IGRvbid0IHBhdGNoIHRoaXNcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgU0VUVVBfQ0xJRU5UUy5zZXQoY2xpZW50LCB0cnVlKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIFBhdGNoIHRvU3RyaW5nIGNhbGxzIHRvIHJldHVybiBwcm9wZXIgbmFtZSBmb3Igd3JhcHBlZCBmdW5jdGlvbnMuXG4gKlxuICogYGBganNcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uKCksXG4gKiAgIF0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24gPSBkZWZpbmVJbnRlZ3JhdGlvbihfZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uKTtcblxuZXhwb3J0IHsgZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbnRvc3RyaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/functiontostring.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/linkederrors.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/linkederrors.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   linkedErrorsIntegration: () => (/* binding */ linkedErrorsIntegration)\n/* harmony export */ });\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_aggregate_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/aggregate-errors.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/aggregate-errors.js\");\n/* harmony import */ var _utils_hoist_eventbuilder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/eventbuilder.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/eventbuilder.js\");\n\n\n\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      (0,_utils_hoist_aggregate_errors_js__WEBPACK_IMPORTED_MODULE_0__.applyAggregateErrorsToEvent)(_utils_hoist_eventbuilder_js__WEBPACK_IMPORTED_MODULE_1__.exceptionFromError, options.stackParser, key, limit, event, hint);\n    },\n  };\n}) ;\n\nconst linkedErrorsIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_2__.defineIntegration)(_linkedErrorsIntegration);\n\n\n//# sourceMappingURL=linkederrors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0Q7QUFDMkI7QUFDYjs7QUFFcEU7QUFDQTs7QUFFQTs7QUFFQSwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLDZGQUEyQixDQUFDLDRFQUFrQjtBQUNwRCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELGdDQUFnQyxrRUFBaUI7O0FBRWQ7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vaW50ZWdyYXRpb25zL2xpbmtlZGVycm9ycy5qcz8zMWQ3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUludGVncmF0aW9uIH0gZnJvbSAnLi4vaW50ZWdyYXRpb24uanMnO1xuaW1wb3J0IHsgYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50IH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvYWdncmVnYXRlLWVycm9ycy5qcyc7XG5pbXBvcnQgeyBleGNlcHRpb25Gcm9tRXJyb3IgfSBmcm9tICcuLi91dGlscy1ob2lzdC9ldmVudGJ1aWxkZXIuanMnO1xuXG5jb25zdCBERUZBVUxUX0tFWSA9ICdjYXVzZSc7XG5jb25zdCBERUZBVUxUX0xJTUlUID0gNTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdMaW5rZWRFcnJvcnMnO1xuXG5jb25zdCBfbGlua2VkRXJyb3JzSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBsaW1pdCA9IG9wdGlvbnMubGltaXQgfHwgREVGQVVMVF9MSU1JVDtcbiAgY29uc3Qga2V5ID0gb3B0aW9ucy5rZXkgfHwgREVGQVVMVF9LRVk7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHByZXByb2Nlc3NFdmVudChldmVudCwgaGludCwgY2xpZW50KSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gY2xpZW50LmdldE9wdGlvbnMoKTtcblxuICAgICAgYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50KGV4Y2VwdGlvbkZyb21FcnJvciwgb3B0aW9ucy5zdGFja1BhcnNlciwga2V5LCBsaW1pdCwgZXZlbnQsIGhpbnQpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IGxpbmtlZEVycm9yc0ludGVncmF0aW9uID0gZGVmaW5lSW50ZWdyYXRpb24oX2xpbmtlZEVycm9yc0ludGVncmF0aW9uKTtcblxuZXhwb3J0IHsgbGlua2VkRXJyb3JzSW50ZWdyYXRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbmtlZGVycm9ycy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/linkederrors.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/metadata.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   moduleMetadataIntegration: () => (/* binding */ moduleMetadataIntegration)\n/* harmony export */ });\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metadata.js */ \"./node_modules/@sentry/core/build/esm/metadata.js\");\n/* harmony import */ var _utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n\n\n\n\n/**\n * Adds module metadata to stack frames.\n *\n * Metadata can be injected by the Sentry bundler plugins using the `moduleMetadata` config option.\n *\n * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n * our sources\n */\nconst moduleMetadataIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)(() => {\n  return {\n    name: 'ModuleMetadata',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      client.on('beforeEnvelope', envelope => {\n        (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.forEachEnvelopeItem)(envelope, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? (item )[1] : undefined;\n\n            if (event) {\n              (0,_metadata_js__WEBPACK_IMPORTED_MODULE_2__.stripMetadataFromStackFrames)(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n\n        const stackParser = client.getOptions().stackParser;\n        (0,_metadata_js__WEBPACK_IMPORTED_MODULE_2__.addMetadataToStackFrames)(stackParser, event);\n      });\n    },\n  };\n});\n\n\n//# sourceMappingURL=metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvbWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRDtBQUNrQztBQUN2Qjs7QUFFakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtFQUFpQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSw2RUFBbUI7QUFDM0I7QUFDQTs7QUFFQTtBQUNBLGNBQWMsMEVBQTRCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLHNFQUF3QjtBQUNoQyxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFb0M7QUFDckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vaW50ZWdyYXRpb25zL21ldGFkYXRhLmpzPzIyNmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lSW50ZWdyYXRpb24gfSBmcm9tICcuLi9pbnRlZ3JhdGlvbi5qcyc7XG5pbXBvcnQgeyBhZGRNZXRhZGF0YVRvU3RhY2tGcmFtZXMsIHN0cmlwTWV0YWRhdGFGcm9tU3RhY2tGcmFtZXMgfSBmcm9tICcuLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgeyBmb3JFYWNoRW52ZWxvcGVJdGVtIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvZW52ZWxvcGUuanMnO1xuXG4vKipcbiAqIEFkZHMgbW9kdWxlIG1ldGFkYXRhIHRvIHN0YWNrIGZyYW1lcy5cbiAqXG4gKiBNZXRhZGF0YSBjYW4gYmUgaW5qZWN0ZWQgYnkgdGhlIFNlbnRyeSBidW5kbGVyIHBsdWdpbnMgdXNpbmcgdGhlIGBtb2R1bGVNZXRhZGF0YWAgY29uZmlnIG9wdGlvbi5cbiAqXG4gKiBXaGVuIHRoaXMgaW50ZWdyYXRpb24gaXMgYWRkZWQsIHRoZSBtZXRhZGF0YSBwYXNzZWQgdG8gdGhlIGJ1bmRsZXIgcGx1Z2luIGlzIGFkZGVkIHRvIHRoZSBzdGFjayBmcmFtZXMgb2YgYWxsIGV2ZW50c1xuICogdW5kZXIgdGhlIGBtb2R1bGVfbWV0YWRhdGFgIHByb3BlcnR5LiBUaGlzIGNhbiBiZSB1c2VkIHRvIGhlbHAgaW4gdGFnZ2luZyBvciByb3V0aW5nIG9mIGV2ZW50cyBmcm9tIGRpZmZlcmVudCB0ZWFtc1xuICogb3VyIHNvdXJjZXNcbiAqL1xuY29uc3QgbW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbiA9IGRlZmluZUludGVncmF0aW9uKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnTW9kdWxlTWV0YWRhdGEnLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgLy8gV2UgbmVlZCB0byBzdHJpcCBtZXRhZGF0YSBmcm9tIHN0YWNrIGZyYW1lcyBiZWZvcmUgc2VuZGluZyB0aGVtIHRvIFNlbnRyeSBzaW5jZSB0aGVzZSBhcmUgY2xpZW50IHNpZGUgb25seS5cbiAgICAgIGNsaWVudC5vbignYmVmb3JlRW52ZWxvcGUnLCBlbnZlbG9wZSA9PiB7XG4gICAgICAgIGZvckVhY2hFbnZlbG9wZUl0ZW0oZW52ZWxvcGUsIChpdGVtLCB0eXBlKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdldmVudCcpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IChpdGVtIClbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICBzdHJpcE1ldGFkYXRhRnJvbVN0YWNrRnJhbWVzKGV2ZW50KTtcbiAgICAgICAgICAgICAgaXRlbVsxXSA9IGV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgY2xpZW50Lm9uKCdhcHBseUZyYW1lTWV0YWRhdGEnLCBldmVudCA9PiB7XG4gICAgICAgIC8vIE9ubHkgYXBwbHkgc3RhY2sgZnJhbWUgbWV0YWRhdGEgdG8gZXJyb3IgZXZlbnRzXG4gICAgICAgIGlmIChldmVudC50eXBlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhY2tQYXJzZXIgPSBjbGllbnQuZ2V0T3B0aW9ucygpLnN0YWNrUGFyc2VyO1xuICAgICAgICBhZGRNZXRhZGF0YVRvU3RhY2tGcmFtZXMoc3RhY2tQYXJzZXIsIGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuZXhwb3J0IHsgbW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/metadata.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/requestdata.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/requestdata.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requestDataIntegration: () => (/* binding */ requestDataIntegration)\n/* harmony export */ });\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_cookie_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cookie.js */ \"./node_modules/@sentry/core/build/esm/utils/cookie.js\");\n/* harmony import */ var _vendor_getIpAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vendor/getIpAddress.js */ \"./node_modules/@sentry/core/build/esm/vendor/getIpAddress.js\");\n\n\n\n\n// TODO(v10): Change defaults based on `sendDefaultPii`\nconst DEFAULT_INCLUDE = {\n  cookies: true,\n  data: true,\n  headers: true,\n  query_string: true,\n  url: true,\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options = {}) => {\n  const include = {\n    ...DEFAULT_INCLUDE,\n    ...options.include,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const { sdkProcessingMetadata = {} } = event;\n      const { normalizedRequest, ipAddress } = sdkProcessingMetadata;\n\n      const includeWithDefaultPiiApplied = {\n        ...include,\n        ip: include.ip ?? client.getOptions().sendDefaultPii,\n      };\n\n      if (normalizedRequest) {\n        addNormalizedRequestDataToEvent(event, normalizedRequest, { ipAddress }, includeWithDefaultPiiApplied);\n      }\n\n      return event;\n    },\n  };\n}) ;\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nconst requestDataIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)(_requestDataIntegration);\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(\n  event,\n  req,\n  // Data that should not go into `event.request` but is somehow related to requests\n  additionalData,\n  include,\n) {\n  event.request = {\n    ...event.request,\n    ...extractNormalizedRequestData(req, include),\n  };\n\n  if (include.ip) {\n    const ip = (req.headers && (0,_vendor_getIpAddress_js__WEBPACK_IMPORTED_MODULE_1__.getClientIPAddress)(req.headers)) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n}\n\nfunction extractNormalizedRequestData(\n  normalizedRequest,\n  include,\n) {\n  const requestData = {};\n  const headers = { ...normalizedRequest.headers };\n\n  if (include.headers) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.cookies) {\n      delete (headers ).cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.ip) {\n      _vendor_getIpAddress_js__WEBPACK_IMPORTED_MODULE_1__.ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete (headers )[ipHeaderName];\n      });\n    }\n  }\n\n  requestData.method = normalizedRequest.method;\n\n  if (include.url) {\n    requestData.url = normalizedRequest.url;\n  }\n\n  if (include.cookies) {\n    const cookies = normalizedRequest.cookies || (headers?.cookie ? (0,_utils_cookie_js__WEBPACK_IMPORTED_MODULE_2__.parseCookie)(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n\n  if (include.query_string) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n\n  if (include.data) {\n    requestData.data = normalizedRequest.data;\n  }\n\n  return requestData;\n}\n\n\n//# sourceMappingURL=requestdata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvcmVxdWVzdGRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRDtBQUNMO0FBQzZCOztBQUU5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDZCQUE2QjtBQUMzQyxjQUFjLCtCQUErQjs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvRUFBb0UsV0FBVztBQUMvRTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0VBQWlCOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsMkVBQWtCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjs7QUFFcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTSxrRUFBYTtBQUNuQjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0VBQW9FLDZEQUFXO0FBQy9FO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVrQztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvcmVxdWVzdGRhdGEuanM/N2M5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVJbnRlZ3JhdGlvbiB9IGZyb20gJy4uL2ludGVncmF0aW9uLmpzJztcbmltcG9ydCB7IHBhcnNlQ29va2llIH0gZnJvbSAnLi4vdXRpbHMvY29va2llLmpzJztcbmltcG9ydCB7IGdldENsaWVudElQQWRkcmVzcywgaXBIZWFkZXJOYW1lcyB9IGZyb20gJy4uL3ZlbmRvci9nZXRJcEFkZHJlc3MuanMnO1xuXG4vLyBUT0RPKHYxMCk6IENoYW5nZSBkZWZhdWx0cyBiYXNlZCBvbiBgc2VuZERlZmF1bHRQaWlgXG5jb25zdCBERUZBVUxUX0lOQ0xVREUgPSB7XG4gIGNvb2tpZXM6IHRydWUsXG4gIGRhdGE6IHRydWUsXG4gIGhlYWRlcnM6IHRydWUsXG4gIHF1ZXJ5X3N0cmluZzogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxufTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdSZXF1ZXN0RGF0YSc7XG5cbmNvbnN0IF9yZXF1ZXN0RGF0YUludGVncmF0aW9uID0gKChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgaW5jbHVkZSA9IHtcbiAgICAuLi5ERUZBVUxUX0lOQ0xVREUsXG4gICAgLi4ub3B0aW9ucy5pbmNsdWRlLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBwcm9jZXNzRXZlbnQoZXZlbnQsIF9oaW50LCBjbGllbnQpIHtcbiAgICAgIGNvbnN0IHsgc2RrUHJvY2Vzc2luZ01ldGFkYXRhID0ge30gfSA9IGV2ZW50O1xuICAgICAgY29uc3QgeyBub3JtYWxpemVkUmVxdWVzdCwgaXBBZGRyZXNzIH0gPSBzZGtQcm9jZXNzaW5nTWV0YWRhdGE7XG5cbiAgICAgIGNvbnN0IGluY2x1ZGVXaXRoRGVmYXVsdFBpaUFwcGxpZWQgPSB7XG4gICAgICAgIC4uLmluY2x1ZGUsXG4gICAgICAgIGlwOiBpbmNsdWRlLmlwID8/IGNsaWVudC5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWksXG4gICAgICB9O1xuXG4gICAgICBpZiAobm9ybWFsaXplZFJlcXVlc3QpIHtcbiAgICAgICAgYWRkTm9ybWFsaXplZFJlcXVlc3REYXRhVG9FdmVudChldmVudCwgbm9ybWFsaXplZFJlcXVlc3QsIHsgaXBBZGRyZXNzIH0sIGluY2x1ZGVXaXRoRGVmYXVsdFBpaUFwcGxpZWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGQgZGF0YSBhYm91dCBhIHJlcXVlc3QgdG8gYW4gZXZlbnQuIFByaW1hcmlseSBmb3IgdXNlIGluIE5vZGUtYmFzZWQgU0RLcywgYnV0IGluY2x1ZGVkIGluIGBAc2VudHJ5L2NvcmVgXG4gKiBzbyBpdCBjYW4gYmUgdXNlZCBpbiBjcm9zcy1wbGF0Zm9ybSBTREtzIGxpa2UgYEBzZW50cnkvbmV4dGpzYC5cbiAqL1xuY29uc3QgcmVxdWVzdERhdGFJbnRlZ3JhdGlvbiA9IGRlZmluZUludGVncmF0aW9uKF9yZXF1ZXN0RGF0YUludGVncmF0aW9uKTtcblxuLyoqXG4gKiBBZGQgYWxyZWFkeSBub3JtYWxpemVkIHJlcXVlc3QgZGF0YSB0byBhbiBldmVudC5cbiAqIFRoaXMgbXV0YXRlcyB0aGUgcGFzc2VkIGluIGV2ZW50LlxuICovXG5mdW5jdGlvbiBhZGROb3JtYWxpemVkUmVxdWVzdERhdGFUb0V2ZW50KFxuICBldmVudCxcbiAgcmVxLFxuICAvLyBEYXRhIHRoYXQgc2hvdWxkIG5vdCBnbyBpbnRvIGBldmVudC5yZXF1ZXN0YCBidXQgaXMgc29tZWhvdyByZWxhdGVkIHRvIHJlcXVlc3RzXG4gIGFkZGl0aW9uYWxEYXRhLFxuICBpbmNsdWRlLFxuKSB7XG4gIGV2ZW50LnJlcXVlc3QgPSB7XG4gICAgLi4uZXZlbnQucmVxdWVzdCxcbiAgICAuLi5leHRyYWN0Tm9ybWFsaXplZFJlcXVlc3REYXRhKHJlcSwgaW5jbHVkZSksXG4gIH07XG5cbiAgaWYgKGluY2x1ZGUuaXApIHtcbiAgICBjb25zdCBpcCA9IChyZXEuaGVhZGVycyAmJiBnZXRDbGllbnRJUEFkZHJlc3MocmVxLmhlYWRlcnMpKSB8fCBhZGRpdGlvbmFsRGF0YS5pcEFkZHJlc3M7XG4gICAgaWYgKGlwKSB7XG4gICAgICBldmVudC51c2VyID0ge1xuICAgICAgICAuLi5ldmVudC51c2VyLFxuICAgICAgICBpcF9hZGRyZXNzOiBpcCxcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3ROb3JtYWxpemVkUmVxdWVzdERhdGEoXG4gIG5vcm1hbGl6ZWRSZXF1ZXN0LFxuICBpbmNsdWRlLFxuKSB7XG4gIGNvbnN0IHJlcXVlc3REYXRhID0ge307XG4gIGNvbnN0IGhlYWRlcnMgPSB7IC4uLm5vcm1hbGl6ZWRSZXF1ZXN0LmhlYWRlcnMgfTtcblxuICBpZiAoaW5jbHVkZS5oZWFkZXJzKSB7XG4gICAgcmVxdWVzdERhdGEuaGVhZGVycyA9IGhlYWRlcnM7XG5cbiAgICAvLyBSZW1vdmUgdGhlIENvb2tpZSBoZWFkZXIgaW4gY2FzZSBjb29raWUgZGF0YSBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHRoZSBldmVudFxuICAgIGlmICghaW5jbHVkZS5jb29raWVzKSB7XG4gICAgICBkZWxldGUgKGhlYWRlcnMgKS5jb29raWU7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIElQIGhlYWRlcnMgaW4gY2FzZSBJUCBkYXRhIHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIGV2ZW50XG4gICAgaWYgKCFpbmNsdWRlLmlwKSB7XG4gICAgICBpcEhlYWRlck5hbWVzLmZvckVhY2goaXBIZWFkZXJOYW1lID0+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICBkZWxldGUgKGhlYWRlcnMgKVtpcEhlYWRlck5hbWVdO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdERhdGEubWV0aG9kID0gbm9ybWFsaXplZFJlcXVlc3QubWV0aG9kO1xuXG4gIGlmIChpbmNsdWRlLnVybCkge1xuICAgIHJlcXVlc3REYXRhLnVybCA9IG5vcm1hbGl6ZWRSZXF1ZXN0LnVybDtcbiAgfVxuXG4gIGlmIChpbmNsdWRlLmNvb2tpZXMpIHtcbiAgICBjb25zdCBjb29raWVzID0gbm9ybWFsaXplZFJlcXVlc3QuY29va2llcyB8fCAoaGVhZGVycz8uY29va2llID8gcGFyc2VDb29raWUoaGVhZGVycy5jb29raWUpIDogdW5kZWZpbmVkKTtcbiAgICByZXF1ZXN0RGF0YS5jb29raWVzID0gY29va2llcyB8fCB7fTtcbiAgfVxuXG4gIGlmIChpbmNsdWRlLnF1ZXJ5X3N0cmluZykge1xuICAgIHJlcXVlc3REYXRhLnF1ZXJ5X3N0cmluZyA9IG5vcm1hbGl6ZWRSZXF1ZXN0LnF1ZXJ5X3N0cmluZztcbiAgfVxuXG4gIGlmIChpbmNsdWRlLmRhdGEpIHtcbiAgICByZXF1ZXN0RGF0YS5kYXRhID0gbm9ybWFsaXplZFJlcXVlc3QuZGF0YTtcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0RGF0YTtcbn1cblxuZXhwb3J0IHsgcmVxdWVzdERhdGFJbnRlZ3JhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdGRhdGEuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/requestdata.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/rewriteframes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/rewriteframes.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateIteratee: () => (/* binding */ generateIteratee),\n/* harmony export */   rewriteFramesIntegration: () => (/* binding */ rewriteFramesIntegration)\n/* harmony export */ });\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_path_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/path.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/path.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\nconst INTEGRATION_NAME = 'RewriteFrames';\n\n/**\n * Rewrite event frames paths.\n */\nconst rewriteFramesIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)((options = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n\n  const isBrowser = \"window\" in _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ && !!_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.window;\n\n  const iteratee = options.iteratee || generateIteratee({ isBrowser, root, prefix });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event) {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception.values.map(value => ({\n            ...value,\n            ...(value.stacktrace && { stacktrace: _processStacktrace(value.stacktrace) }),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace) {\n    return {\n      ...stacktrace,\n      frames: stacktrace?.frames && stacktrace.frames.map(f => iteratee(f)),\n    };\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n\n      return processedEvent;\n    },\n  };\n});\n\n/**\n * Exported only for tests.\n */\nfunction generateIteratee({\n  isBrowser,\n  root,\n  prefix,\n}\n\n) {\n  return (frame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame =\n      /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n      // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n      (frame.filename.includes('\\\\') && !frame.filename.includes('/'));\n\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n\n    if (isBrowser) {\n      if (root) {\n        const oldFilename = frame.filename;\n        if (oldFilename.indexOf(root) === 0) {\n          frame.filename = oldFilename.replace(root, prefix);\n        }\n      }\n    } else {\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame\n          ? frame.filename\n              .replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n              .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n          : frame.filename;\n        const base = root ? (0,_utils_hoist_path_js__WEBPACK_IMPORTED_MODULE_2__.relative)(root, filename) : (0,_utils_hoist_path_js__WEBPACK_IMPORTED_MODULE_2__.basename)(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n    }\n\n    return frame;\n  };\n}\n\n\n//# sourceMappingURL=rewriteframes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvcmV3cml0ZWZyYW1lcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFzRDtBQUNNO0FBQ0g7O0FBRXpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxrRUFBaUIsY0FBYztBQUNoRTtBQUNBOztBQUVBLG9CQUFvQiw2RUFBc0IsTUFBTSxpRUFBVTs7QUFFMUQsMERBQTBELHlCQUF5Qjs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxrREFBa0Q7QUFDeEYsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4REFBUSxtQkFBbUIsOERBQVE7QUFDL0QsNEJBQTRCLE9BQU8sRUFBRSxLQUFLO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVzRDtBQUN0RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9pbnRlZ3JhdGlvbnMvcmV3cml0ZWZyYW1lcy5qcz85N2Q2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUludGVncmF0aW9uIH0gZnJvbSAnLi4vaW50ZWdyYXRpb24uanMnO1xuaW1wb3J0IHsgcmVsYXRpdmUsIGJhc2VuYW1lIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvcGF0aC5qcyc7XG5pbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzJztcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdSZXdyaXRlRnJhbWVzJztcblxuLyoqXG4gKiBSZXdyaXRlIGV2ZW50IGZyYW1lcyBwYXRocy5cbiAqL1xuY29uc3QgcmV3cml0ZUZyYW1lc0ludGVncmF0aW9uID0gZGVmaW5lSW50ZWdyYXRpb24oKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCByb290ID0gb3B0aW9ucy5yb290O1xuICBjb25zdCBwcmVmaXggPSBvcHRpb25zLnByZWZpeCB8fCAnYXBwOi8vLyc7XG5cbiAgY29uc3QgaXNCcm93c2VyID0gJ3dpbmRvdycgaW4gR0xPQkFMX09CSiAmJiAhIUdMT0JBTF9PQkoud2luZG93O1xuXG4gIGNvbnN0IGl0ZXJhdGVlID0gb3B0aW9ucy5pdGVyYXRlZSB8fCBnZW5lcmF0ZUl0ZXJhdGVlKHsgaXNCcm93c2VyLCByb290LCBwcmVmaXggfSk7XG5cbiAgLyoqIFByb2Nlc3MgYW4gZXhjZXB0aW9uIGV2ZW50LiAqL1xuICBmdW5jdGlvbiBfcHJvY2Vzc0V4Y2VwdGlvbnNFdmVudChldmVudCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgZXhjZXB0aW9uOiB7XG4gICAgICAgICAgLi4uZXZlbnQuZXhjZXB0aW9uLFxuICAgICAgICAgIC8vIFRoZSBjaGVjayBmb3IgdGhpcyBpcyBwZXJmb3JtZWQgaW5zaWRlIGBwcm9jZXNzYCBjYWxsIGl0c2VsZiwgc2FmZSB0byBza2lwIGhlcmVcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgIHZhbHVlczogZXZlbnQuZXhjZXB0aW9uLnZhbHVlcy5tYXAodmFsdWUgPT4gKHtcbiAgICAgICAgICAgIC4uLnZhbHVlLFxuICAgICAgICAgICAgLi4uKHZhbHVlLnN0YWNrdHJhY2UgJiYgeyBzdGFja3RyYWNlOiBfcHJvY2Vzc1N0YWNrdHJhY2UodmFsdWUuc3RhY2t0cmFjZSkgfSksXG4gICAgICAgICAgfSkpLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChfb08pIHtcbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gIH1cblxuICAvKiogUHJvY2VzcyBhIHN0YWNrIHRyYWNlLiAqL1xuICBmdW5jdGlvbiBfcHJvY2Vzc1N0YWNrdHJhY2Uoc3RhY2t0cmFjZSkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdGFja3RyYWNlLFxuICAgICAgZnJhbWVzOiBzdGFja3RyYWNlPy5mcmFtZXMgJiYgc3RhY2t0cmFjZS5mcmFtZXMubWFwKGYgPT4gaXRlcmF0ZWUoZikpLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJvY2Vzc0V2ZW50KG9yaWdpbmFsRXZlbnQpIHtcbiAgICAgIGxldCBwcm9jZXNzZWRFdmVudCA9IG9yaWdpbmFsRXZlbnQ7XG5cbiAgICAgIGlmIChvcmlnaW5hbEV2ZW50LmV4Y2VwdGlvbiAmJiBBcnJheS5pc0FycmF5KG9yaWdpbmFsRXZlbnQuZXhjZXB0aW9uLnZhbHVlcykpIHtcbiAgICAgICAgcHJvY2Vzc2VkRXZlbnQgPSBfcHJvY2Vzc0V4Y2VwdGlvbnNFdmVudChwcm9jZXNzZWRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9jZXNzZWRFdmVudDtcbiAgICB9LFxuICB9O1xufSk7XG5cbi8qKlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSXRlcmF0ZWUoe1xuICBpc0Jyb3dzZXIsXG4gIHJvb3QsXG4gIHByZWZpeCxcbn1cblxuKSB7XG4gIHJldHVybiAoZnJhbWUpID0+IHtcbiAgICBpZiAoIWZyYW1lLmZpbGVuYW1lKSB7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIGlmIHRoaXMgaXMgYSBXaW5kb3dzIGZyYW1lIGJ5IGNoZWNraW5nIGZvciBhIFdpbmRvd3Mtc3R5bGUgcHJlZml4IHN1Y2ggYXMgYEM6XFxgXG4gICAgY29uc3QgaXNXaW5kb3dzRnJhbWUgPVxuICAgICAgL15bYS16QS1aXTpcXFxcLy50ZXN0KGZyYW1lLmZpbGVuYW1lKSB8fFxuICAgICAgLy8gb3IgdGhlIHByZXNlbmNlIG9mIGEgYmFja3NsYXNoIHdpdGhvdXQgYSBmb3J3YXJkIHNsYXNoICh3aGljaCBhcmUgbm90IGFsbG93ZWQgb24gV2luZG93cylcbiAgICAgIChmcmFtZS5maWxlbmFtZS5pbmNsdWRlcygnXFxcXCcpICYmICFmcmFtZS5maWxlbmFtZS5pbmNsdWRlcygnLycpKTtcblxuICAgIC8vIENoZWNrIGlmIHRoZSBmcmFtZSBmaWxlbmFtZSBiZWdpbnMgd2l0aCBgL2BcbiAgICBjb25zdCBzdGFydHNXaXRoU2xhc2ggPSAvXlxcLy8udGVzdChmcmFtZS5maWxlbmFtZSk7XG5cbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICBpZiAocm9vdCkge1xuICAgICAgICBjb25zdCBvbGRGaWxlbmFtZSA9IGZyYW1lLmZpbGVuYW1lO1xuICAgICAgICBpZiAob2xkRmlsZW5hbWUuaW5kZXhPZihyb290KSA9PT0gMCkge1xuICAgICAgICAgIGZyYW1lLmZpbGVuYW1lID0gb2xkRmlsZW5hbWUucmVwbGFjZShyb290LCBwcmVmaXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1dpbmRvd3NGcmFtZSB8fCBzdGFydHNXaXRoU2xhc2gpIHtcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBpc1dpbmRvd3NGcmFtZVxuICAgICAgICAgID8gZnJhbWUuZmlsZW5hbWVcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL15bYS16QS1aXTovLCAnJykgLy8gcmVtb3ZlIFdpbmRvd3Mtc3R5bGUgcHJlZml4XG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csICcvJykgLy8gcmVwbGFjZSBhbGwgYFxcXFxgIGluc3RhbmNlcyB3aXRoIGAvYFxuICAgICAgICAgIDogZnJhbWUuZmlsZW5hbWU7XG4gICAgICAgIGNvbnN0IGJhc2UgPSByb290ID8gcmVsYXRpdmUocm9vdCwgZmlsZW5hbWUpIDogYmFzZW5hbWUoZmlsZW5hbWUpO1xuICAgICAgICBmcmFtZS5maWxlbmFtZSA9IGAke3ByZWZpeH0ke2Jhc2V9YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnJhbWU7XG4gIH07XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlSXRlcmF0ZWUsIHJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV3cml0ZWZyYW1lcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/rewriteframes.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/supabase.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/supabase.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DB_OPERATIONS_TO_INSTRUMENT: () => (/* binding */ DB_OPERATIONS_TO_INSTRUMENT),\n/* harmony export */   FILTER_MAPPINGS: () => (/* binding */ FILTER_MAPPINGS),\n/* harmony export */   extractOperation: () => (/* binding */ extractOperation),\n/* harmony export */   instrumentSupabaseClient: () => (/* binding */ instrumentSupabaseClient),\n/* harmony export */   supabaseIntegration: () => (/* binding */ supabaseIntegration),\n/* harmony export */   translateFiltersIntoMethods: () => (/* binding */ translateFiltersIntoMethods)\n/* harmony export */ });\n/* harmony import */ var _breadcrumbs_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../breadcrumbs.js */ \"./node_modules/@sentry/core/build/esm/breadcrumbs.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _exports_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../exports.js */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracing/spanstatus.js */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _tracing_trace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tracing/trace.js */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n// Based on Kamil Ogórek's work on:\n// https://github.com/supabase-community/sentry-integration-js\n\n\nconst AUTH_OPERATIONS_TO_INSTRUMENT = [\n  'reauthenticate',\n  'signInAnonymously',\n  'signInWithOAuth',\n  'signInWithIdToken',\n  'signInWithOtp',\n  'signInWithPassword',\n  'signInWithSSO',\n  'signOut',\n  'signUp',\n  'verifyOtp',\n];\n\nconst AUTH_ADMIN_OPERATIONS_TO_INSTRUMENT = [\n  'createUser',\n  'deleteUser',\n  'listUsers',\n  'getUserById',\n  'updateUserById',\n  'inviteUserByEmail',\n];\n\nconst FILTER_MAPPINGS = {\n  eq: 'eq',\n  neq: 'neq',\n  gt: 'gt',\n  gte: 'gte',\n  lt: 'lt',\n  lte: 'lte',\n  like: 'like',\n  'like(all)': 'likeAllOf',\n  'like(any)': 'likeAnyOf',\n  ilike: 'ilike',\n  'ilike(all)': 'ilikeAllOf',\n  'ilike(any)': 'ilikeAnyOf',\n  is: 'is',\n  in: 'in',\n  cs: 'contains',\n  cd: 'containedBy',\n  sr: 'rangeGt',\n  nxl: 'rangeGte',\n  sl: 'rangeLt',\n  nxr: 'rangeLte',\n  adj: 'rangeAdjacent',\n  ov: 'overlaps',\n  fts: '',\n  plfts: 'plain',\n  phfts: 'phrase',\n  wfts: 'websearch',\n  not: 'not',\n};\n\nconst DB_OPERATIONS_TO_INSTRUMENT = ['select', 'insert', 'upsert', 'update', 'delete'];\n\nfunction markAsInstrumented(fn) {\n  try {\n    (fn ).__SENTRY_INSTRUMENTED__ = true;\n  } catch {\n    // ignore errors here\n  }\n}\n\nfunction isInstrumented(fn) {\n  try {\n    return (fn ).__SENTRY_INSTRUMENTED__;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Extracts the database operation type from the HTTP method and headers\n * @param method - The HTTP method of the request\n * @param headers - The request headers\n * @returns The database operation type ('select', 'insert', 'upsert', 'update', or 'delete')\n */\nfunction extractOperation(method, headers = {}) {\n  switch (method) {\n    case 'GET': {\n      return 'select';\n    }\n    case 'POST': {\n      if (headers['Prefer']?.includes('resolution=')) {\n        return 'upsert';\n      } else {\n        return 'insert';\n      }\n    }\n    case 'PATCH': {\n      return 'update';\n    }\n    case 'DELETE': {\n      return 'delete';\n    }\n    default: {\n      return '<unknown-op>';\n    }\n  }\n}\n\n/**\n * Translates Supabase filter parameters into readable method names for tracing\n * @param key - The filter key from the URL search parameters\n * @param query - The filter value from the URL search parameters\n * @returns A string representation of the filter as a method call\n */\nfunction translateFiltersIntoMethods(key, query) {\n  if (query === '' || query === '*') {\n    return 'select(*)';\n  }\n\n  if (key === 'select') {\n    return `select(${query})`;\n  }\n\n  if (key === 'or' || key.endsWith('.or')) {\n    return `${key}${query}`;\n  }\n\n  const [filter, ...value] = query.split('.');\n\n  let method;\n  // Handle optional `configPart` of the filter\n  if (filter?.startsWith('fts')) {\n    method = 'textSearch';\n  } else if (filter?.startsWith('plfts')) {\n    method = 'textSearch[plain]';\n  } else if (filter?.startsWith('phfts')) {\n    method = 'textSearch[phrase]';\n  } else if (filter?.startsWith('wfts')) {\n    method = 'textSearch[websearch]';\n  } else {\n    method = (filter && FILTER_MAPPINGS[filter ]) || 'filter';\n  }\n\n  return `${method}(${key}, ${value.join('.')})`;\n}\n\nfunction instrumentAuthOperation(operation, isAdmin = false) {\n  return new Proxy(operation, {\n    apply(target, thisArg, argumentsList) {\n      return (0,_tracing_trace_js__WEBPACK_IMPORTED_MODULE_0__.startSpan)(\n        {\n          name: `auth ${isAdmin ? '(admin) ' : ''}${operation.name}`,\n          attributes: {\n            [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.supabase',\n            [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'db',\n            'db.system': 'postgresql',\n            'db.operation': `auth.${isAdmin ? 'admin.' : ''}${operation.name}`,\n          },\n        },\n        span => {\n          return Reflect.apply(target, thisArg, argumentsList)\n            .then((res) => {\n              if (res && typeof res === 'object' && 'error' in res && res.error) {\n                span.setStatus({ code: _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_2__.SPAN_STATUS_ERROR });\n\n                (0,_exports_js__WEBPACK_IMPORTED_MODULE_3__.captureException)(res.error, {\n                  mechanism: {\n                    handled: false,\n                  },\n                });\n              } else {\n                span.setStatus({ code: _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_2__.SPAN_STATUS_OK });\n              }\n\n              span.end();\n              return res;\n            })\n            .catch((err) => {\n              span.setStatus({ code: _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_2__.SPAN_STATUS_ERROR });\n              span.end();\n\n              (0,_exports_js__WEBPACK_IMPORTED_MODULE_3__.captureException)(err, {\n                mechanism: {\n                  handled: false,\n                },\n              });\n\n              throw err;\n            })\n            .then(...argumentsList);\n        },\n      );\n    },\n  });\n}\n\nfunction instrumentSupabaseAuthClient(supabaseClientInstance) {\n  const auth = supabaseClientInstance.auth;\n\n  if (!auth || isInstrumented(supabaseClientInstance.auth)) {\n    return;\n  }\n\n  for (const operation of AUTH_OPERATIONS_TO_INSTRUMENT) {\n    const authOperation = auth[operation];\n\n    if (!authOperation) {\n      continue;\n    }\n\n    if (typeof supabaseClientInstance.auth[operation] === 'function') {\n      supabaseClientInstance.auth[operation] = instrumentAuthOperation(authOperation);\n    }\n  }\n\n  for (const operation of AUTH_ADMIN_OPERATIONS_TO_INSTRUMENT) {\n    const authOperation = auth.admin[operation];\n\n    if (!authOperation) {\n      continue;\n    }\n\n    if (typeof supabaseClientInstance.auth.admin[operation] === 'function') {\n      supabaseClientInstance.auth.admin[operation] = instrumentAuthOperation(authOperation, true);\n    }\n  }\n\n  markAsInstrumented(supabaseClientInstance.auth);\n}\n\nfunction instrumentSupabaseClientConstructor(SupabaseClient) {\n  if (isInstrumented((SupabaseClient ).prototype.from)) {\n    return;\n  }\n\n  (SupabaseClient ).prototype.from = new Proxy(\n    (SupabaseClient ).prototype.from,\n    {\n      apply(target, thisArg, argumentsList) {\n        const rv = Reflect.apply(target, thisArg, argumentsList);\n        const PostgRESTQueryBuilder = (rv ).constructor;\n\n        instrumentPostgRESTQueryBuilder(PostgRESTQueryBuilder );\n\n        return rv;\n      },\n    },\n  );\n\n  markAsInstrumented((SupabaseClient ).prototype.from);\n}\n\nfunction instrumentPostgRESTFilterBuilder(PostgRESTFilterBuilder) {\n  if (isInstrumented((PostgRESTFilterBuilder.prototype ).then)) {\n    return;\n  }\n\n  (PostgRESTFilterBuilder.prototype ).then = new Proxy(\n    (PostgRESTFilterBuilder.prototype ).then,\n    {\n      apply(target, thisArg, argumentsList) {\n        const operations = DB_OPERATIONS_TO_INSTRUMENT;\n        const typedThis = thisArg ;\n        const operation = extractOperation(typedThis.method, typedThis.headers);\n\n        if (!operations.includes(operation)) {\n          return Reflect.apply(target, thisArg, argumentsList);\n        }\n\n        if (!typedThis?.url?.pathname || typeof typedThis.url.pathname !== 'string') {\n          return Reflect.apply(target, thisArg, argumentsList);\n        }\n\n        const pathParts = typedThis.url.pathname.split('/');\n        const table = pathParts.length > 0 ? pathParts[pathParts.length - 1] : '';\n\n        const queryItems = [];\n        for (const [key, value] of typedThis.url.searchParams.entries()) {\n          // It's possible to have multiple entries for the same key, eg. `id=eq.7&id=eq.3`,\n          // so we need to use array instead of object to collect them.\n          queryItems.push(translateFiltersIntoMethods(key, value));\n        }\n        const body = Object.create(null);\n        if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_4__.isPlainObject)(typedThis.body)) {\n          for (const [key, value] of Object.entries(typedThis.body)) {\n            body[key] = value;\n          }\n        }\n\n        // Adding operation to the beginning of the description if it's not a `select` operation\n        // For example, it can be an `insert` or `update` operation but the query can be `select(...)`\n        // For `select` operations, we don't need repeat it in the description\n        const description = `${operation === 'select' ? '' : `${operation}${body ? '(...) ' : ''}`}${queryItems.join(\n          ' ',\n        )} from(${table})`;\n\n        const attributes = {\n          'db.table': table,\n          'db.schema': typedThis.schema,\n          'db.url': typedThis.url.origin,\n          'db.sdk': typedThis.headers['X-Client-Info'],\n          'db.system': 'postgresql',\n          'db.operation': operation,\n          [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.supabase',\n          [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'db',\n        };\n\n        if (queryItems.length) {\n          attributes['db.query'] = queryItems;\n        }\n\n        if (Object.keys(body).length) {\n          attributes['db.body'] = body;\n        }\n\n        return (0,_tracing_trace_js__WEBPACK_IMPORTED_MODULE_0__.startSpan)(\n          {\n            name: description,\n            attributes,\n          },\n          span => {\n            return (Reflect.apply(target, thisArg, []) )\n              .then(\n                (res) => {\n                  if (span) {\n                    if (res && typeof res === 'object' && 'status' in res) {\n                      (0,_tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_2__.setHttpStatus)(span, res.status || 500);\n                    }\n                    span.end();\n                  }\n\n                  if (res.error) {\n                    const err = new Error(res.error.message) ;\n                    if (res.error.code) {\n                      err.code = res.error.code;\n                    }\n                    if (res.error.details) {\n                      err.details = res.error.details;\n                    }\n\n                    const supabaseContext = {};\n                    if (queryItems.length) {\n                      supabaseContext.query = queryItems;\n                    }\n                    if (Object.keys(body).length) {\n                      supabaseContext.body = body;\n                    }\n\n                    (0,_exports_js__WEBPACK_IMPORTED_MODULE_3__.captureException)(err, {\n                      contexts: {\n                        supabase: supabaseContext,\n                      },\n                    });\n                  }\n\n                  const breadcrumb = {\n                    type: 'supabase',\n                    category: `db.${operation}`,\n                    message: description,\n                  };\n\n                  const data = {};\n\n                  if (queryItems.length) {\n                    data.query = queryItems;\n                  }\n\n                  if (Object.keys(body).length) {\n                    data.body = body;\n                  }\n\n                  if (Object.keys(data).length) {\n                    breadcrumb.data = data;\n                  }\n\n                  (0,_breadcrumbs_js__WEBPACK_IMPORTED_MODULE_5__.addBreadcrumb)(breadcrumb);\n\n                  return res;\n                },\n                (err) => {\n                  if (span) {\n                    (0,_tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_2__.setHttpStatus)(span, 500);\n                    span.end();\n                  }\n                  throw err;\n                },\n              )\n              .then(...argumentsList);\n          },\n        );\n      },\n    },\n  );\n\n  markAsInstrumented((PostgRESTFilterBuilder.prototype ).then);\n}\n\nfunction instrumentPostgRESTQueryBuilder(PostgRESTQueryBuilder) {\n  // We need to wrap _all_ operations despite them sharing the same `PostgRESTFilterBuilder`\n  // constructor, as we don't know which method will be called first, and we don't want to miss any calls.\n  for (const operation of DB_OPERATIONS_TO_INSTRUMENT) {\n    if (isInstrumented((PostgRESTQueryBuilder.prototype )[operation])) {\n      continue;\n    }\n\n    (PostgRESTQueryBuilder.prototype )[operation ] = new Proxy(\n      (PostgRESTQueryBuilder.prototype )[operation ],\n      {\n        apply(target, thisArg, argumentsList) {\n          const rv = Reflect.apply(target, thisArg, argumentsList);\n          const PostgRESTFilterBuilder = (rv ).constructor;\n\n          _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.log(`Instrumenting ${operation} operation's PostgRESTFilterBuilder`);\n\n          instrumentPostgRESTFilterBuilder(PostgRESTFilterBuilder);\n\n          return rv;\n        },\n      },\n    );\n\n    markAsInstrumented((PostgRESTQueryBuilder.prototype )[operation]);\n  }\n}\n\nconst instrumentSupabaseClient = (supabaseClient) => {\n  if (!supabaseClient) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.warn('Supabase integration was not installed because no Supabase client was provided.');\n    return;\n  }\n  const SupabaseClientConstructor =\n    supabaseClient.constructor === Function ? supabaseClient : supabaseClient.constructor;\n\n  instrumentSupabaseClientConstructor(SupabaseClientConstructor);\n  instrumentSupabaseAuthClient(supabaseClient );\n};\n\nconst INTEGRATION_NAME = 'Supabase';\n\nconst _supabaseIntegration = ((supabaseClient) => {\n  return {\n    setupOnce() {\n      instrumentSupabaseClient(supabaseClient);\n    },\n    name: INTEGRATION_NAME,\n  };\n}) ;\n\nconst supabaseIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_8__.defineIntegration)((options) => {\n  return _supabaseIntegration(options.supabaseClient);\n}) ;\n\n\n//# sourceMappingURL=supabase.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/supabase.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/integrations/zoderrors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/integrations/zoderrors.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyZodErrorsToEvent: () => (/* binding */ applyZodErrorsToEvent),\n/* harmony export */   flattenIssue: () => (/* binding */ flattenIssue),\n/* harmony export */   flattenIssuePath: () => (/* binding */ flattenIssuePath),\n/* harmony export */   formatIssueMessage: () => (/* binding */ formatIssueMessage),\n/* harmony export */   zodErrorsIntegration: () => (/* binding */ zodErrorsIntegration)\n/* harmony export */ });\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n\n\n\n\nconst DEFAULT_LIMIT = 10;\nconst INTEGRATION_NAME = 'ZodErrors';\n\n/**\n * Simplified ZodIssue type definition\n */\n\nfunction originalExceptionIsZodError(originalException) {\n  return (\n    (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_0__.isError)(originalException) &&\n    originalException.name === 'ZodError' &&\n    Array.isArray((originalException ).issues)\n  );\n}\n\n/**\n * Formats child objects or arrays to a string\n * that is preserved when sent to Sentry.\n *\n * Without this, we end up with something like this in Sentry:\n *\n * [\n *  [Object],\n *  [Object],\n *  [Object],\n *  [Object]\n * ]\n */\nfunction flattenIssue(issue) {\n  return {\n    ...issue,\n    path: 'path' in issue && Array.isArray(issue.path) ? issue.path.join('.') : undefined,\n    keys: 'keys' in issue ? JSON.stringify(issue.keys) : undefined,\n    unionErrors: 'unionErrors' in issue ? JSON.stringify(issue.unionErrors) : undefined,\n  };\n}\n\n/**\n * Takes ZodError issue path array and returns a flattened version as a string.\n * This makes it easier to display paths within a Sentry error message.\n *\n * Array indexes are normalized to reduce duplicate entries\n *\n * @param path ZodError issue path\n * @returns flattened path\n *\n * @example\n * flattenIssuePath([0, 'foo', 1, 'bar']) // -> '<array>.foo.<array>.bar'\n */\nfunction flattenIssuePath(path) {\n  return path\n    .map(p => {\n      if (typeof p === 'number') {\n        return '<array>';\n      } else {\n        return p;\n      }\n    })\n    .join('.');\n}\n\n/**\n * Zod error message is a stringified version of ZodError.issues\n * This doesn't display well in the Sentry UI. Replace it with something shorter.\n */\nfunction formatIssueMessage(zodError) {\n  const errorKeyMap = new Set();\n  for (const iss of zodError.issues) {\n    const issuePath = flattenIssuePath(iss.path);\n    if (issuePath.length > 0) {\n      errorKeyMap.add(issuePath);\n    }\n  }\n\n  const errorKeys = Array.from(errorKeyMap);\n  if (errorKeys.length === 0) {\n    // If there are no keys, then we're likely validating the root\n    // variable rather than a key within an object. This attempts\n    // to extract what type it was that failed to validate.\n    // For example, z.string().parse(123) would return \"string\" here.\n    let rootExpectedType = 'variable';\n    if (zodError.issues.length > 0) {\n      const iss = zodError.issues[0];\n      if (iss !== undefined && 'expected' in iss && typeof iss.expected === 'string') {\n        rootExpectedType = iss.expected;\n      }\n    }\n    return `Failed to validate ${rootExpectedType}`;\n  }\n  return `Failed to validate keys: ${(0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_1__.truncate)(errorKeys.join(', '), 100)}`;\n}\n\n/**\n * Applies ZodError issues to an event extra and replaces the error message\n */\nfunction applyZodErrorsToEvent(\n  limit,\n  saveZodIssuesAsAttachment = false,\n  event,\n  hint,\n) {\n  if (\n    !event.exception?.values ||\n    !hint.originalException ||\n    !originalExceptionIsZodError(hint.originalException) ||\n    hint.originalException.issues.length === 0\n  ) {\n    return event;\n  }\n\n  try {\n    const issuesToFlatten = saveZodIssuesAsAttachment\n      ? hint.originalException.issues\n      : hint.originalException.issues.slice(0, limit);\n    const flattenedIssues = issuesToFlatten.map(flattenIssue);\n\n    if (saveZodIssuesAsAttachment) {\n      // Sometimes having the full error details can be helpful.\n      // Attachments have much higher limits, so we can include the full list of issues.\n      if (!Array.isArray(hint.attachments)) {\n        hint.attachments = [];\n      }\n      hint.attachments.push({\n        filename: 'zod_issues.json',\n        data: JSON.stringify({\n          issues: flattenedIssues,\n        }),\n      });\n    }\n\n    return {\n      ...event,\n      exception: {\n        ...event.exception,\n        values: [\n          {\n            ...event.exception.values[0],\n            value: formatIssueMessage(hint.originalException),\n          },\n          ...event.exception.values.slice(1),\n        ],\n      },\n      extra: {\n        ...event.extra,\n        'zoderror.issues': flattenedIssues.slice(0, limit),\n      },\n    };\n  } catch (e) {\n    // Hopefully we never throw errors here, but record it\n    // with the event just in case.\n    return {\n      ...event,\n      extra: {\n        ...event.extra,\n        'zoderrors sentry integration parse error': {\n          message: 'an exception was thrown while processing ZodError within applyZodErrorsToEvent()',\n          error: e instanceof Error ? `${e.name}: ${e.message}\\n${e.stack}` : 'unknown',\n        },\n      },\n    };\n  }\n}\n\nconst _zodErrorsIntegration = ((options = {}) => {\n  const limit = options.limit ?? DEFAULT_LIMIT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent, hint) {\n      const processedEvent = applyZodErrorsToEvent(limit, options.saveZodIssuesAsAttachment, originalEvent, hint);\n      return processedEvent;\n    },\n  };\n}) ;\n\n/**\n * Sentry integration to process Zod errors, making them easier to work with in Sentry.\n */\nconst zodErrorsIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_2__.defineIntegration)(_zodErrorsIntegration);\n\n\n//# sourceMappingURL=zoderrors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/integrations/zoderrors.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/logs/console-integration.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/logs/console-integration.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   consoleLoggingIntegration: () => (/* binding */ consoleLoggingIntegration)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _integration_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../integration.js */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_hoist_instrument_console_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/instrument/console.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils-hoist/string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _exports_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./exports.js */ \"./node_modules/@sentry/core/build/esm/logs/exports.js\");\n\n\n\n\n\n\n\n\n\n\nconst INTEGRATION_NAME = 'ConsoleLogs';\n\nconst DEFAULT_ATTRIBUTES = {\n  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.console.logging',\n};\n\nconst _consoleLoggingIntegration = ((options = {}) => {\n  const levels = options.levels || _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.CONSOLE_LEVELS;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!client.getOptions()._experiments?.enableLogs) {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warn('`_experiments.enableLogs` is not enabled, ConsoleLogs integration disabled');\n        return;\n      }\n\n      (0,_utils_hoist_instrument_console_js__WEBPACK_IMPORTED_MODULE_3__.addConsoleInstrumentationHandler)(({ args, level }) => {\n        if ((0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_4__.getClient)() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        if (level === 'assert') {\n          if (!args[0]) {\n            const followingArgs = args.slice(1);\n            const message =\n              followingArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(followingArgs)}` : 'Assertion failed';\n            (0,_exports_js__WEBPACK_IMPORTED_MODULE_5__._INTERNAL_captureLog)({ level: 'error', message, attributes: DEFAULT_ATTRIBUTES });\n          }\n          return;\n        }\n\n        const isLevelLog = level === 'log';\n        (0,_exports_js__WEBPACK_IMPORTED_MODULE_5__._INTERNAL_captureLog)({\n          level: isLevelLog ? 'info' : level,\n          message: formatConsoleArgs(args),\n          severityNumber: isLevelLog ? 10 : undefined,\n          attributes: DEFAULT_ATTRIBUTES,\n        });\n      });\n    },\n  };\n}) ;\n\n/**\n * Captures calls to the `console` API as logs in Sentry. Requires `_experiments.enableLogs` to be enabled.\n *\n * @experimental This feature is experimental and may be changed or removed in future versions.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```ts\n * import * as Sentry from '@sentry/browser';\n *\n * Sentry.init({\n *   integrations: [Sentry.consoleLoggingIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nconst consoleLoggingIntegration = (0,_integration_js__WEBPACK_IMPORTED_MODULE_6__.defineIntegration)(_consoleLoggingIntegration);\n\nfunction formatConsoleArgs(values) {\n  return \"util\" in _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_7__.GLOBAL_OBJ && typeof (_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_7__.GLOBAL_OBJ ).util.format === 'function'\n    ? (_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_7__.GLOBAL_OBJ ).util.format(...values)\n    : (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_8__.safeJoin)(values, ' ');\n}\n\n\n//# sourceMappingURL=console-integration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9sb2dzL2NvbnNvbGUtaW50ZWdyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFnRDtBQUNBO0FBQ007QUFDc0I7QUFDWTtBQUN0QjtBQUNkO0FBQ0s7QUFDTDs7QUFFcEQ7O0FBRUE7QUFDQSxHQUFHLG9GQUFnQztBQUNuQzs7QUFFQSxpREFBaUQ7QUFDakQsbUNBQW1DLGtFQUFjOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsd0RBQVcsSUFBSSwwREFBTTtBQUM3QjtBQUNBOztBQUVBLE1BQU0sb0dBQWdDLElBQUksYUFBYTtBQUN2RCxZQUFZLDREQUFTO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsaUNBQWlDO0FBQy9GLFlBQVksaUVBQW9CLEdBQUcseURBQXlEO0FBQzVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsaUVBQW9CO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCwyQkFBMkI7QUFDbEYsSUFBSTtBQUNKO0FBQ0E7QUFDQSxrQ0FBa0Msa0VBQWlCOztBQUVuRDtBQUNBLFNBQVMsMkVBQW9CLFlBQVksaUVBQVU7QUFDbkQsT0FBTyxpRUFBVTtBQUNqQixNQUFNLGdFQUFRO0FBQ2Q7O0FBRXFDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2xvZ3MvY29uc29sZS1pbnRlZ3JhdGlvbi5qcz8wNGFmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENsaWVudCB9IGZyb20gJy4uL2N1cnJlbnRTY29wZXMuanMnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBkZWZpbmVJbnRlZ3JhdGlvbiB9IGZyb20gJy4uL2ludGVncmF0aW9uLmpzJztcbmltcG9ydCB7IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOIH0gZnJvbSAnLi4vc2VtYW50aWNBdHRyaWJ1dGVzLmpzJztcbmltcG9ydCB7IGFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9jb25zb2xlLmpzJztcbmltcG9ydCB7IENPTlNPTEVfTEVWRUxTLCBsb2dnZXIgfSBmcm9tICcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuaW1wb3J0IHsgc2FmZUpvaW4gfSBmcm9tICcuLi91dGlscy1ob2lzdC9zdHJpbmcuanMnO1xuaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcyc7XG5pbXBvcnQgeyBfSU5URVJOQUxfY2FwdHVyZUxvZyB9IGZyb20gJy4vZXhwb3J0cy5qcyc7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQ29uc29sZUxvZ3MnO1xuXG5jb25zdCBERUZBVUxUX0FUVFJJQlVURVMgPSB7XG4gIFtTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmNvbnNvbGUubG9nZ2luZycsXG59O1xuXG5jb25zdCBfY29uc29sZUxvZ2dpbmdJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IGxldmVscyA9IG9wdGlvbnMubGV2ZWxzIHx8IENPTlNPTEVfTEVWRUxTO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGlmICghY2xpZW50LmdldE9wdGlvbnMoKS5fZXhwZXJpbWVudHM/LmVuYWJsZUxvZ3MpIHtcbiAgICAgICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLndhcm4oJ2BfZXhwZXJpbWVudHMuZW5hYmxlTG9nc2AgaXMgbm90IGVuYWJsZWQsIENvbnNvbGVMb2dzIGludGVncmF0aW9uIGRpc2FibGVkJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIoKHsgYXJncywgbGV2ZWwgfSkgPT4ge1xuICAgICAgICBpZiAoZ2V0Q2xpZW50KCkgIT09IGNsaWVudCB8fCAhbGV2ZWxzLmluY2x1ZGVzKGxldmVsKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZXZlbCA9PT0gJ2Fzc2VydCcpIHtcbiAgICAgICAgICBpZiAoIWFyZ3NbMF0pIHtcbiAgICAgICAgICAgIGNvbnN0IGZvbGxvd2luZ0FyZ3MgPSBhcmdzLnNsaWNlKDEpO1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9XG4gICAgICAgICAgICAgIGZvbGxvd2luZ0FyZ3MubGVuZ3RoID4gMCA/IGBBc3NlcnRpb24gZmFpbGVkOiAke2Zvcm1hdENvbnNvbGVBcmdzKGZvbGxvd2luZ0FyZ3MpfWAgOiAnQXNzZXJ0aW9uIGZhaWxlZCc7XG4gICAgICAgICAgICBfSU5URVJOQUxfY2FwdHVyZUxvZyh7IGxldmVsOiAnZXJyb3InLCBtZXNzYWdlLCBhdHRyaWJ1dGVzOiBERUZBVUxUX0FUVFJJQlVURVMgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlzTGV2ZWxMb2cgPSBsZXZlbCA9PT0gJ2xvZyc7XG4gICAgICAgIF9JTlRFUk5BTF9jYXB0dXJlTG9nKHtcbiAgICAgICAgICBsZXZlbDogaXNMZXZlbExvZyA/ICdpbmZvJyA6IGxldmVsLFxuICAgICAgICAgIG1lc3NhZ2U6IGZvcm1hdENvbnNvbGVBcmdzKGFyZ3MpLFxuICAgICAgICAgIHNldmVyaXR5TnVtYmVyOiBpc0xldmVsTG9nID8gMTAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgYXR0cmlidXRlczogREVGQVVMVF9BVFRSSUJVVEVTLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQ2FwdHVyZXMgY2FsbHMgdG8gdGhlIGBjb25zb2xlYCBBUEkgYXMgbG9ncyBpbiBTZW50cnkuIFJlcXVpcmVzIGBfZXhwZXJpbWVudHMuZW5hYmxlTG9nc2AgdG8gYmUgZW5hYmxlZC5cbiAqXG4gKiBAZXhwZXJpbWVudGFsIFRoaXMgZmVhdHVyZSBpcyBleHBlcmltZW50YWwgYW5kIG1heSBiZSBjaGFuZ2VkIG9yIHJlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zLlxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGludGVncmF0aW9uIGluc3RydW1lbnRzIGBjb25zb2xlLmRlYnVnYCwgYGNvbnNvbGUuaW5mb2AsIGBjb25zb2xlLndhcm5gLCBgY29uc29sZS5lcnJvcmAsXG4gKiBgY29uc29sZS5sb2dgLCBgY29uc29sZS50cmFjZWAsIGFuZCBgY29uc29sZS5hc3NlcnRgLiBZb3UgY2FuIHVzZSB0aGUgYGxldmVsc2Agb3B0aW9uIHRvIGN1c3RvbWl6ZSB3aGljaFxuICogbGV2ZWxzIGFyZSBjYXB0dXJlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgIGludGVncmF0aW9uczogW1NlbnRyeS5jb25zb2xlTG9nZ2luZ0ludGVncmF0aW9uKHsgbGV2ZWxzOiBbJ2Vycm9yJywgJ3dhcm4nXSB9KV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBjb25zb2xlTG9nZ2luZ0ludGVncmF0aW9uID0gZGVmaW5lSW50ZWdyYXRpb24oX2NvbnNvbGVMb2dnaW5nSW50ZWdyYXRpb24pO1xuXG5mdW5jdGlvbiBmb3JtYXRDb25zb2xlQXJncyh2YWx1ZXMpIHtcbiAgcmV0dXJuICd1dGlsJyBpbiBHTE9CQUxfT0JKICYmIHR5cGVvZiAoR0xPQkFMX09CSiApLnV0aWwuZm9ybWF0ID09PSAnZnVuY3Rpb24nXG4gICAgPyAoR0xPQkFMX09CSiApLnV0aWwuZm9ybWF0KC4uLnZhbHVlcylcbiAgICA6IHNhZmVKb2luKHZhbHVlcywgJyAnKTtcbn1cblxuZXhwb3J0IHsgY29uc29sZUxvZ2dpbmdJbnRlZ3JhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZS1pbnRlZ3JhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/logs/console-integration.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/logs/constants.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/logs/constants.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SEVERITY_TEXT_TO_SEVERITY_NUMBER: () => (/* binding */ SEVERITY_TEXT_TO_SEVERITY_NUMBER)\n/* harmony export */ });\n/**\n * Maps a log severity level to a log severity number.\n *\n * @see LogSeverityLevel\n */\nconst SEVERITY_TEXT_TO_SEVERITY_NUMBER = {\n  trace: 1,\n  debug: 5,\n  info: 9,\n  warn: 13,\n  error: 17,\n  fatal: 21,\n};\n\n\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9sb2dzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTRDO0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2xvZ3MvY29uc3RhbnRzLmpzP2E3OWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNYXBzIGEgbG9nIHNldmVyaXR5IGxldmVsIHRvIGEgbG9nIHNldmVyaXR5IG51bWJlci5cbiAqXG4gKiBAc2VlIExvZ1NldmVyaXR5TGV2ZWxcbiAqL1xuY29uc3QgU0VWRVJJVFlfVEVYVF9UT19TRVZFUklUWV9OVU1CRVIgPSB7XG4gIHRyYWNlOiAxLFxuICBkZWJ1ZzogNSxcbiAgaW5mbzogOSxcbiAgd2FybjogMTMsXG4gIGVycm9yOiAxNyxcbiAgZmF0YWw6IDIxLFxufTtcblxuZXhwb3J0IHsgU0VWRVJJVFlfVEVYVF9UT19TRVZFUklUWV9OVU1CRVIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/logs/constants.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/logs/envelope.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/logs/envelope.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLogContainerEnvelopeItem: () => (/* binding */ createLogContainerEnvelopeItem),\n/* harmony export */   createLogEnvelope: () => (/* binding */ createLogEnvelope)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/dsn.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n\n\n\n/**\n * Creates a log container envelope item for a list of logs.\n *\n * @param items - The logs to include in the envelope.\n * @returns The created log container envelope item.\n */\nfunction createLogContainerEnvelopeItem(items) {\n  return [\n    {\n      type: 'log',\n      item_count: items.length,\n      content_type: 'application/vnd.sentry.items.log+json',\n    },\n    {\n      items,\n    },\n  ];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * Logs from multiple traces can be included in the same envelope.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nfunction createLogEnvelope(\n  logs,\n  metadata,\n  tunnel,\n  dsn,\n) {\n  const headers = {};\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_0__.dsnToString)(dsn);\n  }\n\n  return (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.createEnvelope)(headers, [createLogContainerEnvelopeItem(logs)]);\n}\n\n\n//# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9sb2dzL2VudmVsb3BlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0Q7QUFDUTs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGdFQUFXO0FBQzdCOztBQUVBLFNBQVMsd0VBQWM7QUFDdkI7O0FBRTZEO0FBQzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2xvZ3MvZW52ZWxvcGUuanM/NGY4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkc25Ub1N0cmluZyB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L2Rzbi5qcyc7XG5pbXBvcnQgeyBjcmVhdGVFbnZlbG9wZSB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L2VudmVsb3BlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbG9nIGNvbnRhaW5lciBlbnZlbG9wZSBpdGVtIGZvciBhIGxpc3Qgb2YgbG9ncy5cbiAqXG4gKiBAcGFyYW0gaXRlbXMgLSBUaGUgbG9ncyB0byBpbmNsdWRlIGluIHRoZSBlbnZlbG9wZS5cbiAqIEByZXR1cm5zIFRoZSBjcmVhdGVkIGxvZyBjb250YWluZXIgZW52ZWxvcGUgaXRlbS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTG9nQ29udGFpbmVyRW52ZWxvcGVJdGVtKGl0ZW1zKSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgdHlwZTogJ2xvZycsXG4gICAgICBpdGVtX2NvdW50OiBpdGVtcy5sZW5ndGgsXG4gICAgICBjb250ZW50X3R5cGU6ICdhcHBsaWNhdGlvbi92bmQuc2VudHJ5Lml0ZW1zLmxvZytqc29uJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGl0ZW1zLFxuICAgIH0sXG4gIF07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBlbnZlbG9wZSBmb3IgYSBsaXN0IG9mIGxvZ3MuXG4gKlxuICogTG9ncyBmcm9tIG11bHRpcGxlIHRyYWNlcyBjYW4gYmUgaW5jbHVkZWQgaW4gdGhlIHNhbWUgZW52ZWxvcGUuXG4gKlxuICogQHBhcmFtIGxvZ3MgLSBUaGUgbG9ncyB0byBpbmNsdWRlIGluIHRoZSBlbnZlbG9wZS5cbiAqIEBwYXJhbSBtZXRhZGF0YSAtIFRoZSBtZXRhZGF0YSB0byBpbmNsdWRlIGluIHRoZSBlbnZlbG9wZS5cbiAqIEBwYXJhbSB0dW5uZWwgLSBUaGUgdHVubmVsIHRvIGluY2x1ZGUgaW4gdGhlIGVudmVsb3BlLlxuICogQHBhcmFtIGRzbiAtIFRoZSBEU04gdG8gaW5jbHVkZSBpbiB0aGUgZW52ZWxvcGUuXG4gKiBAcmV0dXJucyBUaGUgY3JlYXRlZCBlbnZlbG9wZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTG9nRW52ZWxvcGUoXG4gIGxvZ3MsXG4gIG1ldGFkYXRhLFxuICB0dW5uZWwsXG4gIGRzbixcbikge1xuICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgaWYgKG1ldGFkYXRhPy5zZGspIHtcbiAgICBoZWFkZXJzLnNkayA9IHtcbiAgICAgIG5hbWU6IG1ldGFkYXRhLnNkay5uYW1lLFxuICAgICAgdmVyc2lvbjogbWV0YWRhdGEuc2RrLnZlcnNpb24sXG4gICAgfTtcbiAgfVxuXG4gIGlmICghIXR1bm5lbCAmJiAhIWRzbikge1xuICAgIGhlYWRlcnMuZHNuID0gZHNuVG9TdHJpbmcoZHNuKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbnZlbG9wZShoZWFkZXJzLCBbY3JlYXRlTG9nQ29udGFpbmVyRW52ZWxvcGVJdGVtKGxvZ3MpXSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUxvZ0NvbnRhaW5lckVudmVsb3BlSXRlbSwgY3JlYXRlTG9nRW52ZWxvcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudmVsb3BlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/logs/envelope.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/logs/exports.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/logs/exports.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _INTERNAL_captureLog: () => (/* binding */ _INTERNAL_captureLog),\n/* harmony export */   _INTERNAL_captureSerializedLog: () => (/* binding */ _INTERNAL_captureSerializedLog),\n/* harmony export */   _INTERNAL_flushLogsBuffer: () => (/* binding */ _INTERNAL_flushLogsBuffer),\n/* harmony export */   _INTERNAL_getLogBuffer: () => (/* binding */ _INTERNAL_getLogBuffer),\n/* harmony export */   logAttributeToSerializedLogAttribute: () => (/* binding */ logAttributeToSerializedLogAttribute)\n/* harmony export */ });\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../client.js */ \"./node_modules/@sentry/core/build/esm/client.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/applyScopeDataToEvent.js */ \"./node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js\");\n/* harmony import */ var _utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/spanOnScope.js */ \"./node_modules/@sentry/core/build/esm/utils/spanOnScope.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils-hoist/time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/@sentry/core/build/esm/logs/constants.js\");\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./envelope.js */ \"./node_modules/@sentry/core/build/esm/logs/envelope.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst MAX_LOG_BUFFER_SIZE = 100;\n\n// The reference to the Client <> LogBuffer map is stored to ensure it's always the same\n_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryClientToLogBufferMap = new WeakMap();\n\n/**\n * Converts a log attribute to a serialized log attribute.\n *\n * @param key - The key of the log attribute.\n * @param value - The value of the log attribute.\n * @returns The serialized log attribute.\n */\nfunction logAttributeToSerializedLogAttribute(value) {\n  switch (typeof value) {\n    case 'number':\n      if (Number.isInteger(value)) {\n        return {\n          value,\n          type: 'integer',\n        };\n      }\n      return {\n        value,\n        type: 'double',\n      };\n    case 'boolean':\n      return {\n        value,\n        type: 'boolean',\n      };\n    case 'string':\n      return {\n        value,\n        type: 'string',\n      };\n    default: {\n      let stringValue = '';\n      try {\n        stringValue = JSON.stringify(value) ?? '';\n      } catch {\n        // Do nothing\n      }\n      return {\n        value: stringValue,\n        type: 'string',\n      };\n    }\n  }\n}\n\n/**\n * Sets a log attribute if the value exists and the attribute key is not already present.\n *\n * @param logAttributes - The log attributes object to modify.\n * @param key - The attribute key to set.\n * @param value - The value to set (only sets if truthy and key not present).\n * @param setEvenIfPresent - Whether to set the attribute if it is present. Defaults to true.\n */\nfunction setLogAttribute(\n  logAttributes,\n  key,\n  value,\n  setEvenIfPresent = true,\n) {\n  if (value && (!logAttributes[key] || setEvenIfPresent)) {\n    logAttributes[key] = value;\n  }\n}\n\n/**\n * Captures a serialized log event and adds it to the log buffer for the given client.\n *\n * @param client - A client. Uses the current client if not provided.\n * @param serializedLog - The serialized log event to capture.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nfunction _INTERNAL_captureSerializedLog(client, serializedLog) {\n  const logBuffer = _INTERNAL_getLogBuffer(client);\n  if (logBuffer === undefined) {\n    _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, [serializedLog]);\n  } else {\n    _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, [...logBuffer, serializedLog]);\n    if (logBuffer.length >= MAX_LOG_BUFFER_SIZE) {\n      _INTERNAL_flushLogsBuffer(client, logBuffer);\n    }\n  }\n}\n\n/**\n * Captures a log event and sends it to Sentry.\n *\n * @param log - The log event to capture.\n * @param scope - A scope. Uses the current scope if not provided.\n * @param client - A client. Uses the current client if not provided.\n * @param captureSerializedLog - A function to capture the serialized log.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nfunction _INTERNAL_captureLog(\n  beforeLog,\n  client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_1__.getClient)(),\n  currentScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_1__.getCurrentScope)(),\n  captureSerializedLog = _INTERNAL_captureSerializedLog,\n) {\n  if (!client) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn('No client available to capture log.');\n    return;\n  }\n\n  const { _experiments, release, environment } = client.getOptions();\n  const { enableLogs = false, beforeSendLog } = _experiments ?? {};\n  if (!enableLogs) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn('logging option not enabled, log will not be captured.');\n    return;\n  }\n\n  const [, traceContext] = (0,_client_js__WEBPACK_IMPORTED_MODULE_4__._getTraceInfoFromScope)(client, currentScope);\n\n  const processedLogAttributes = {\n    ...beforeLog.attributes,\n  };\n\n  const { user } = getMergedScopeData(currentScope);\n  // Only attach user to log attributes if sendDefaultPii is enabled\n  if (client.getOptions().sendDefaultPii) {\n    const { id, email, username } = user;\n    setLogAttribute(processedLogAttributes, 'user.id', id, false);\n    setLogAttribute(processedLogAttributes, 'user.email', email, false);\n    setLogAttribute(processedLogAttributes, 'user.name', username, false);\n  }\n\n  setLogAttribute(processedLogAttributes, 'sentry.release', release);\n  setLogAttribute(processedLogAttributes, 'sentry.environment', environment);\n\n  const { name, version } = client.getSdkMetadata()?.sdk ?? {};\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.name', name);\n  setLogAttribute(processedLogAttributes, 'sentry.sdk.version', version);\n\n  const beforeLogMessage = beforeLog.message;\n  if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_5__.isParameterizedString)(beforeLogMessage)) {\n    const { __sentry_template_string__, __sentry_template_values__ = [] } = beforeLogMessage;\n    processedLogAttributes['sentry.message.template'] = __sentry_template_string__;\n    __sentry_template_values__.forEach((param, index) => {\n      processedLogAttributes[`sentry.message.parameter.${index}`] = param;\n    });\n  }\n\n  const span = (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_6__._getSpanForScope)(currentScope);\n  // Add the parent span ID to the log attributes for trace context\n  setLogAttribute(processedLogAttributes, 'sentry.trace.parent_span_id', span?.spanContext().spanId);\n\n  const processedLog = { ...beforeLog, attributes: processedLogAttributes };\n\n  client.emit('beforeCaptureLog', processedLog);\n\n  const log = beforeSendLog ? beforeSendLog(processedLog) : processedLog;\n  if (!log) {\n    client.recordDroppedEvent('before_send', 'log_item', 1);\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn('beforeSendLog returned null, log will not be captured.');\n    return;\n  }\n\n  const { level, message, attributes = {}, severityNumber } = log;\n\n  const serializedLog = {\n    timestamp: (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_7__.timestampInSeconds)(),\n    level,\n    body: message,\n    trace_id: traceContext?.trace_id,\n    severity_number: severityNumber ?? _constants_js__WEBPACK_IMPORTED_MODULE_8__.SEVERITY_TEXT_TO_SEVERITY_NUMBER[level],\n    attributes: Object.keys(attributes).reduce(\n      (acc, key) => {\n        acc[key] = logAttributeToSerializedLogAttribute(attributes[key]);\n        return acc;\n      },\n      {} ,\n    ),\n  };\n\n  captureSerializedLog(client, serializedLog);\n\n  client.emit('afterCaptureLog', log);\n}\n\n/**\n * Flushes the logs buffer to Sentry.\n *\n * @param client - A client.\n * @param maybeLogBuffer - A log buffer. Uses the log buffer for the given client if not provided.\n *\n * @experimental This method will experience breaking changes. This is not yet part of\n * the stable Sentry SDK API and can be changed or removed without warning.\n */\nfunction _INTERNAL_flushLogsBuffer(client, maybeLogBuffer) {\n  const logBuffer = maybeLogBuffer ?? _INTERNAL_getLogBuffer(client) ?? [];\n  if (logBuffer.length === 0) {\n    return;\n  }\n\n  const clientOptions = client.getOptions();\n  const envelope = (0,_envelope_js__WEBPACK_IMPORTED_MODULE_9__.createLogEnvelope)(logBuffer, clientOptions._metadata, clientOptions.tunnel, client.getDsn());\n\n  // Clear the log buffer after envelopes have been constructed.\n  _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryClientToLogBufferMap?.set(client, []);\n\n  client.emit('flushLogs');\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\n/**\n * Returns the log buffer for a given client.\n *\n * Exported for testing purposes.\n *\n * @param client - The client to get the log buffer for.\n * @returns The log buffer for the given client.\n */\nfunction _INTERNAL_getLogBuffer(client) {\n  return _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryClientToLogBufferMap?.get(client);\n}\n\n/**\n * Get the scope data for the current scope after merging with the\n * global scope and isolation scope.\n *\n * @param currentScope - The current scope.\n * @returns The scope data.\n */\nfunction getMergedScopeData(currentScope) {\n  const scopeData = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalScope)().getScopeData();\n  (0,_utils_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_10__.mergeScopeData)(scopeData, (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_1__.getIsolationScope)().getScopeData());\n  (0,_utils_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_10__.mergeScopeData)(scopeData, currentScope.getScopeData());\n  return scopeData;\n}\n\n\n//# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9sb2dzL2V4cG9ydHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRDtBQUM4QztBQUNwRDtBQUNtQjtBQUNSO0FBQ0U7QUFDWDtBQUNVO0FBQ0g7QUFDUztBQUNoQjs7QUFFbEQ7O0FBRUE7QUFDQSxpRUFBVTs7QUFFVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksaUVBQVU7QUFDZCxJQUFJO0FBQ0osSUFBSSxpRUFBVTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDREQUFTO0FBQ3BCLGlCQUFpQixrRUFBZTtBQUNoQztBQUNBO0FBQ0E7QUFDQSxJQUFJLHdEQUFXLElBQUksMERBQU07QUFDekI7QUFDQTs7QUFFQSxVQUFVLHFDQUFxQztBQUMvQyxVQUFVLG9DQUFvQztBQUM5QztBQUNBLElBQUksd0RBQVcsSUFBSSwwREFBTTtBQUN6QjtBQUNBOztBQUVBLDJCQUEyQixrRUFBc0I7O0FBRWpEO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLE9BQU87QUFDakI7QUFDQTtBQUNBLFlBQVksc0JBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsVUFBVSxnQkFBZ0I7QUFDMUI7QUFDQTs7QUFFQTtBQUNBLE1BQU0seUVBQXFCO0FBQzNCLFlBQVksOERBQThEO0FBQzFFO0FBQ0E7QUFDQSx5REFBeUQsTUFBTTtBQUMvRCxLQUFLO0FBQ0w7O0FBRUEsZUFBZSx1RUFBZ0I7QUFDL0I7QUFDQTs7QUFFQSx5QkFBeUI7O0FBRXpCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUksd0RBQVcsSUFBSSwwREFBTTtBQUN6QjtBQUNBOztBQUVBLFVBQVUsK0JBQStCLG1CQUFtQjs7QUFFNUQ7QUFDQSxlQUFlLHdFQUFrQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMkVBQWdDO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQiwrREFBaUI7O0FBRXBDO0FBQ0EsRUFBRSxpRUFBVTs7QUFFWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGlFQUFVO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUVBQWM7QUFDbEMsRUFBRSxnRkFBYyxZQUFZLG9FQUFpQjtBQUM3QyxFQUFFLGdGQUFjO0FBQ2hCO0FBQ0E7O0FBRXlKO0FBQ3pKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL2xvZ3MvZXhwb3J0cy5qcz82OTFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9nZXRUcmFjZUluZm9Gcm9tU2NvcGUgfSBmcm9tICcuLi9jbGllbnQuanMnO1xuaW1wb3J0IHsgZ2V0Q2xpZW50LCBnZXRDdXJyZW50U2NvcGUsIGdldEdsb2JhbFNjb3BlLCBnZXRJc29sYXRpb25TY29wZSB9IGZyb20gJy4uL2N1cnJlbnRTY29wZXMuanMnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBtZXJnZVNjb3BlRGF0YSB9IGZyb20gJy4uL3V0aWxzL2FwcGx5U2NvcGVEYXRhVG9FdmVudC5qcyc7XG5pbXBvcnQgeyBfZ2V0U3BhbkZvclNjb3BlIH0gZnJvbSAnLi4vdXRpbHMvc3Bhbk9uU2NvcGUuanMnO1xuaW1wb3J0IHsgaXNQYXJhbWV0ZXJpemVkU3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvaXMuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJztcbmltcG9ydCB7IHRpbWVzdGFtcEluU2Vjb25kcyB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L3RpbWUuanMnO1xuaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcyc7XG5pbXBvcnQgeyBTRVZFUklUWV9URVhUX1RPX1NFVkVSSVRZX05VTUJFUiB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUxvZ0VudmVsb3BlIH0gZnJvbSAnLi9lbnZlbG9wZS5qcyc7XG5cbmNvbnN0IE1BWF9MT0dfQlVGRkVSX1NJWkUgPSAxMDA7XG5cbi8vIFRoZSByZWZlcmVuY2UgdG8gdGhlIENsaWVudCA8PiBMb2dCdWZmZXIgbWFwIGlzIHN0b3JlZCB0byBlbnN1cmUgaXQncyBhbHdheXMgdGhlIHNhbWVcbkdMT0JBTF9PQkouX3NlbnRyeUNsaWVudFRvTG9nQnVmZmVyTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGxvZyBhdHRyaWJ1dGUgdG8gYSBzZXJpYWxpemVkIGxvZyBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIGtleSAtIFRoZSBrZXkgb2YgdGhlIGxvZyBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgb2YgdGhlIGxvZyBhdHRyaWJ1dGUuXG4gKiBAcmV0dXJucyBUaGUgc2VyaWFsaXplZCBsb2cgYXR0cmlidXRlLlxuICovXG5mdW5jdGlvbiBsb2dBdHRyaWJ1dGVUb1NlcmlhbGl6ZWRMb2dBdHRyaWJ1dGUodmFsdWUpIHtcbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgdHlwZTogJ2ludGVnZXInLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHR5cGU6ICdkb3VibGUnLFxuICAgICAgfTtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICB9O1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGxldCBzdHJpbmdWYWx1ZSA9ICcnO1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RyaW5nVmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgPz8gJyc7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHN0cmluZ1ZhbHVlLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogU2V0cyBhIGxvZyBhdHRyaWJ1dGUgaWYgdGhlIHZhbHVlIGV4aXN0cyBhbmQgdGhlIGF0dHJpYnV0ZSBrZXkgaXMgbm90IGFscmVhZHkgcHJlc2VudC5cbiAqXG4gKiBAcGFyYW0gbG9nQXR0cmlidXRlcyAtIFRoZSBsb2cgYXR0cmlidXRlcyBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIGtleSAtIFRoZSBhdHRyaWJ1dGUga2V5IHRvIHNldC5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXQgKG9ubHkgc2V0cyBpZiB0cnV0aHkgYW5kIGtleSBub3QgcHJlc2VudCkuXG4gKiBAcGFyYW0gc2V0RXZlbklmUHJlc2VudCAtIFdoZXRoZXIgdG8gc2V0IHRoZSBhdHRyaWJ1dGUgaWYgaXQgaXMgcHJlc2VudC4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAqL1xuZnVuY3Rpb24gc2V0TG9nQXR0cmlidXRlKFxuICBsb2dBdHRyaWJ1dGVzLFxuICBrZXksXG4gIHZhbHVlLFxuICBzZXRFdmVuSWZQcmVzZW50ID0gdHJ1ZSxcbikge1xuICBpZiAodmFsdWUgJiYgKCFsb2dBdHRyaWJ1dGVzW2tleV0gfHwgc2V0RXZlbklmUHJlc2VudCkpIHtcbiAgICBsb2dBdHRyaWJ1dGVzW2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIENhcHR1cmVzIGEgc2VyaWFsaXplZCBsb2cgZXZlbnQgYW5kIGFkZHMgaXQgdG8gdGhlIGxvZyBidWZmZXIgZm9yIHRoZSBnaXZlbiBjbGllbnQuXG4gKlxuICogQHBhcmFtIGNsaWVudCAtIEEgY2xpZW50LiBVc2VzIHRoZSBjdXJyZW50IGNsaWVudCBpZiBub3QgcHJvdmlkZWQuXG4gKiBAcGFyYW0gc2VyaWFsaXplZExvZyAtIFRoZSBzZXJpYWxpemVkIGxvZyBldmVudCB0byBjYXB0dXJlLlxuICpcbiAqIEBleHBlcmltZW50YWwgVGhpcyBtZXRob2Qgd2lsbCBleHBlcmllbmNlIGJyZWFraW5nIGNoYW5nZXMuIFRoaXMgaXMgbm90IHlldCBwYXJ0IG9mXG4gKiB0aGUgc3RhYmxlIFNlbnRyeSBTREsgQVBJIGFuZCBjYW4gYmUgY2hhbmdlZCBvciByZW1vdmVkIHdpdGhvdXQgd2FybmluZy5cbiAqL1xuZnVuY3Rpb24gX0lOVEVSTkFMX2NhcHR1cmVTZXJpYWxpemVkTG9nKGNsaWVudCwgc2VyaWFsaXplZExvZykge1xuICBjb25zdCBsb2dCdWZmZXIgPSBfSU5URVJOQUxfZ2V0TG9nQnVmZmVyKGNsaWVudCk7XG4gIGlmIChsb2dCdWZmZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIEdMT0JBTF9PQkouX3NlbnRyeUNsaWVudFRvTG9nQnVmZmVyTWFwPy5zZXQoY2xpZW50LCBbc2VyaWFsaXplZExvZ10pO1xuICB9IGVsc2Uge1xuICAgIEdMT0JBTF9PQkouX3NlbnRyeUNsaWVudFRvTG9nQnVmZmVyTWFwPy5zZXQoY2xpZW50LCBbLi4ubG9nQnVmZmVyLCBzZXJpYWxpemVkTG9nXSk7XG4gICAgaWYgKGxvZ0J1ZmZlci5sZW5ndGggPj0gTUFYX0xPR19CVUZGRVJfU0laRSkge1xuICAgICAgX0lOVEVSTkFMX2ZsdXNoTG9nc0J1ZmZlcihjbGllbnQsIGxvZ0J1ZmZlcik7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2FwdHVyZXMgYSBsb2cgZXZlbnQgYW5kIHNlbmRzIGl0IHRvIFNlbnRyeS5cbiAqXG4gKiBAcGFyYW0gbG9nIC0gVGhlIGxvZyBldmVudCB0byBjYXB0dXJlLlxuICogQHBhcmFtIHNjb3BlIC0gQSBzY29wZS4gVXNlcyB0aGUgY3VycmVudCBzY29wZSBpZiBub3QgcHJvdmlkZWQuXG4gKiBAcGFyYW0gY2xpZW50IC0gQSBjbGllbnQuIFVzZXMgdGhlIGN1cnJlbnQgY2xpZW50IGlmIG5vdCBwcm92aWRlZC5cbiAqIEBwYXJhbSBjYXB0dXJlU2VyaWFsaXplZExvZyAtIEEgZnVuY3Rpb24gdG8gY2FwdHVyZSB0aGUgc2VyaWFsaXplZCBsb2cuXG4gKlxuICogQGV4cGVyaW1lbnRhbCBUaGlzIG1ldGhvZCB3aWxsIGV4cGVyaWVuY2UgYnJlYWtpbmcgY2hhbmdlcy4gVGhpcyBpcyBub3QgeWV0IHBhcnQgb2ZcbiAqIHRoZSBzdGFibGUgU2VudHJ5IFNESyBBUEkgYW5kIGNhbiBiZSBjaGFuZ2VkIG9yIHJlbW92ZWQgd2l0aG91dCB3YXJuaW5nLlxuICovXG5mdW5jdGlvbiBfSU5URVJOQUxfY2FwdHVyZUxvZyhcbiAgYmVmb3JlTG9nLFxuICBjbGllbnQgPSBnZXRDbGllbnQoKSxcbiAgY3VycmVudFNjb3BlID0gZ2V0Q3VycmVudFNjb3BlKCksXG4gIGNhcHR1cmVTZXJpYWxpemVkTG9nID0gX0lOVEVSTkFMX2NhcHR1cmVTZXJpYWxpemVkTG9nLFxuKSB7XG4gIGlmICghY2xpZW50KSB7XG4gICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLndhcm4oJ05vIGNsaWVudCBhdmFpbGFibGUgdG8gY2FwdHVyZSBsb2cuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBfZXhwZXJpbWVudHMsIHJlbGVhc2UsIGVudmlyb25tZW50IH0gPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICBjb25zdCB7IGVuYWJsZUxvZ3MgPSBmYWxzZSwgYmVmb3JlU2VuZExvZyB9ID0gX2V4cGVyaW1lbnRzID8/IHt9O1xuICBpZiAoIWVuYWJsZUxvZ3MpIHtcbiAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIud2FybignbG9nZ2luZyBvcHRpb24gbm90IGVuYWJsZWQsIGxvZyB3aWxsIG5vdCBiZSBjYXB0dXJlZC4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBbLCB0cmFjZUNvbnRleHRdID0gX2dldFRyYWNlSW5mb0Zyb21TY29wZShjbGllbnQsIGN1cnJlbnRTY29wZSk7XG5cbiAgY29uc3QgcHJvY2Vzc2VkTG9nQXR0cmlidXRlcyA9IHtcbiAgICAuLi5iZWZvcmVMb2cuYXR0cmlidXRlcyxcbiAgfTtcblxuICBjb25zdCB7IHVzZXIgfSA9IGdldE1lcmdlZFNjb3BlRGF0YShjdXJyZW50U2NvcGUpO1xuICAvLyBPbmx5IGF0dGFjaCB1c2VyIHRvIGxvZyBhdHRyaWJ1dGVzIGlmIHNlbmREZWZhdWx0UGlpIGlzIGVuYWJsZWRcbiAgaWYgKGNsaWVudC5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWkpIHtcbiAgICBjb25zdCB7IGlkLCBlbWFpbCwgdXNlcm5hbWUgfSA9IHVzZXI7XG4gICAgc2V0TG9nQXR0cmlidXRlKHByb2Nlc3NlZExvZ0F0dHJpYnV0ZXMsICd1c2VyLmlkJywgaWQsIGZhbHNlKTtcbiAgICBzZXRMb2dBdHRyaWJ1dGUocHJvY2Vzc2VkTG9nQXR0cmlidXRlcywgJ3VzZXIuZW1haWwnLCBlbWFpbCwgZmFsc2UpO1xuICAgIHNldExvZ0F0dHJpYnV0ZShwcm9jZXNzZWRMb2dBdHRyaWJ1dGVzLCAndXNlci5uYW1lJywgdXNlcm5hbWUsIGZhbHNlKTtcbiAgfVxuXG4gIHNldExvZ0F0dHJpYnV0ZShwcm9jZXNzZWRMb2dBdHRyaWJ1dGVzLCAnc2VudHJ5LnJlbGVhc2UnLCByZWxlYXNlKTtcbiAgc2V0TG9nQXR0cmlidXRlKHByb2Nlc3NlZExvZ0F0dHJpYnV0ZXMsICdzZW50cnkuZW52aXJvbm1lbnQnLCBlbnZpcm9ubWVudCk7XG5cbiAgY29uc3QgeyBuYW1lLCB2ZXJzaW9uIH0gPSBjbGllbnQuZ2V0U2RrTWV0YWRhdGEoKT8uc2RrID8/IHt9O1xuICBzZXRMb2dBdHRyaWJ1dGUocHJvY2Vzc2VkTG9nQXR0cmlidXRlcywgJ3NlbnRyeS5zZGsubmFtZScsIG5hbWUpO1xuICBzZXRMb2dBdHRyaWJ1dGUocHJvY2Vzc2VkTG9nQXR0cmlidXRlcywgJ3NlbnRyeS5zZGsudmVyc2lvbicsIHZlcnNpb24pO1xuXG4gIGNvbnN0IGJlZm9yZUxvZ01lc3NhZ2UgPSBiZWZvcmVMb2cubWVzc2FnZTtcbiAgaWYgKGlzUGFyYW1ldGVyaXplZFN0cmluZyhiZWZvcmVMb2dNZXNzYWdlKSkge1xuICAgIGNvbnN0IHsgX19zZW50cnlfdGVtcGxhdGVfc3RyaW5nX18sIF9fc2VudHJ5X3RlbXBsYXRlX3ZhbHVlc19fID0gW10gfSA9IGJlZm9yZUxvZ01lc3NhZ2U7XG4gICAgcHJvY2Vzc2VkTG9nQXR0cmlidXRlc1snc2VudHJ5Lm1lc3NhZ2UudGVtcGxhdGUnXSA9IF9fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fO1xuICAgIF9fc2VudHJ5X3RlbXBsYXRlX3ZhbHVlc19fLmZvckVhY2goKHBhcmFtLCBpbmRleCkgPT4ge1xuICAgICAgcHJvY2Vzc2VkTG9nQXR0cmlidXRlc1tgc2VudHJ5Lm1lc3NhZ2UucGFyYW1ldGVyLiR7aW5kZXh9YF0gPSBwYXJhbTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHNwYW4gPSBfZ2V0U3BhbkZvclNjb3BlKGN1cnJlbnRTY29wZSk7XG4gIC8vIEFkZCB0aGUgcGFyZW50IHNwYW4gSUQgdG8gdGhlIGxvZyBhdHRyaWJ1dGVzIGZvciB0cmFjZSBjb250ZXh0XG4gIHNldExvZ0F0dHJpYnV0ZShwcm9jZXNzZWRMb2dBdHRyaWJ1dGVzLCAnc2VudHJ5LnRyYWNlLnBhcmVudF9zcGFuX2lkJywgc3Bhbj8uc3BhbkNvbnRleHQoKS5zcGFuSWQpO1xuXG4gIGNvbnN0IHByb2Nlc3NlZExvZyA9IHsgLi4uYmVmb3JlTG9nLCBhdHRyaWJ1dGVzOiBwcm9jZXNzZWRMb2dBdHRyaWJ1dGVzIH07XG5cbiAgY2xpZW50LmVtaXQoJ2JlZm9yZUNhcHR1cmVMb2cnLCBwcm9jZXNzZWRMb2cpO1xuXG4gIGNvbnN0IGxvZyA9IGJlZm9yZVNlbmRMb2cgPyBiZWZvcmVTZW5kTG9nKHByb2Nlc3NlZExvZykgOiBwcm9jZXNzZWRMb2c7XG4gIGlmICghbG9nKSB7XG4gICAgY2xpZW50LnJlY29yZERyb3BwZWRFdmVudCgnYmVmb3JlX3NlbmQnLCAnbG9nX2l0ZW0nLCAxKTtcbiAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIud2FybignYmVmb3JlU2VuZExvZyByZXR1cm5lZCBudWxsLCBsb2cgd2lsbCBub3QgYmUgY2FwdHVyZWQuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyBsZXZlbCwgbWVzc2FnZSwgYXR0cmlidXRlcyA9IHt9LCBzZXZlcml0eU51bWJlciB9ID0gbG9nO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZWRMb2cgPSB7XG4gICAgdGltZXN0YW1wOiB0aW1lc3RhbXBJblNlY29uZHMoKSxcbiAgICBsZXZlbCxcbiAgICBib2R5OiBtZXNzYWdlLFxuICAgIHRyYWNlX2lkOiB0cmFjZUNvbnRleHQ/LnRyYWNlX2lkLFxuICAgIHNldmVyaXR5X251bWJlcjogc2V2ZXJpdHlOdW1iZXIgPz8gU0VWRVJJVFlfVEVYVF9UT19TRVZFUklUWV9OVU1CRVJbbGV2ZWxdLFxuICAgIGF0dHJpYnV0ZXM6IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLnJlZHVjZShcbiAgICAgIChhY2MsIGtleSkgPT4ge1xuICAgICAgICBhY2Nba2V5XSA9IGxvZ0F0dHJpYnV0ZVRvU2VyaWFsaXplZExvZ0F0dHJpYnV0ZShhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSxcbiAgICAgIHt9ICxcbiAgICApLFxuICB9O1xuXG4gIGNhcHR1cmVTZXJpYWxpemVkTG9nKGNsaWVudCwgc2VyaWFsaXplZExvZyk7XG5cbiAgY2xpZW50LmVtaXQoJ2FmdGVyQ2FwdHVyZUxvZycsIGxvZyk7XG59XG5cbi8qKlxuICogRmx1c2hlcyB0aGUgbG9ncyBidWZmZXIgdG8gU2VudHJ5LlxuICpcbiAqIEBwYXJhbSBjbGllbnQgLSBBIGNsaWVudC5cbiAqIEBwYXJhbSBtYXliZUxvZ0J1ZmZlciAtIEEgbG9nIGJ1ZmZlci4gVXNlcyB0aGUgbG9nIGJ1ZmZlciBmb3IgdGhlIGdpdmVuIGNsaWVudCBpZiBub3QgcHJvdmlkZWQuXG4gKlxuICogQGV4cGVyaW1lbnRhbCBUaGlzIG1ldGhvZCB3aWxsIGV4cGVyaWVuY2UgYnJlYWtpbmcgY2hhbmdlcy4gVGhpcyBpcyBub3QgeWV0IHBhcnQgb2ZcbiAqIHRoZSBzdGFibGUgU2VudHJ5IFNESyBBUEkgYW5kIGNhbiBiZSBjaGFuZ2VkIG9yIHJlbW92ZWQgd2l0aG91dCB3YXJuaW5nLlxuICovXG5mdW5jdGlvbiBfSU5URVJOQUxfZmx1c2hMb2dzQnVmZmVyKGNsaWVudCwgbWF5YmVMb2dCdWZmZXIpIHtcbiAgY29uc3QgbG9nQnVmZmVyID0gbWF5YmVMb2dCdWZmZXIgPz8gX0lOVEVSTkFMX2dldExvZ0J1ZmZlcihjbGllbnQpID8/IFtdO1xuICBpZiAobG9nQnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGNsaWVudE9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICBjb25zdCBlbnZlbG9wZSA9IGNyZWF0ZUxvZ0VudmVsb3BlKGxvZ0J1ZmZlciwgY2xpZW50T3B0aW9ucy5fbWV0YWRhdGEsIGNsaWVudE9wdGlvbnMudHVubmVsLCBjbGllbnQuZ2V0RHNuKCkpO1xuXG4gIC8vIENsZWFyIHRoZSBsb2cgYnVmZmVyIGFmdGVyIGVudmVsb3BlcyBoYXZlIGJlZW4gY29uc3RydWN0ZWQuXG4gIEdMT0JBTF9PQkouX3NlbnRyeUNsaWVudFRvTG9nQnVmZmVyTWFwPy5zZXQoY2xpZW50LCBbXSk7XG5cbiAgY2xpZW50LmVtaXQoJ2ZsdXNoTG9ncycpO1xuXG4gIC8vIHNlbmRFbnZlbG9wZSBzaG91bGQgbm90IHRocm93XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgY2xpZW50LnNlbmRFbnZlbG9wZShlbnZlbG9wZSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9nIGJ1ZmZlciBmb3IgYSBnaXZlbiBjbGllbnQuXG4gKlxuICogRXhwb3J0ZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gKlxuICogQHBhcmFtIGNsaWVudCAtIFRoZSBjbGllbnQgdG8gZ2V0IHRoZSBsb2cgYnVmZmVyIGZvci5cbiAqIEByZXR1cm5zIFRoZSBsb2cgYnVmZmVyIGZvciB0aGUgZ2l2ZW4gY2xpZW50LlxuICovXG5mdW5jdGlvbiBfSU5URVJOQUxfZ2V0TG9nQnVmZmVyKGNsaWVudCkge1xuICByZXR1cm4gR0xPQkFMX09CSi5fc2VudHJ5Q2xpZW50VG9Mb2dCdWZmZXJNYXA/LmdldChjbGllbnQpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgc2NvcGUgZGF0YSBmb3IgdGhlIGN1cnJlbnQgc2NvcGUgYWZ0ZXIgbWVyZ2luZyB3aXRoIHRoZVxuICogZ2xvYmFsIHNjb3BlIGFuZCBpc29sYXRpb24gc2NvcGUuXG4gKlxuICogQHBhcmFtIGN1cnJlbnRTY29wZSAtIFRoZSBjdXJyZW50IHNjb3BlLlxuICogQHJldHVybnMgVGhlIHNjb3BlIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1lcmdlZFNjb3BlRGF0YShjdXJyZW50U2NvcGUpIHtcbiAgY29uc3Qgc2NvcGVEYXRhID0gZ2V0R2xvYmFsU2NvcGUoKS5nZXRTY29wZURhdGEoKTtcbiAgbWVyZ2VTY29wZURhdGEoc2NvcGVEYXRhLCBnZXRJc29sYXRpb25TY29wZSgpLmdldFNjb3BlRGF0YSgpKTtcbiAgbWVyZ2VTY29wZURhdGEoc2NvcGVEYXRhLCBjdXJyZW50U2NvcGUuZ2V0U2NvcGVEYXRhKCkpO1xuICByZXR1cm4gc2NvcGVEYXRhO1xufVxuXG5leHBvcnQgeyBfSU5URVJOQUxfY2FwdHVyZUxvZywgX0lOVEVSTkFMX2NhcHR1cmVTZXJpYWxpemVkTG9nLCBfSU5URVJOQUxfZmx1c2hMb2dzQnVmZmVyLCBfSU5URVJOQUxfZ2V0TG9nQnVmZmVyLCBsb2dBdHRyaWJ1dGVUb1NlcmlhbGl6ZWRMb2dBdHRyaWJ1dGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cG9ydHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/logs/exports.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/mcp-server.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/mcp-server.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapMcpServerWithSentry: () => (/* binding */ wrapMcpServerWithSentry)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _tracing_trace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracing/trace.js */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n\n\n\n\n\n\n\n\nconst wrappedMcpServerInstances = new WeakSet();\n\n/**\n * Wraps a MCP Server instance from the `@modelcontextprotocol/sdk` package with Sentry instrumentation.\n *\n * Compatible with versions `^1.9.0` of the `@modelcontextprotocol/sdk` package.\n */\n// We are exposing this API for non-node runtimes that cannot rely on auto-instrumentation.\nfunction wrapMcpServerWithSentry(mcpServerInstance) {\n  if (wrappedMcpServerInstances.has(mcpServerInstance)) {\n    return mcpServerInstance;\n  }\n\n  if (!isMcpServerInstance(mcpServerInstance)) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warn('Did not patch MCP server. Interface is incompatible.');\n    return mcpServerInstance;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  mcpServerInstance.connect = new Proxy(mcpServerInstance.connect, {\n    apply(target, thisArg, argArray) {\n      const [transport, ...restArgs] = argArray ;\n\n      if (!transport.onclose) {\n        transport.onclose = () => {\n          if (transport.sessionId) {\n            handleTransportOnClose(transport.sessionId);\n          }\n        };\n      }\n\n      if (!transport.onmessage) {\n        transport.onmessage = jsonRpcMessage => {\n          if (transport.sessionId && isJsonRPCMessageWithRequestId(jsonRpcMessage)) {\n            handleTransportOnMessage(transport.sessionId, jsonRpcMessage.id);\n          }\n        };\n      }\n\n      const patchedTransport = new Proxy(transport, {\n        set(target, key, value) {\n          if (key === 'onmessage') {\n            target[key] = new Proxy(value, {\n              apply(onMessageTarget, onMessageThisArg, onMessageArgArray) {\n                const [jsonRpcMessage] = onMessageArgArray;\n                if (transport.sessionId && isJsonRPCMessageWithRequestId(jsonRpcMessage)) {\n                  handleTransportOnMessage(transport.sessionId, jsonRpcMessage.id);\n                }\n                return Reflect.apply(onMessageTarget, onMessageThisArg, onMessageArgArray);\n              },\n            });\n          } else if (key === 'onclose') {\n            target[key] = new Proxy(value, {\n              apply(onCloseTarget, onCloseThisArg, onCloseArgArray) {\n                if (transport.sessionId) {\n                  handleTransportOnClose(transport.sessionId);\n                }\n                return Reflect.apply(onCloseTarget, onCloseThisArg, onCloseArgArray);\n              },\n            });\n          } else {\n            target[key ] = value;\n          }\n          return true;\n        },\n      });\n\n      return Reflect.apply(target, thisArg, [patchedTransport, ...restArgs]);\n    },\n  });\n\n  mcpServerInstance.resource = new Proxy(mcpServerInstance.resource, {\n    apply(target, thisArg, argArray) {\n      const resourceName = argArray[0];\n      const resourceHandler = argArray[argArray.length - 1];\n\n      if (typeof resourceName !== 'string' || typeof resourceHandler !== 'function') {\n        return target.apply(thisArg, argArray);\n      }\n\n      const wrappedResourceHandler = new Proxy(resourceHandler, {\n        apply(resourceHandlerTarget, resourceHandlerThisArg, resourceHandlerArgArray) {\n          const extraHandlerDataWithRequestId = resourceHandlerArgArray.find(isExtraHandlerDataWithRequestId);\n          return associateContextWithRequestSpan(extraHandlerDataWithRequestId, () => {\n            return (0,_tracing_trace_js__WEBPACK_IMPORTED_MODULE_2__.startSpan)(\n              {\n                name: `mcp-server/resource:${resourceName}`,\n                forceTransaction: true,\n                attributes: {\n                  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'auto.function.mcp-server',\n                  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.mcp-server',\n                  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                  'mcp_server.resource': resourceName,\n                },\n              },\n              () => resourceHandlerTarget.apply(resourceHandlerThisArg, resourceHandlerArgArray),\n            );\n          });\n        },\n      });\n\n      return Reflect.apply(target, thisArg, [...argArray.slice(0, -1), wrappedResourceHandler]);\n    },\n  });\n\n  mcpServerInstance.tool = new Proxy(mcpServerInstance.tool, {\n    apply(target, thisArg, argArray) {\n      const toolName = argArray[0];\n      const toolHandler = argArray[argArray.length - 1];\n\n      if (typeof toolName !== 'string' || typeof toolHandler !== 'function') {\n        return target.apply(thisArg, argArray);\n      }\n\n      const wrappedToolHandler = new Proxy(toolHandler, {\n        apply(toolHandlerTarget, toolHandlerThisArg, toolHandlerArgArray) {\n          const extraHandlerDataWithRequestId = toolHandlerArgArray.find(isExtraHandlerDataWithRequestId);\n          return associateContextWithRequestSpan(extraHandlerDataWithRequestId, () => {\n            return (0,_tracing_trace_js__WEBPACK_IMPORTED_MODULE_2__.startSpan)(\n              {\n                name: `mcp-server/tool:${toolName}`,\n                forceTransaction: true,\n                attributes: {\n                  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'auto.function.mcp-server',\n                  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.mcp-server',\n                  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                  'mcp_server.tool': toolName,\n                },\n              },\n              () => toolHandlerTarget.apply(toolHandlerThisArg, toolHandlerArgArray),\n            );\n          });\n        },\n      });\n\n      return Reflect.apply(target, thisArg, [...argArray.slice(0, -1), wrappedToolHandler]);\n    },\n  });\n\n  mcpServerInstance.prompt = new Proxy(mcpServerInstance.prompt, {\n    apply(target, thisArg, argArray) {\n      const promptName = argArray[0];\n      const promptHandler = argArray[argArray.length - 1];\n\n      if (typeof promptName !== 'string' || typeof promptHandler !== 'function') {\n        return target.apply(thisArg, argArray);\n      }\n\n      const wrappedPromptHandler = new Proxy(promptHandler, {\n        apply(promptHandlerTarget, promptHandlerThisArg, promptHandlerArgArray) {\n          const extraHandlerDataWithRequestId = promptHandlerArgArray.find(isExtraHandlerDataWithRequestId);\n          return associateContextWithRequestSpan(extraHandlerDataWithRequestId, () => {\n            return (0,_tracing_trace_js__WEBPACK_IMPORTED_MODULE_2__.startSpan)(\n              {\n                name: `mcp-server/prompt:${promptName}`,\n                forceTransaction: true,\n                attributes: {\n                  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'auto.function.mcp-server',\n                  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.mcp-server',\n                  [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                  'mcp_server.prompt': promptName,\n                },\n              },\n              () => promptHandlerTarget.apply(promptHandlerThisArg, promptHandlerArgArray),\n            );\n          });\n        },\n      });\n\n      return Reflect.apply(target, thisArg, [...argArray.slice(0, -1), wrappedPromptHandler]);\n    },\n  });\n\n  wrappedMcpServerInstances.add(mcpServerInstance);\n\n  return mcpServerInstance ;\n}\n\nfunction isMcpServerInstance(mcpServerInstance) {\n  return (\n    typeof mcpServerInstance === 'object' &&\n    mcpServerInstance !== null &&\n    'resource' in mcpServerInstance &&\n    typeof mcpServerInstance.resource === 'function' &&\n    'tool' in mcpServerInstance &&\n    typeof mcpServerInstance.tool === 'function' &&\n    'prompt' in mcpServerInstance &&\n    typeof mcpServerInstance.prompt === 'function' &&\n    'connect' in mcpServerInstance &&\n    typeof mcpServerInstance.connect === 'function'\n  );\n}\n\nfunction isJsonRPCMessageWithRequestId(target) {\n  return (\n    typeof target === 'object' &&\n    target !== null &&\n    'id' in target &&\n    (typeof target.id === 'number' || typeof target.id === 'string')\n  );\n}\n\n// Note that not all versions of the MCP library have `requestId` as a field on the extra data.\nfunction isExtraHandlerDataWithRequestId(target) {\n  return (\n    typeof target === 'object' &&\n    target !== null &&\n    'sessionId' in target &&\n    typeof target.sessionId === 'string' &&\n    'requestId' in target &&\n    (typeof target.requestId === 'number' || typeof target.requestId === 'string')\n  );\n}\n\nconst sessionAndRequestToRequestParentSpanMap = new Map();\n\nfunction handleTransportOnClose(sessionId) {\n  sessionAndRequestToRequestParentSpanMap.delete(sessionId);\n}\n\nfunction handleTransportOnMessage(sessionId, requestId) {\n  const activeSpan = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.getActiveSpan)();\n  if (activeSpan) {\n    const requestIdToSpanMap = sessionAndRequestToRequestParentSpanMap.get(sessionId) ?? new Map();\n    requestIdToSpanMap.set(requestId, activeSpan);\n    sessionAndRequestToRequestParentSpanMap.set(sessionId, requestIdToSpanMap);\n  }\n}\n\nfunction associateContextWithRequestSpan(\n  extraHandlerData,\n  cb,\n) {\n  if (extraHandlerData) {\n    const { sessionId, requestId } = extraHandlerData;\n    const requestIdSpanMap = sessionAndRequestToRequestParentSpanMap.get(sessionId);\n\n    if (!requestIdSpanMap) {\n      return cb();\n    }\n\n    const span = requestIdSpanMap.get(requestId);\n    if (!span) {\n      return cb();\n    }\n\n    // remove the span from the map so it can be garbage collected\n    requestIdSpanMap.delete(requestId);\n    return (0,_tracing_trace_js__WEBPACK_IMPORTED_MODULE_2__.withActiveSpan)(span, () => {\n      return cb();\n    });\n  }\n\n  return cb();\n}\n\n\n//# sourceMappingURL=mcp-server.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/mcp-server.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/metadata.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/metadata.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addMetadataToStackFrames: () => (/* binding */ addMetadataToStackFrames),\n/* harmony export */   getMetadataForUrl: () => (/* binding */ getMetadataForUrl),\n/* harmony export */   stripMetadataFromStackFrames: () => (/* binding */ stripMetadataFromStackFrames)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n/** Keys are source filename/url, values are metadata objects. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst filenameMetadataMap = new Map();\n/** Set of stack strings that have already been parsed. */\nconst parsedStacks = new Set();\n\nfunction ensureMetadataStacksAreParsed(parser) {\n  if (!_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryModuleMetadata) {\n    return;\n  }\n\n  for (const stack of Object.keys(_utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryModuleMetadata)) {\n    const metadata = _utils_hoist_worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryModuleMetadata[stack];\n\n    if (parsedStacks.has(stack)) {\n      continue;\n    }\n\n    // Ensure this stack doesn't get parsed again\n    parsedStacks.add(stack);\n\n    const frames = parser(stack);\n\n    // Go through the frames starting from the top of the stack and find the first one with a filename\n    for (const frame of frames.reverse()) {\n      if (frame.filename) {\n        // Save the metadata for this filename\n        filenameMetadataMap.set(frame.filename, metadata);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Retrieve metadata for a specific JavaScript file URL.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadataForUrl(parser, filename) {\n  ensureMetadataStacksAreParsed(parser);\n  return filenameMetadataMap.get(filename);\n}\n\n/**\n * Adds metadata to stack frames.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\nfunction addMetadataToStackFrames(parser, event) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        if (!frame.filename || frame.module_metadata) {\n          continue;\n        }\n\n        const metadata = getMetadataForUrl(parser, frame.filename);\n\n        if (metadata) {\n          frame.module_metadata = metadata;\n        }\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Strips metadata from stack frames.\n */\nfunction stripMetadataFromStackFrames(event) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n\n      for (const frame of exception.stacktrace.frames || []) {\n        delete frame.module_metadata;\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n\n//# sourceMappingURL=metadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9tZXRhZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTyxpRUFBVTtBQUNqQjtBQUNBOztBQUVBLGtDQUFrQyxpRUFBVTtBQUM1QyxxQkFBcUIsaUVBQVU7O0FBRS9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVxRjtBQUNyRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9tZXRhZGF0YS5qcz9jN2M1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdMT0JBTF9PQkogfSBmcm9tICcuL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcyc7XG5cbi8qKiBLZXlzIGFyZSBzb3VyY2UgZmlsZW5hbWUvdXJsLCB2YWx1ZXMgYXJlIG1ldGFkYXRhIG9iamVjdHMuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3QgZmlsZW5hbWVNZXRhZGF0YU1hcCA9IG5ldyBNYXAoKTtcbi8qKiBTZXQgb2Ygc3RhY2sgc3RyaW5ncyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHBhcnNlZC4gKi9cbmNvbnN0IHBhcnNlZFN0YWNrcyA9IG5ldyBTZXQoKTtcblxuZnVuY3Rpb24gZW5zdXJlTWV0YWRhdGFTdGFja3NBcmVQYXJzZWQocGFyc2VyKSB7XG4gIGlmICghR0xPQkFMX09CSi5fc2VudHJ5TW9kdWxlTWV0YWRhdGEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGNvbnN0IHN0YWNrIG9mIE9iamVjdC5rZXlzKEdMT0JBTF9PQkouX3NlbnRyeU1vZHVsZU1ldGFkYXRhKSkge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gR0xPQkFMX09CSi5fc2VudHJ5TW9kdWxlTWV0YWRhdGFbc3RhY2tdO1xuXG4gICAgaWYgKHBhcnNlZFN0YWNrcy5oYXMoc3RhY2spKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgdGhpcyBzdGFjayBkb2Vzbid0IGdldCBwYXJzZWQgYWdhaW5cbiAgICBwYXJzZWRTdGFja3MuYWRkKHN0YWNrKTtcblxuICAgIGNvbnN0IGZyYW1lcyA9IHBhcnNlcihzdGFjayk7XG5cbiAgICAvLyBHbyB0aHJvdWdoIHRoZSBmcmFtZXMgc3RhcnRpbmcgZnJvbSB0aGUgdG9wIG9mIHRoZSBzdGFjayBhbmQgZmluZCB0aGUgZmlyc3Qgb25lIHdpdGggYSBmaWxlbmFtZVxuICAgIGZvciAoY29uc3QgZnJhbWUgb2YgZnJhbWVzLnJldmVyc2UoKSkge1xuICAgICAgaWYgKGZyYW1lLmZpbGVuYW1lKSB7XG4gICAgICAgIC8vIFNhdmUgdGhlIG1ldGFkYXRhIGZvciB0aGlzIGZpbGVuYW1lXG4gICAgICAgIGZpbGVuYW1lTWV0YWRhdGFNYXAuc2V0KGZyYW1lLmZpbGVuYW1lLCBtZXRhZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJldHJpZXZlIG1ldGFkYXRhIGZvciBhIHNwZWNpZmljIEphdmFTY3JpcHQgZmlsZSBVUkwuXG4gKlxuICogTWV0YWRhdGEgaXMgaW5qZWN0ZWQgYnkgdGhlIFNlbnRyeSBidW5kbGVyIHBsdWdpbnMgdXNpbmcgdGhlIGBfZXhwZXJpbWVudHMubW9kdWxlTWV0YWRhdGFgIGNvbmZpZyBvcHRpb24uXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBnZXRNZXRhZGF0YUZvclVybChwYXJzZXIsIGZpbGVuYW1lKSB7XG4gIGVuc3VyZU1ldGFkYXRhU3RhY2tzQXJlUGFyc2VkKHBhcnNlcik7XG4gIHJldHVybiBmaWxlbmFtZU1ldGFkYXRhTWFwLmdldChmaWxlbmFtZSk7XG59XG5cbi8qKlxuICogQWRkcyBtZXRhZGF0YSB0byBzdGFjayBmcmFtZXMuXG4gKlxuICogTWV0YWRhdGEgaXMgaW5qZWN0ZWQgYnkgdGhlIFNlbnRyeSBidW5kbGVyIHBsdWdpbnMgdXNpbmcgdGhlIGBfZXhwZXJpbWVudHMubW9kdWxlTWV0YWRhdGFgIGNvbmZpZyBvcHRpb24uXG4gKi9cbmZ1bmN0aW9uIGFkZE1ldGFkYXRhVG9TdGFja0ZyYW1lcyhwYXJzZXIsIGV2ZW50KSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICBldmVudC5leGNlcHRpb24udmFsdWVzLmZvckVhY2goZXhjZXB0aW9uID0+IHtcbiAgICAgIGlmICghZXhjZXB0aW9uLnN0YWNrdHJhY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IGZyYW1lIG9mIGV4Y2VwdGlvbi5zdGFja3RyYWNlLmZyYW1lcyB8fCBbXSkge1xuICAgICAgICBpZiAoIWZyYW1lLmZpbGVuYW1lIHx8IGZyYW1lLm1vZHVsZV9tZXRhZGF0YSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBnZXRNZXRhZGF0YUZvclVybChwYXJzZXIsIGZyYW1lLmZpbGVuYW1lKTtcblxuICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICBmcmFtZS5tb2R1bGVfbWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7XG4gICAgLy8gVG8gc2F2ZSBidW5kbGUgc2l6ZSB3ZSdyZSBqdXN0IHRyeSBjYXRjaGluZyBoZXJlIGluc3RlYWQgb2YgY2hlY2tpbmcgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYWxsIHRoZSBkaWZmZXJlbnQgb2JqZWN0cy5cbiAgfVxufVxuXG4vKipcbiAqIFN0cmlwcyBtZXRhZGF0YSBmcm9tIHN0YWNrIGZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gc3RyaXBNZXRhZGF0YUZyb21TdGFja0ZyYW1lcyhldmVudCkge1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcy5mb3JFYWNoKGV4Y2VwdGlvbiA9PiB7XG4gICAgICBpZiAoIWV4Y2VwdGlvbi5zdGFja3RyYWNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBmcmFtZSBvZiBleGNlcHRpb24uc3RhY2t0cmFjZS5mcmFtZXMgfHwgW10pIHtcbiAgICAgICAgZGVsZXRlIGZyYW1lLm1vZHVsZV9tZXRhZGF0YTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge1xuICAgIC8vIFRvIHNhdmUgYnVuZGxlIHNpemUgd2UncmUganVzdCB0cnkgY2F0Y2hpbmcgaGVyZSBpbnN0ZWFkIG9mIGNoZWNraW5nIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFsbCB0aGUgZGlmZmVyZW50IG9iamVjdHMuXG4gIH1cbn1cblxuZXhwb3J0IHsgYWRkTWV0YWRhdGFUb1N0YWNrRnJhbWVzLCBnZXRNZXRhZGF0YUZvclVybCwgc3RyaXBNZXRhZGF0YUZyb21TdGFja0ZyYW1lcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/metadata.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/scope.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/scope.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scope: () => (/* binding */ Scope)\n/* harmony export */ });\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./session.js */ \"./node_modules/@sentry/core/build/esm/session.js\");\n/* harmony import */ var _utils_merge_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/merge.js */ \"./node_modules/@sentry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/spanOnScope.js */ \"./node_modules/@sentry/core/build/esm/utils/spanOnScope.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils-hoist/misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/propagationContext.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils-hoist/string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils-hoist/time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * A context to be used for capturing an event.\n * This can either be a Scope, or a partial ScopeContext,\n * or a callback that receives the current scope and returns a new scope to use.\n */\n\n/**\n * Holds additional event information.\n */\nclass Scope {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called during event processing. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /** Propagation Context for distributed tracing */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n\n  /** Session */\n\n  /** The client on this scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n   constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateTraceId)(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  /**\n   * Clone all data from this scope into a new scope.\n   */\n   clone() {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values],\n      };\n    }\n\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n\n    (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__._setSpanForScope)(newScope, (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__._getSpanForScope)(this));\n\n    return newScope;\n  }\n\n  /**\n   * Update the client assigned to this scope.\n   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,\n   * as well as manually created scopes.\n   */\n   setClient(client) {\n    this._client = client;\n  }\n\n  /**\n   * Set the ID of the last captured error event.\n   * This is generally only captured on the isolation scope.\n   */\n   setLastEventId(lastEventId) {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   */\n   getClient() {\n    return this._client ;\n  }\n\n  /**\n   * Get the ID of the last captured error event.\n   * This is generally only available on the isolation scope.\n   */\n   lastEventId() {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   addScopeListener(callback) {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * Add an event processor that will be called before an event is sent.\n   */\n   addEventProcessor(callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * Set the user for this scope.\n   * Set to `null` to unset the user.\n   */\n   setUser(user) {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      (0,_session_js__WEBPACK_IMPORTED_MODULE_2__.updateSession)(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the user from this scope.\n   */\n   getUser() {\n    return this._user;\n  }\n\n  /**\n   * Set an object that will be merged into existing tags on the scope,\n   * and will be sent as tags data with the event.\n   */\n   setTags(tags) {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single tag that will be sent as tags data with the event.\n   */\n   setTag(key, value) {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set an object that will be merged into existing extra on the scope,\n   * and will be sent as extra data with the event.\n   */\n   setExtras(extras) {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single key:value extra entry that will be sent as extra data with the event.\n   */\n   setExtra(key, extra) {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param {string[]} fingerprint Fingerprint to group events in Sentry.\n   */\n   setFingerprint(fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   */\n   setLevel(level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */\n   setTransactionName(name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets context data with the given name.\n   * Data passed as context will be normalized. You can also pass `null` to unset the context.\n   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.\n   */\n   setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set the session for the scope.\n   */\n   setSession(session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the session from the scope.\n   */\n   getSession() {\n    return this._session;\n  }\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   */\n   update(captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    const scopeInstance =\n      scopeToMerge instanceof Scope\n        ? scopeToMerge.getScopeData()\n        : (0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(scopeToMerge)\n          ? (captureContext )\n          : undefined;\n\n    const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};\n\n    this._tags = { ...this._tags, ...tags };\n    this._extra = { ...this._extra, ...extra };\n    this._contexts = { ...this._contexts, ...contexts };\n\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n\n    if (level) {\n      this._level = level;\n    }\n\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the current scope and resets its properties.\n   * Note: The client will not be cleared.\n   */\n   clear() {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._session = undefined;\n    (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__._setSpanForScope)(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({ traceId: (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateTraceId)(), sampleRand: Math.random() });\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Adds a breadcrumb to the scope.\n   * By default, the last 100 breadcrumbs are kept.\n   */\n   addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_4__.dateTimestampInSeconds)(),\n      ...breadcrumb,\n      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory\n      message: breadcrumb.message ? (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_5__.truncate)(breadcrumb.message, 2048) : breadcrumb.message,\n    };\n\n    this._breadcrumbs.push(mergedBreadcrumb);\n    if (this._breadcrumbs.length > maxCrumbs) {\n      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n      this._client?.recordDroppedEvent('buffer_overflow', 'log_item');\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * Get the last breadcrumb of the scope.\n   */\n   getLastBreadcrumb() {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * Clear all breadcrumbs from the scope.\n   */\n   clearBreadcrumbs() {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Add an attachment to the scope.\n   */\n   addAttachment(attachment) {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * Clear all attachments from the scope.\n   */\n   clearAttachments() {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Get the data of this scope, which should be applied to an event during processing.\n   */\n   getScopeData() {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_1__._getSpanForScope)(this),\n    };\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry.\n   */\n   setSDKProcessingMetadata(newData) {\n    this._sdkProcessingMetadata = (0,_utils_merge_js__WEBPACK_IMPORTED_MODULE_6__.merge)(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * Add propagation context to the scope, used for distributed tracing\n   */\n   setPropagationContext(context) {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * Get propagation context from the scope, used for distributed tracing\n   */\n   getPropagationContext() {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @returns {string} The id of the captured Sentry event.\n   */\n   captureException(exception, hint) {\n    const eventId = hint?.event_id || (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_7__.uuid4)();\n\n    if (!this._client) {\n      _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_8__.logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @returns {string} The id of the captured message.\n   */\n   captureMessage(message, level, hint) {\n    const eventId = hint?.event_id || (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_7__.uuid4)();\n\n    if (!this._client) {\n      _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_8__.logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a Sentry event for this scope.\n   *\n   * @returns {string} The id of the captured event.\n   */\n   captureEvent(event, hint) {\n    const eventId = hint?.event_id || (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_7__.uuid4)();\n\n    if (!this._client) {\n      _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_8__.logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n   _notifyScopeListeners() {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n\n\n//# sourceMappingURL=scope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/scope.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/sdk.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/sdk.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initAndBind: () => (/* binding */ initAndBind),\n/* harmony export */   setCurrentClient: () => (/* binding */ setCurrentClient)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(\n  clientClass,\n  options,\n) {\n  if (options.debug === true) {\n    if (_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD) {\n      _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      (0,_utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_1__.consoleSandbox)(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_2__.getCurrentScope)();\n  scope.update(options.initialScope);\n\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  client.init();\n  return client;\n}\n\n/**\n * Make the given client the current client.\n */\nfunction setCurrentClient(client) {\n  (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_2__.getCurrentScope)().setClient(client);\n}\n\n\n//# sourceMappingURL=sdk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9zZGsuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBcUQ7QUFDTjtBQUNrQjs7QUFFakU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx3REFBVztBQUNuQixNQUFNLDBEQUFNO0FBQ1osTUFBTTtBQUNOO0FBQ0EsTUFBTSxzRUFBYztBQUNwQjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxnQkFBZ0Isa0VBQWU7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsa0VBQWU7QUFDakI7O0FBRXlDO0FBQ3pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3Nkay5qcz81ODI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEN1cnJlbnRTY29wZSB9IGZyb20gJy4vY3VycmVudFNjb3Blcy5qcyc7XG5pbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgbG9nZ2VyLCBjb25zb2xlU2FuZGJveCB9IGZyb20gJy4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJztcblxuLyoqIEEgY2xhc3Mgb2JqZWN0IHRoYXQgY2FuIGluc3RhbnRpYXRlIENsaWVudCBvYmplY3RzLiAqL1xuXG4vKipcbiAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG5ldyBTREsgY2xpZW50IGluc3RhbmNlLiBUaGUgY2xpZW50IGlzXG4gKiBpbnN0YWxsZWQgYW5kIHRoZW4gYm91bmQgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gKlxuICogQHBhcmFtIGNsaWVudENsYXNzIFRoZSBjbGllbnQgY2xhc3MgdG8gaW5zdGFudGlhdGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3MgdG8gdGhlIGNsaWVudC5cbiAqL1xuZnVuY3Rpb24gaW5pdEFuZEJpbmQoXG4gIGNsaWVudENsYXNzLFxuICBvcHRpb25zLFxuKSB7XG4gIGlmIChvcHRpb25zLmRlYnVnID09PSB0cnVlKSB7XG4gICAgaWYgKERFQlVHX0JVSUxEKSB7XG4gICAgICBsb2dnZXIuZW5hYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZSBgY29uc29sZS53YXJuYCByYXRoZXIgdGhhbiBgbG9nZ2VyLndhcm5gIHNpbmNlIGJ5IG5vbi1kZWJ1ZyBidW5kbGVzIGhhdmUgYWxsIGBsb2dnZXIueGAgc3RhdGVtZW50cyBzdHJpcHBlZFxuICAgICAgY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ1tTZW50cnldIENhbm5vdCBpbml0aWFsaXplIFNESyB3aXRoIGBkZWJ1Z2Agb3B0aW9uIHVzaW5nIGEgbm9uLWRlYnVnIGJ1bmRsZS4nKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBjb25zdCBzY29wZSA9IGdldEN1cnJlbnRTY29wZSgpO1xuICBzY29wZS51cGRhdGUob3B0aW9ucy5pbml0aWFsU2NvcGUpO1xuXG4gIGNvbnN0IGNsaWVudCA9IG5ldyBjbGllbnRDbGFzcyhvcHRpb25zKTtcbiAgc2V0Q3VycmVudENsaWVudChjbGllbnQpO1xuICBjbGllbnQuaW5pdCgpO1xuICByZXR1cm4gY2xpZW50O1xufVxuXG4vKipcbiAqIE1ha2UgdGhlIGdpdmVuIGNsaWVudCB0aGUgY3VycmVudCBjbGllbnQuXG4gKi9cbmZ1bmN0aW9uIHNldEN1cnJlbnRDbGllbnQoY2xpZW50KSB7XG4gIGdldEN1cnJlbnRTY29wZSgpLnNldENsaWVudChjbGllbnQpO1xufVxuXG5leHBvcnQgeyBpbml0QW5kQmluZCwgc2V0Q3VycmVudENsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/sdk.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/semanticAttributes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/semanticAttributes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SEMANTIC_ATTRIBUTE_CACHE_HIT: () => (/* binding */ SEMANTIC_ATTRIBUTE_CACHE_HIT),\n/* harmony export */   SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE: () => (/* binding */ SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_CACHE_KEY: () => (/* binding */ SEMANTIC_ATTRIBUTE_CACHE_KEY),\n/* harmony export */   SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME: () => (/* binding */ SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME),\n/* harmony export */   SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD: () => (/* binding */ SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD),\n/* harmony export */   SEMANTIC_ATTRIBUTE_PROFILE_ID: () => (/* binding */ SEMANTIC_ATTRIBUTE_PROFILE_ID),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_OP: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_OP),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_SOURCE: () => (/* binding */ SEMANTIC_ATTRIBUTE_SENTRY_SOURCE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_URL_FULL: () => (/* binding */ SEMANTIC_ATTRIBUTE_URL_FULL),\n/* harmony export */   SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE: () => (/* binding */ SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE)\n/* harmony export */ });\n/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Attributes that holds the sample rate that was locally applied to a span.\n * If this attribute is not defined, it means that the span inherited a sampling decision.\n *\n * NOTE: Is only defined on root spans.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Attribute holding the sample rate of the previous trace.\n * This is used to sample consistently across subsequent traces in the browser SDK.\n *\n * Note: Only defined on root spans, if opted into consistent sampling\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE = 'sentry.previous_trace_sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/** The reason why an idle span finished. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';\n\n/** The unit of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';\n\n/** The value of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';\n\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';\n\n/**\n * The id of the profile that this span occurred in.\n */\nconst SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';\n\nconst SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';\n\nconst SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';\n\nconst SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';\n\nconst SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';\n\n/** TODO: Remove these once we update to latest semantic conventions */\nconst SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';\nconst SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';\n\n/**\n * A span link attribute to mark the link as a special span link.\n *\n * Known values:\n * - `previous_trace`: The span links to the frontend root span of the previous trace.\n * - `next_trace`: The span links to the frontend root span of the next trace. (Not set by the SDK)\n *\n * Other values may be set as appropriate.\n * @see https://develop.sentry.dev/sdk/telemetry/traces/span-links/#link-types\n */\nconst SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = 'sentry.link.type';\n\n\n//# sourceMappingURL=semanticAttributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9zZW1hbnRpY0F0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMm9CO0FBQzNvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS9zZW1hbnRpY0F0dHJpYnV0ZXMuanM/ZWJmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSB0aGlzIGF0dHJpYnV0ZSB0byByZXByZXNlbnQgdGhlIHNvdXJjZSBvZiBhIHNwYW4uXG4gKiBTaG91bGQgYmUgb25lIG9mOiBjdXN0b20sIHVybCwgcm91dGUsIHZpZXcsIGNvbXBvbmVudCwgdGFzaywgdW5rbm93blxuICpcbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UgPSAnc2VudHJ5LnNvdXJjZSc7XG5cbi8qKlxuICogQXR0cmlidXRlcyB0aGF0IGhvbGRzIHRoZSBzYW1wbGUgcmF0ZSB0aGF0IHdhcyBsb2NhbGx5IGFwcGxpZWQgdG8gYSBzcGFuLlxuICogSWYgdGhpcyBhdHRyaWJ1dGUgaXMgbm90IGRlZmluZWQsIGl0IG1lYW5zIHRoYXQgdGhlIHNwYW4gaW5oZXJpdGVkIGEgc2FtcGxpbmcgZGVjaXNpb24uXG4gKlxuICogTk9URTogSXMgb25seSBkZWZpbmVkIG9uIHJvb3Qgc3BhbnMuXG4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEUgPSAnc2VudHJ5LnNhbXBsZV9yYXRlJztcblxuLyoqXG4gKiBBdHRyaWJ1dGUgaG9sZGluZyB0aGUgc2FtcGxlIHJhdGUgb2YgdGhlIHByZXZpb3VzIHRyYWNlLlxuICogVGhpcyBpcyB1c2VkIHRvIHNhbXBsZSBjb25zaXN0ZW50bHkgYWNyb3NzIHN1YnNlcXVlbnQgdHJhY2VzIGluIHRoZSBicm93c2VyIFNESy5cbiAqXG4gKiBOb3RlOiBPbmx5IGRlZmluZWQgb24gcm9vdCBzcGFucywgaWYgb3B0ZWQgaW50byBjb25zaXN0ZW50IHNhbXBsaW5nXG4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfUFJFVklPVVNfVFJBQ0VfU0FNUExFX1JBVEUgPSAnc2VudHJ5LnByZXZpb3VzX3RyYWNlX3NhbXBsZV9yYXRlJztcblxuLyoqXG4gKiBVc2UgdGhpcyBhdHRyaWJ1dGUgdG8gcmVwcmVzZW50IHRoZSBvcGVyYXRpb24gb2YgYSBzcGFuLlxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QID0gJ3NlbnRyeS5vcCc7XG5cbi8qKlxuICogVXNlIHRoaXMgYXR0cmlidXRlIHRvIHJlcHJlc2VudCB0aGUgb3JpZ2luIG9mIGEgc3Bhbi5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4gPSAnc2VudHJ5Lm9yaWdpbic7XG5cbi8qKiBUaGUgcmVhc29uIHdoeSBhbiBpZGxlIHNwYW4gZmluaXNoZWQuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0lETEVfU1BBTl9GSU5JU0hfUkVBU09OID0gJ3NlbnRyeS5pZGxlX3NwYW5fZmluaXNoX3JlYXNvbic7XG5cbi8qKiBUaGUgdW5pdCBvZiBhIG1lYXN1cmVtZW50LCB3aGljaCBtYXkgYmUgc3RvcmVkIGFzIGEgVGltZWRFdmVudC4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVCA9ICdzZW50cnkubWVhc3VyZW1lbnRfdW5pdCc7XG5cbi8qKiBUaGUgdmFsdWUgb2YgYSBtZWFzdXJlbWVudCwgd2hpY2ggbWF5IGJlIHN0b3JlZCBhcyBhIFRpbWVkRXZlbnQuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFID0gJ3NlbnRyeS5tZWFzdXJlbWVudF92YWx1ZSc7XG5cbi8qKlxuICogQSBjdXN0b20gc3BhbiBuYW1lIHNldCBieSB1c2VycyBndWFyYW50ZWVkIHRvIGJlIHRha2VuIG92ZXIgYW55IGF1dG9tYXRpY2FsbHlcbiAqIGluZmVycmVkIG5hbWUuIFRoaXMgYXR0cmlidXRlIGlzIHJlbW92ZWQgYmVmb3JlIHRoZSBzcGFuIGlzIHNlbnQuXG4gKlxuICogQGludGVybmFsIG9ubHkgbWVhbnQgZm9yIGludGVybmFsIFNESyB1c2FnZVxuICogQGhpZGRlblxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUUgPSAnc2VudHJ5LmN1c3RvbV9zcGFuX25hbWUnO1xuXG4vKipcbiAqIFRoZSBpZCBvZiB0aGUgcHJvZmlsZSB0aGF0IHRoaXMgc3BhbiBvY2N1cnJlZCBpbi5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQgPSAnc2VudHJ5LnByb2ZpbGVfaWQnO1xuXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUUgPSAnc2VudHJ5LmV4Y2x1c2l2ZV90aW1lJztcblxuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVCA9ICdjYWNoZS5oaXQnO1xuXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZID0gJ2NhY2hlLmtleSc7XG5cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUgPSAnY2FjaGUuaXRlbV9zaXplJztcblxuLyoqIFRPRE86IFJlbW92ZSB0aGVzZSBvbmNlIHdlIHVwZGF0ZSB0byBsYXRlc3Qgc2VtYW50aWMgY29udmVudGlvbnMgKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9IVFRQX1JFUVVFU1RfTUVUSE9EID0gJ2h0dHAucmVxdWVzdC5tZXRob2QnO1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMID0gJ3VybC5mdWxsJztcblxuLyoqXG4gKiBBIHNwYW4gbGluayBhdHRyaWJ1dGUgdG8gbWFyayB0aGUgbGluayBhcyBhIHNwZWNpYWwgc3BhbiBsaW5rLlxuICpcbiAqIEtub3duIHZhbHVlczpcbiAqIC0gYHByZXZpb3VzX3RyYWNlYDogVGhlIHNwYW4gbGlua3MgdG8gdGhlIGZyb250ZW5kIHJvb3Qgc3BhbiBvZiB0aGUgcHJldmlvdXMgdHJhY2UuXG4gKiAtIGBuZXh0X3RyYWNlYDogVGhlIHNwYW4gbGlua3MgdG8gdGhlIGZyb250ZW5kIHJvb3Qgc3BhbiBvZiB0aGUgbmV4dCB0cmFjZS4gKE5vdCBzZXQgYnkgdGhlIFNESylcbiAqXG4gKiBPdGhlciB2YWx1ZXMgbWF5IGJlIHNldCBhcyBhcHByb3ByaWF0ZS5cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL3RlbGVtZXRyeS90cmFjZXMvc3Bhbi1saW5rcy8jbGluay10eXBlc1xuICovXG5jb25zdCBTRU1BTlRJQ19MSU5LX0FUVFJJQlVURV9MSU5LX1RZUEUgPSAnc2VudHJ5LmxpbmsudHlwZSc7XG5cbmV4cG9ydCB7IFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQsIFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUsIFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9LRVksIFNFTUFOVElDX0FUVFJJQlVURV9FWENMVVNJVkVfVElNRSwgU0VNQU5USUNfQVRUUklCVVRFX0hUVFBfUkVRVUVTVF9NRVRIT0QsIFNFTUFOVElDX0FUVFJJQlVURV9QUk9GSUxFX0lELCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUUsIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfSURMRV9TUEFOX0ZJTklTSF9SRUFTT04sIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVCwgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRSwgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCwgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfUFJFVklPVVNfVFJBQ0VfU0FNUExFX1JBVEUsIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEUsIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFLCBTRU1BTlRJQ19BVFRSSUJVVEVfVVJMX0ZVTEwsIFNFTUFOVElDX0xJTktfQVRUUklCVVRFX0xJTktfVFlQRSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VtYW50aWNBdHRyaWJ1dGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/semanticAttributes.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/server-runtime-client.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/server-runtime-client.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerRuntimeClient: () => (/* binding */ ServerRuntimeClient)\n/* harmony export */ });\n/* harmony import */ var _checkin_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./checkin.js */ \"./node_modules/@sentry/core/build/esm/checkin.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client.js */ \"./node_modules/@sentry/core/build/esm/client.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _logs_exports_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logs/exports.js */ \"./node_modules/@sentry/core/build/esm/logs/exports.js\");\n/* harmony import */ var _tracing_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracing/errors.js */ \"./node_modules/@sentry/core/build/esm/tracing/errors.js\");\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils-hoist/misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_eventbuilder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-hoist/eventbuilder.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/eventbuilder.js\");\n/* harmony import */ var _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n// TODO: Make this configurable\nconst DEFAULT_LOG_FLUSH_INTERVAL = 5000;\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nclass ServerRuntimeClient\n\n extends _client_js__WEBPACK_IMPORTED_MODULE_0__.Client {\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n   constructor(options) {\n    // Server clients always support tracing\n    (0,_tracing_errors_js__WEBPACK_IMPORTED_MODULE_1__.registerSpanErrorInstrumentation)();\n\n    super(options);\n\n    this._logWeight = 0;\n\n    if (this._options._experiments?.enableLogs) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const client = this;\n\n      client.on('flushLogs', () => {\n        client._logWeight = 0;\n        clearTimeout(client._logFlushIdleTimeout);\n      });\n\n      client.on('afterCaptureLog', log => {\n        client._logWeight += estimateLogSizeInBytes(log);\n\n        // We flush the logs buffer if it exceeds 0.8 MB\n        // The log weight is a rough estimate, so we flush way before\n        // the payload gets too big.\n        if (client._logWeight >= 800000) {\n          (0,_logs_exports_js__WEBPACK_IMPORTED_MODULE_2__._INTERNAL_flushLogsBuffer)(client);\n        } else {\n          // start an idle timeout to flush the logs buffer if no logs are captured for a while\n          client._logFlushIdleTimeout = setTimeout(() => {\n            (0,_logs_exports_js__WEBPACK_IMPORTED_MODULE_2__._INTERNAL_flushLogsBuffer)(client);\n          }, DEFAULT_LOG_FLUSH_INTERVAL);\n        }\n      });\n\n      client.on('flush', () => {\n        (0,_logs_exports_js__WEBPACK_IMPORTED_MODULE_2__._INTERNAL_flushLogsBuffer)(client);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   eventFromException(exception, hint) {\n    const event = (0,_utils_hoist_eventbuilder_js__WEBPACK_IMPORTED_MODULE_3__.eventFromUnknownInput)(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n\n    return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_4__.resolvedSyncPromise)(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   eventFromMessage(\n    message,\n    level = 'info',\n    hint,\n  ) {\n    return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_4__.resolvedSyncPromise)(\n      (0,_utils_hoist_eventbuilder_js__WEBPACK_IMPORTED_MODULE_3__.eventFromMessage)(this._options.stackParser, message, level, hint, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n   captureException(exception, hint, scope) {\n    setCurrentRequestSessionErroredOrCrashed(hint);\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   captureEvent(event, hint, scope) {\n    // If the event is of type Exception, then a request session should be captured\n    const isException = !event.type && event.exception?.values && event.exception.values.length > 0;\n    if (isException) {\n      setCurrentRequestSessionErroredOrCrashed(hint);\n    }\n\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n   captureCheckIn(checkIn, monitorConfig, scope) {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_5__.uuid4)();\n    if (!this._isEnabled()) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.warn('SDK not enabled, will not capture check-in.');\n      return id;\n    }\n\n    const options = this.getOptions();\n    const { release, environment, tunnel } = options;\n\n    const serializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment,\n    };\n\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold,\n      };\n    }\n\n    const [dynamicSamplingContext, traceContext] = (0,_client_js__WEBPACK_IMPORTED_MODULE_0__._getTraceInfoFromScope)(this, scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext,\n      };\n    }\n\n    const envelope = (0,_checkin_js__WEBPACK_IMPORTED_MODULE_8__.createCheckInEnvelope)(\n      serializedCheckIn,\n      dynamicSamplingContext,\n      this.getSdkMetadata(),\n      tunnel,\n      this.getDsn(),\n    );\n\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.info('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n\n    return id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   _prepareEvent(\n    event,\n    hint,\n    currentScope,\n    isolationScope,\n  ) {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: event.contexts?.runtime || this._options.runtime,\n      };\n    }\n\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n\n    return super._prepareEvent(event, hint, currentScope, isolationScope);\n  }\n}\n\nfunction setCurrentRequestSessionErroredOrCrashed(eventHint) {\n  const requestSession = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_9__.getIsolationScope)().getScopeData().sdkProcessingMetadata.requestSession;\n  if (requestSession) {\n    // We mutate instead of doing `setSdkProcessingMetadata` because the http integration stores away a particular\n    // isolationScope. If that isolation scope is forked, setting the processing metadata here will not mutate the\n    // original isolation scope that the http integration stored away.\n    const isHandledException = eventHint?.mechanism?.handled ?? true;\n    // A request session can go from \"errored\" -> \"crashed\" but not \"crashed\" -> \"errored\".\n    // Crashed (unhandled exception) is worse than errored (handled exception).\n    if (isHandledException && requestSession.status !== 'crashed') {\n      requestSession.status = 'errored';\n    } else if (!isHandledException) {\n      requestSession.status = 'crashed';\n    }\n  }\n}\n\n/**\n * Estimate the size of a log in bytes.\n *\n * @param log - The log to estimate the size of.\n * @returns The estimated size of the log in bytes.\n */\nfunction estimateLogSizeInBytes(log) {\n  let weight = 0;\n\n  // Estimate byte size of 2 bytes per character. This is a rough estimate JS strings are stored as UTF-16.\n  if (log.message) {\n    weight += log.message.length * 2;\n  }\n\n  if (log.attributes) {\n    Object.values(log.attributes).forEach(value => {\n      if (Array.isArray(value)) {\n        weight += value.length * estimatePrimitiveSizeInBytes(value[0]);\n      } else if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_10__.isPrimitive)(value)) {\n        weight += estimatePrimitiveSizeInBytes(value);\n      } else {\n        // For objects values, we estimate the size of the object as 100 bytes\n        weight += 100;\n      }\n    });\n  }\n\n  return weight;\n}\n\nfunction estimatePrimitiveSizeInBytes(value) {\n  if (typeof value === 'string') {\n    return value.length * 2;\n  } else if (typeof value === 'number') {\n    return 8;\n  } else if (typeof value === 'boolean') {\n    return 4;\n  }\n\n  return 0;\n}\n\n\n//# sourceMappingURL=server-runtime-client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/server-runtime-client.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/session.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/session.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeSession: () => (/* binding */ closeSession),\n/* harmony export */   makeSession: () => (/* binding */ makeSession),\n/* harmony export */   updateSession: () => (/* binding */ updateSession)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-hoist/misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-hoist/time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n\n\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_0__.timestampInSeconds)();\n\n  const session = {\n    sid: (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see Client.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session, context = {}) {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_0__.timestampInSeconds)();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_1__.uuid4)();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return {\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  };\n}\n\n\n//# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/session.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   freezeDscOnSpan: () => (/* binding */ freezeDscOnSpan),\n/* harmony export */   getDynamicSamplingContextFromClient: () => (/* binding */ getDynamicSamplingContextFromClient),\n/* harmony export */   getDynamicSamplingContextFromScope: () => (/* binding */ getDynamicSamplingContextFromScope),\n/* harmony export */   getDynamicSamplingContextFromSpan: () => (/* binding */ getDynamicSamplingContextFromSpan),\n/* harmony export */   spanToBaggageHeader: () => (/* binding */ spanToBaggageHeader)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@sentry/core/build/esm/constants.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_hasSpansEnabled_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/hasSpansEnabled.js */ \"./node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils-hoist/baggage.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js\");\n/* harmony import */ var _utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/dsn.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */\nconst FROZEN_DSC_FIELD = '_frozenDsc';\n\n/**\n * Freeze the given DSC on the given span.\n */\nfunction freezeDscOnSpan(span, dsc) {\n  const spanWithMaybeDsc = span ;\n  (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.addNonEnumerableProperty)(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nfunction getDynamicSamplingContextFromClient(trace_id, client) {\n  const options = client.getOptions();\n\n  const { publicKey: public_key, host } = client.getDsn() || {};\n\n  let org_id;\n  if (options.orgId) {\n    org_id = String(options.orgId);\n  } else if (host) {\n    org_id = (0,_utils_hoist_dsn_js__WEBPACK_IMPORTED_MODULE_1__.extractOrgIdFromDsnHost)(host);\n  }\n\n  // Instead of conditionally adding non-undefined values, we add them and then remove them if needed\n  // otherwise, the order of baggage entries changes, which \"breaks\" a bunch of tests etc.\n  const dsc = {\n    environment: options.environment || _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_ENVIRONMENT,\n    release: options.release,\n    public_key,\n    trace_id,\n    org_id,\n  };\n\n  client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */\nfunction getDynamicSamplingContextFromScope(client, scope) {\n  const propagationContext = scope.getPropagationContext();\n  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nfunction getDynamicSamplingContextFromSpan(span) {\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_3__.getClient)();\n  if (!client) {\n    return {};\n  }\n\n  const rootSpan = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.getRootSpan)(span);\n  const rootSpanJson = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.spanToJSON)(rootSpan);\n  const rootSpanAttributes = rootSpanJson.data;\n  const traceState = rootSpan.spanContext().traceState;\n\n  // The span sample rate that was locally applied to the root span should also always be applied to the DSC, even if the DSC is frozen.\n  // This is so that the downstream traces/services can use parentSampleRate in their `tracesSampler` to make consistent sampling decisions across the entire trace.\n  const rootSpanSampleRate =\n    traceState?.get('sentry.sample_rate') ??\n    rootSpanAttributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ??\n    rootSpanAttributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE];\n\n  function applyLocalSampleRateToDsc(dsc) {\n    if (typeof rootSpanSampleRate === 'number' || typeof rootSpanSampleRate === 'string') {\n      dsc.sample_rate = `${rootSpanSampleRate}`;\n    }\n    return dsc;\n  }\n\n  // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n  const frozenDsc = (rootSpan )[FROZEN_DSC_FIELD];\n  if (frozenDsc) {\n    return applyLocalSampleRateToDsc(frozenDsc);\n  }\n\n  // For OpenTelemetry, we freeze the DSC on the trace state\n  const traceStateDsc = traceState?.get('sentry.dsc');\n\n  // If the span has a DSC, we want it to take precedence\n  const dscOnTraceState = traceStateDsc && (0,_utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_6__.baggageHeaderToDynamicSamplingContext)(traceStateDsc);\n\n  if (dscOnTraceState) {\n    return applyLocalSampleRateToDsc(dscOnTraceState);\n  }\n\n  // Else, we generate it from the span\n  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const source = rootSpanAttributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  const name = rootSpanJson.description;\n  if (source !== 'url' && name) {\n    dsc.transaction = name;\n  }\n\n  // How can we even land here with hasSpansEnabled() returning false?\n  // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n  // So we end up with an active span that is not sampled (neither positively nor negatively)\n  if ((0,_utils_hasSpansEnabled_js__WEBPACK_IMPORTED_MODULE_7__.hasSpansEnabled)()) {\n    dsc.sampled = String((0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.spanIsSampled)(rootSpan));\n    dsc.sample_rand =\n      // In OTEL we store the sample rand on the trace state because we cannot access scopes for NonRecordingSpans\n      // The Sentry OTEL SpanSampler takes care of writing the sample rand on the root span\n      traceState?.get('sentry.sample_rand') ??\n      // On all other platforms we can actually get the scopes from a root span (we use this as a fallback)\n      (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.getCapturedScopesOnSpan)(rootSpan).scope?.getPropagationContext().sampleRand.toString();\n  }\n\n  applyLocalSampleRateToDsc(dsc);\n\n  client.emit('createDsc', dsc, rootSpan);\n\n  return dsc;\n}\n\n/**\n * Convert a Span to a baggage header.\n */\nfunction spanToBaggageHeader(span) {\n  const dsc = getDynamicSamplingContextFromSpan(span);\n  return (0,_utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_6__.dynamicSamplingContextToSentryBaggageHeader)(dsc);\n}\n\n\n//# sourceMappingURL=dynamicSamplingContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/errors.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/errors.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registerSpanErrorInstrumentation: () => (/* binding */ registerSpanErrorInstrumentation)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_hoist_instrument_globalError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/instrument/globalError.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalError.js\");\n/* harmony import */ var _utils_hoist_instrument_globalUnhandledRejection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/instrument/globalUnhandledRejection.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalUnhandledRejection.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _spanstatus_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./spanstatus.js */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n\n\n\n\n\n\n\nlet errorsInstrumented = false;\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nfunction registerSpanErrorInstrumentation() {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  (0,_utils_hoist_instrument_globalError_js__WEBPACK_IMPORTED_MODULE_0__.addGlobalErrorInstrumentationHandler)(errorCallback);\n  (0,_utils_hoist_instrument_globalUnhandledRejection_js__WEBPACK_IMPORTED_MODULE_1__.addGlobalUnhandledRejectionInstrumentationHandler)(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active root span as failed\n */\nfunction errorCallback() {\n  const activeSpan = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_2__.getActiveSpan)();\n  const rootSpan = activeSpan && (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_2__.getRootSpan)(activeSpan);\n  if (rootSpan) {\n    const message = 'internal_error';\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_3__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_4__.logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n    rootSpan.setStatus({ code: _spanstatus_js__WEBPACK_IMPORTED_MODULE_5__.SPAN_STATUS_ERROR, message });\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n\n\n//# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFjaW5nL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWdEO0FBQ21CO0FBQzZCO0FBQzBCO0FBQ3hFO0FBQ0U7O0FBRXBEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRSw0R0FBb0M7QUFDdEMsRUFBRSxzSUFBaUQ7QUFDbkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0VBQWE7QUFDbEMsaUNBQWlDLGdFQUFXO0FBQzVDO0FBQ0E7QUFDQSxJQUFJLHdEQUFXLElBQUksMERBQU0sNkJBQTZCLFNBQVM7QUFDL0QseUJBQXlCLE1BQU0sNkRBQWlCLFdBQVc7QUFDM0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRTRDO0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNpbmcvZXJyb3JzLmpzPzM1ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBnZXRBY3RpdmVTcGFuLCBnZXRSb290U3BhbiB9IGZyb20gJy4uL3V0aWxzL3NwYW5VdGlscy5qcyc7XG5pbXBvcnQgeyBhZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXIgfSBmcm9tICcuLi91dGlscy1ob2lzdC9pbnN0cnVtZW50L2dsb2JhbEVycm9yLmpzJztcbmltcG9ydCB7IGFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIgfSBmcm9tICcuLi91dGlscy1ob2lzdC9pbnN0cnVtZW50L2dsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuaW1wb3J0IHsgU1BBTl9TVEFUVVNfRVJST1IgfSBmcm9tICcuL3NwYW5zdGF0dXMuanMnO1xuXG5sZXQgZXJyb3JzSW5zdHJ1bWVudGVkID0gZmFsc2U7XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgZ2xvYmFsIGVycm9ycyBhdXRvbWF0aWNhbGx5IHNldCB0aGUgYWN0aXZlIHNwYW4gc3RhdHVzLlxuICovXG5mdW5jdGlvbiByZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbigpIHtcbiAgaWYgKGVycm9yc0luc3RydW1lbnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVycm9yc0luc3RydW1lbnRlZCA9IHRydWU7XG4gIGFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlcihlcnJvckNhbGxiYWNrKTtcbiAgYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlcihlcnJvckNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBJZiBhbiBlcnJvciBvciB1bmhhbmRsZWQgcHJvbWlzZSBvY2N1cnMsIHdlIG1hcmsgdGhlIGFjdGl2ZSByb290IHNwYW4gYXMgZmFpbGVkXG4gKi9cbmZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soKSB7XG4gIGNvbnN0IGFjdGl2ZVNwYW4gPSBnZXRBY3RpdmVTcGFuKCk7XG4gIGNvbnN0IHJvb3RTcGFuID0gYWN0aXZlU3BhbiAmJiBnZXRSb290U3BhbihhY3RpdmVTcGFuKTtcbiAgaWYgKHJvb3RTcGFuKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9ICdpbnRlcm5hbF9lcnJvcic7XG4gICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZyhgW1RyYWNpbmddIFJvb3Qgc3BhbjogJHttZXNzYWdlfSAtPiBHbG9iYWwgZXJyb3Igb2NjdXJyZWRgKTtcbiAgICByb290U3Bhbi5zZXRTdGF0dXMoeyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZSB9KTtcbiAgfVxufVxuXG4vLyBUaGUgZnVuY3Rpb24gbmFtZSB3aWxsIGJlIGxvc3Qgd2hlbiBidW5kbGluZyBidXQgd2UgbmVlZCB0byBiZSBhYmxlIHRvIGlkZW50aWZ5IHRoaXMgbGlzdGVuZXIgbGF0ZXIgdG8gbWFpbnRhaW4gdGhlXG4vLyBub2RlLmpzIGRlZmF1bHQgZXhpdCBiZWhhdmlvdXJcbmVycm9yQ2FsbGJhY2sudGFnID0gJ3NlbnRyeV90cmFjaW5nRXJyb3JDYWxsYmFjayc7XG5cbmV4cG9ydCB7IHJlZ2lzdGVyU3BhbkVycm9ySW5zdHJ1bWVudGF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/errors.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/logSpans.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/logSpans.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logSpanEnd: () => (/* binding */ logSpanEnd),\n/* harmony export */   logSpanStart: () => (/* binding */ logSpanStart)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\n\n/**\n * Print a log message for a started span.\n */\nfunction logSpanStart(span) {\n  if (!_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.spanToJSON)(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.spanIsSampled)(span);\n  const rootSpan = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.getRootSpan)(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.spanToJSON)(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nfunction logSpanEnd(span) {\n  if (!_debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.spanToJSON)(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.getRootSpan)(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(msg);\n}\n\n\n//# sourceMappingURL=logSpans.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFjaW5nL2xvZ1NwYW5zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWdEO0FBQytCO0FBQzdCOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sd0RBQVc7O0FBRWxCLFVBQVUsd0ZBQXdGLEVBQUUsK0RBQVU7QUFDOUcsVUFBVSxTQUFTOztBQUVuQixrQkFBa0Isa0VBQWE7QUFDL0IsbUJBQW1CLGdFQUFXO0FBQzlCOztBQUVBLHVDQUF1QyxtQ0FBbUMsRUFBRSwwQkFBMEI7O0FBRXRHLDRCQUE0QixHQUFHLFlBQVksWUFBWSxVQUFVLE9BQU87O0FBRXhFO0FBQ0EsaUNBQWlDLGFBQWE7QUFDOUM7O0FBRUE7QUFDQSxZQUFZLGtCQUFrQixFQUFFLCtEQUFVO0FBQzFDLCtCQUErQiw4QkFBOEI7QUFDN0Q7QUFDQSxpQ0FBaUMsR0FBRztBQUNwQztBQUNBO0FBQ0EsMENBQTBDLFlBQVk7QUFDdEQ7QUFDQTs7QUFFQSxFQUFFLDBEQUFNLFFBQVE7QUFDaEIsSUFBSSx1QkFBdUI7QUFDM0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHdEQUFXOztBQUVsQixVQUFVLDBEQUEwRCxFQUFFLCtEQUFVO0FBQ2hGLFVBQVUsU0FBUztBQUNuQixtQkFBbUIsZ0VBQVc7QUFDOUI7O0FBRUEsc0NBQXNDLEdBQUcsSUFBSSwwQkFBMEIsUUFBUSxZQUFZLFlBQVksT0FBTztBQUM5RyxFQUFFLDBEQUFNO0FBQ1I7O0FBRW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNpbmcvbG9nU3BhbnMuanM/NGQxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4uL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IHNwYW5Ub0pTT04sIGdldFJvb3RTcGFuLCBzcGFuSXNTYW1wbGVkIH0gZnJvbSAnLi4vdXRpbHMvc3BhblV0aWxzLmpzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcyc7XG5cbi8qKlxuICogUHJpbnQgYSBsb2cgbWVzc2FnZSBmb3IgYSBzdGFydGVkIHNwYW4uXG4gKi9cbmZ1bmN0aW9uIGxvZ1NwYW5TdGFydChzcGFuKSB7XG4gIGlmICghREVCVUdfQlVJTEQpIHJldHVybjtcblxuICBjb25zdCB7IGRlc2NyaXB0aW9uID0gJzwgdW5rbm93biBuYW1lID4nLCBvcCA9ICc8IHVua25vd24gb3AgPicsIHBhcmVudF9zcGFuX2lkOiBwYXJlbnRTcGFuSWQgfSA9IHNwYW5Ub0pTT04oc3Bhbik7XG4gIGNvbnN0IHsgc3BhbklkIH0gPSBzcGFuLnNwYW5Db250ZXh0KCk7XG5cbiAgY29uc3Qgc2FtcGxlZCA9IHNwYW5Jc1NhbXBsZWQoc3Bhbik7XG4gIGNvbnN0IHJvb3RTcGFuID0gZ2V0Um9vdFNwYW4oc3Bhbik7XG4gIGNvbnN0IGlzUm9vdFNwYW4gPSByb290U3BhbiA9PT0gc3BhbjtcblxuICBjb25zdCBoZWFkZXIgPSBgW1RyYWNpbmddIFN0YXJ0aW5nICR7c2FtcGxlZCA/ICdzYW1wbGVkJyA6ICd1bnNhbXBsZWQnfSAke2lzUm9vdFNwYW4gPyAncm9vdCAnIDogJyd9c3BhbmA7XG5cbiAgY29uc3QgaW5mb1BhcnRzID0gW2BvcDogJHtvcH1gLCBgbmFtZTogJHtkZXNjcmlwdGlvbn1gLCBgSUQ6ICR7c3BhbklkfWBdO1xuXG4gIGlmIChwYXJlbnRTcGFuSWQpIHtcbiAgICBpbmZvUGFydHMucHVzaChgcGFyZW50IElEOiAke3BhcmVudFNwYW5JZH1gKTtcbiAgfVxuXG4gIGlmICghaXNSb290U3Bhbikge1xuICAgIGNvbnN0IHsgb3AsIGRlc2NyaXB0aW9uIH0gPSBzcGFuVG9KU09OKHJvb3RTcGFuKTtcbiAgICBpbmZvUGFydHMucHVzaChgcm9vdCBJRDogJHtyb290U3Bhbi5zcGFuQ29udGV4dCgpLnNwYW5JZH1gKTtcbiAgICBpZiAob3ApIHtcbiAgICAgIGluZm9QYXJ0cy5wdXNoKGByb290IG9wOiAke29wfWApO1xuICAgIH1cbiAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgIGluZm9QYXJ0cy5wdXNoKGByb290IGRlc2NyaXB0aW9uOiAke2Rlc2NyaXB0aW9ufWApO1xuICAgIH1cbiAgfVxuXG4gIGxvZ2dlci5sb2coYCR7aGVhZGVyfVxuICAke2luZm9QYXJ0cy5qb2luKCdcXG4gICcpfWApO1xufVxuXG4vKipcbiAqIFByaW50IGEgbG9nIG1lc3NhZ2UgZm9yIGFuIGVuZGVkIHNwYW4uXG4gKi9cbmZ1bmN0aW9uIGxvZ1NwYW5FbmQoc3Bhbikge1xuICBpZiAoIURFQlVHX0JVSUxEKSByZXR1cm47XG5cbiAgY29uc3QgeyBkZXNjcmlwdGlvbiA9ICc8IHVua25vd24gbmFtZSA+Jywgb3AgPSAnPCB1bmtub3duIG9wID4nIH0gPSBzcGFuVG9KU09OKHNwYW4pO1xuICBjb25zdCB7IHNwYW5JZCB9ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuICBjb25zdCByb290U3BhbiA9IGdldFJvb3RTcGFuKHNwYW4pO1xuICBjb25zdCBpc1Jvb3RTcGFuID0gcm9vdFNwYW4gPT09IHNwYW47XG5cbiAgY29uc3QgbXNnID0gYFtUcmFjaW5nXSBGaW5pc2hpbmcgXCIke29wfVwiICR7aXNSb290U3BhbiA/ICdyb290ICcgOiAnJ31zcGFuIFwiJHtkZXNjcmlwdGlvbn1cIiB3aXRoIElEICR7c3BhbklkfWA7XG4gIGxvZ2dlci5sb2cobXNnKTtcbn1cblxuZXhwb3J0IHsgbG9nU3BhbkVuZCwgbG9nU3BhblN0YXJ0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dTcGFucy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/logSpans.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/measurement.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/measurement.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setMeasurement: () => (/* binding */ setMeasurement),\n/* harmony export */   timedEventsToMeasurements: () => (/* binding */ timedEventsToMeasurements)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\n\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nfunction setMeasurement(name, value, unit, activeSpan = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_0__.getActiveSpan)()) {\n  const rootSpan = activeSpan && (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_0__.getRootSpan)(activeSpan);\n\n  if (rootSpan) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit ,\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nfunction timedEventsToMeasurements(events) {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n\n  const measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT] ;\n    const value = attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE] ;\n\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = { value, unit };\n    }\n  });\n\n  return measurements;\n}\n\n\n//# sourceMappingURL=measurement.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFjaW5nL21lYXN1cmVtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFnRDtBQUNtRjtBQUNoRTtBQUNqQjs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Qsa0VBQWE7QUFDckUsaUNBQWlDLGdFQUFXOztBQUU1QztBQUNBLElBQUksd0RBQVcsSUFBSSwwREFBTSx3REFBd0QsTUFBTSxJQUFJLE9BQU8sRUFBRSxLQUFLO0FBQ3pHO0FBQ0EsT0FBTywrRkFBMkM7QUFDbEQsT0FBTyw4RkFBMEM7QUFDakQsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhGQUEwQztBQUN0RSw2QkFBNkIsK0ZBQTJDOztBQUV4RTtBQUNBLG1DQUFtQztBQUNuQztBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFcUQ7QUFDckQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdHJhY2luZy9tZWFzdXJlbWVudC5qcz9mM2EwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERFQlVHX0JVSUxEIH0gZnJvbSAnLi4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0IHsgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklULCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFIH0gZnJvbSAnLi4vc2VtYW50aWNBdHRyaWJ1dGVzLmpzJztcbmltcG9ydCB7IGdldEFjdGl2ZVNwYW4sIGdldFJvb3RTcGFuIH0gZnJvbSAnLi4vdXRpbHMvc3BhblV0aWxzLmpzJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcyc7XG5cbi8qKlxuICogQWRkcyBhIG1lYXN1cmVtZW50IHRvIHRoZSBhY3RpdmUgdHJhbnNhY3Rpb24gb24gdGhlIGN1cnJlbnQgZ2xvYmFsIHNjb3BlLiBZb3UgY2FuIG9wdGlvbmFsbHkgcGFzcyBpbiBhIGRpZmZlcmVudCBzcGFuXG4gKiBhcyB0aGUgNHRoIHBhcmFtZXRlci5cbiAqL1xuZnVuY3Rpb24gc2V0TWVhc3VyZW1lbnQobmFtZSwgdmFsdWUsIHVuaXQsIGFjdGl2ZVNwYW4gPSBnZXRBY3RpdmVTcGFuKCkpIHtcbiAgY29uc3Qgcm9vdFNwYW4gPSBhY3RpdmVTcGFuICYmIGdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pO1xuXG4gIGlmIChyb290U3Bhbikge1xuICAgIERFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2coYFtNZWFzdXJlbWVudF0gU2V0dGluZyBtZWFzdXJlbWVudCBvbiByb290IHNwYW46ICR7bmFtZX0gPSAke3ZhbHVlfSAke3VuaXR9YCk7XG4gICAgcm9vdFNwYW4uYWRkRXZlbnQobmFtZSwge1xuICAgICAgW1NFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVkFMVUVdOiB2YWx1ZSxcbiAgICAgIFtTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVRdOiB1bml0ICxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnQgdGltZWQgZXZlbnRzIHRvIG1lYXN1cmVtZW50cy5cbiAqL1xuZnVuY3Rpb24gdGltZWRFdmVudHNUb01lYXN1cmVtZW50cyhldmVudHMpIHtcbiAgaWYgKCFldmVudHMgfHwgZXZlbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBtZWFzdXJlbWVudHMgPSB7fTtcbiAgZXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBldmVudC5hdHRyaWJ1dGVzIHx8IHt9O1xuICAgIGNvbnN0IHVuaXQgPSBhdHRyaWJ1dGVzW1NFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVF0gO1xuICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFXSA7XG5cbiAgICBpZiAodHlwZW9mIHVuaXQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIG1lYXN1cmVtZW50c1tldmVudC5uYW1lXSA9IHsgdmFsdWUsIHVuaXQgfTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBtZWFzdXJlbWVudHM7XG59XG5cbmV4cG9ydCB7IHNldE1lYXN1cmVtZW50LCB0aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZWFzdXJlbWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/measurement.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/sampling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/sampling.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sampleSpan: () => (/* binding */ sampleSpan)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hasSpansEnabled_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/hasSpansEnabled.js */ \"./node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js\");\n/* harmony import */ var _utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/parseSampleRate.js */ \"./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\n\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nfunction sampleSpan(\n  options,\n  samplingContext,\n  sampleRand,\n) {\n  // nothing to do if span recording is not enabled\n  if (!(0,_utils_hasSpansEnabled_js__WEBPACK_IMPORTED_MODULE_0__.hasSpansEnabled)(options)) {\n    return [false];\n  }\n\n  let localSampleRateWasApplied = undefined;\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      ...samplingContext,\n      inheritOrSampleWith: fallbackSampleRate => {\n        // If we have an incoming parent sample rate, we'll just use that one.\n        // The sampling decision will be inherited because of the sample_rand that was generated when the trace reached the incoming boundaries of the SDK.\n        if (typeof samplingContext.parentSampleRate === 'number') {\n          return samplingContext.parentSampleRate;\n        }\n\n        // Fallback if parent sample rate is not on the incoming trace (e.g. if there is no baggage)\n        // This is to provide backwards compatibility if there are incoming traces from older SDKs that don't send a parent sample rate or a sample rand. In these cases we just want to force either a sampling decision on the downstream traces via the sample rate.\n        if (typeof samplingContext.parentSampled === 'boolean') {\n          return Number(samplingContext.parentSampled);\n        }\n\n        return fallbackSampleRate;\n      },\n    });\n    localSampleRateWasApplied = true;\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    localSampleRateWasApplied = true;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = (0,_utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_1__.parseSampleRate)(sampleRate);\n\n  if (parsedSampleRate === undefined) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD &&\n      _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\n        `[Tracing] Discarding root span because of invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          sampleRate,\n        )} of type ${JSON.stringify(typeof sampleRate)}.`,\n      );\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD &&\n      _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    return [false, parsedSampleRate, localSampleRateWasApplied];\n  }\n\n  // We always compare the sample rand for the current execution context against the chosen sample rate.\n  // Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n  const shouldSample = sampleRand < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD &&\n      _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_3__.logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n  }\n\n  return [shouldSample, parsedSampleRate, localSampleRateWasApplied];\n}\n\n\n//# sourceMappingURL=sampling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFjaW5nL3NhbXBsaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWdEO0FBQ2M7QUFDQTtBQUNaOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLDBFQUFlO0FBQ3RCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQkFBMkIsMEVBQWU7O0FBRTFDO0FBQ0EsSUFBSSx3REFBVztBQUNmLE1BQU0sMERBQU07QUFDWix5SUFBeUk7QUFDekk7QUFDQSxXQUFXLFVBQVUsa0NBQWtDO0FBQ3ZEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSSx3REFBVztBQUNmLE1BQU0sMERBQU07QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLHdEQUFXO0FBQ2YsTUFBTSwwREFBTTtBQUNaLDRHQUE0RztBQUM1RztBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7O0FBRXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3RyYWNpbmcvc2FtcGxpbmcuanM/OGZjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4uL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IGhhc1NwYW5zRW5hYmxlZCB9IGZyb20gJy4uL3V0aWxzL2hhc1NwYW5zRW5hYmxlZC5qcyc7XG5pbXBvcnQgeyBwYXJzZVNhbXBsZVJhdGUgfSBmcm9tICcuLi91dGlscy9wYXJzZVNhbXBsZVJhdGUuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJztcblxuLyoqXG4gKiBNYWtlcyBhIHNhbXBsaW5nIGRlY2lzaW9uIGZvciB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAqXG4gKiBDYWxsZWQgZXZlcnkgdGltZSBhIHJvb3Qgc3BhbiBpcyBjcmVhdGVkLiBPbmx5IHJvb3Qgc3BhbnMgd2hpY2ggZW1lcmdlIHdpdGggYSBgc2FtcGxlZGAgdmFsdWUgb2YgYHRydWVgIHdpbGwgYmVcbiAqIHNlbnQgdG8gU2VudHJ5LlxuICovXG5mdW5jdGlvbiBzYW1wbGVTcGFuKFxuICBvcHRpb25zLFxuICBzYW1wbGluZ0NvbnRleHQsXG4gIHNhbXBsZVJhbmQsXG4pIHtcbiAgLy8gbm90aGluZyB0byBkbyBpZiBzcGFuIHJlY29yZGluZyBpcyBub3QgZW5hYmxlZFxuICBpZiAoIWhhc1NwYW5zRW5hYmxlZChvcHRpb25zKSkge1xuICAgIHJldHVybiBbZmFsc2VdO1xuICB9XG5cbiAgbGV0IGxvY2FsU2FtcGxlUmF0ZVdhc0FwcGxpZWQgPSB1bmRlZmluZWQ7XG5cbiAgLy8gd2Ugd291bGQgaGF2ZSBiYWlsZWQgYWxyZWFkeSBpZiBuZWl0aGVyIGB0cmFjZXNTYW1wbGVyYCBub3IgYHRyYWNlc1NhbXBsZVJhdGVgIHdlcmUgZGVmaW5lZCwgc28gb25lIG9mIHRoZXNlIHNob3VsZFxuICAvLyB3b3JrOyBwcmVmZXIgdGhlIGhvb2sgaWYgc29cbiAgbGV0IHNhbXBsZVJhdGU7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFjZXNTYW1wbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2FtcGxlUmF0ZSA9IG9wdGlvbnMudHJhY2VzU2FtcGxlcih7XG4gICAgICAuLi5zYW1wbGluZ0NvbnRleHQsXG4gICAgICBpbmhlcml0T3JTYW1wbGVXaXRoOiBmYWxsYmFja1NhbXBsZVJhdGUgPT4ge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGFuIGluY29taW5nIHBhcmVudCBzYW1wbGUgcmF0ZSwgd2UnbGwganVzdCB1c2UgdGhhdCBvbmUuXG4gICAgICAgIC8vIFRoZSBzYW1wbGluZyBkZWNpc2lvbiB3aWxsIGJlIGluaGVyaXRlZCBiZWNhdXNlIG9mIHRoZSBzYW1wbGVfcmFuZCB0aGF0IHdhcyBnZW5lcmF0ZWQgd2hlbiB0aGUgdHJhY2UgcmVhY2hlZCB0aGUgaW5jb21pbmcgYm91bmRhcmllcyBvZiB0aGUgU0RLLlxuICAgICAgICBpZiAodHlwZW9mIHNhbXBsaW5nQ29udGV4dC5wYXJlbnRTYW1wbGVSYXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHJldHVybiBzYW1wbGluZ0NvbnRleHQucGFyZW50U2FtcGxlUmF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZhbGxiYWNrIGlmIHBhcmVudCBzYW1wbGUgcmF0ZSBpcyBub3Qgb24gdGhlIGluY29taW5nIHRyYWNlIChlLmcuIGlmIHRoZXJlIGlzIG5vIGJhZ2dhZ2UpXG4gICAgICAgIC8vIFRoaXMgaXMgdG8gcHJvdmlkZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBpZiB0aGVyZSBhcmUgaW5jb21pbmcgdHJhY2VzIGZyb20gb2xkZXIgU0RLcyB0aGF0IGRvbid0IHNlbmQgYSBwYXJlbnQgc2FtcGxlIHJhdGUgb3IgYSBzYW1wbGUgcmFuZC4gSW4gdGhlc2UgY2FzZXMgd2UganVzdCB3YW50IHRvIGZvcmNlIGVpdGhlciBhIHNhbXBsaW5nIGRlY2lzaW9uIG9uIHRoZSBkb3duc3RyZWFtIHRyYWNlcyB2aWEgdGhlIHNhbXBsZSByYXRlLlxuICAgICAgICBpZiAodHlwZW9mIHNhbXBsaW5nQ29udGV4dC5wYXJlbnRTYW1wbGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICByZXR1cm4gTnVtYmVyKHNhbXBsaW5nQ29udGV4dC5wYXJlbnRTYW1wbGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxsYmFja1NhbXBsZVJhdGU7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGxvY2FsU2FtcGxlUmF0ZVdhc0FwcGxpZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHNhbXBsaW5nQ29udGV4dC5wYXJlbnRTYW1wbGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICBzYW1wbGVSYXRlID0gc2FtcGxpbmdDb250ZXh0LnBhcmVudFNhbXBsZWQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMudHJhY2VzU2FtcGxlUmF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzYW1wbGVSYXRlID0gb3B0aW9ucy50cmFjZXNTYW1wbGVSYXRlO1xuICAgIGxvY2FsU2FtcGxlUmF0ZVdhc0FwcGxpZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gU2luY2UgdGhpcyBpcyBjb21pbmcgZnJvbSB0aGUgdXNlciAob3IgZnJvbSBhIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IHRoZSB1c2VyKSwgd2hvIGtub3dzIHdoYXQgd2UgbWlnaHQgZ2V0LlxuICAvLyAoVGhlIG9ubHkgdmFsaWQgdmFsdWVzIGFyZSBib29sZWFucyBvciBudW1iZXJzIGJldHdlZW4gMCBhbmQgMS4pXG4gIGNvbnN0IHBhcnNlZFNhbXBsZVJhdGUgPSBwYXJzZVNhbXBsZVJhdGUoc2FtcGxlUmF0ZSk7XG5cbiAgaWYgKHBhcnNlZFNhbXBsZVJhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIERFQlVHX0JVSUxEICYmXG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgYFtUcmFjaW5nXSBEaXNjYXJkaW5nIHJvb3Qgc3BhbiBiZWNhdXNlIG9mIGludmFsaWQgc2FtcGxlIHJhdGUuIFNhbXBsZSByYXRlIG11c3QgYmUgYSBib29sZWFuIG9yIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMS4gR290ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgc2FtcGxlUmF0ZSxcbiAgICAgICAgKX0gb2YgdHlwZSAke0pTT04uc3RyaW5naWZ5KHR5cGVvZiBzYW1wbGVSYXRlKX0uYCxcbiAgICAgICk7XG4gICAgcmV0dXJuIFtmYWxzZV07XG4gIH1cblxuICAvLyBpZiB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgMCAob3IgZmFsc2UpLCBvciBpZiBgdHJhY2VzU2FtcGxlUmF0ZWAgaXMgMCwgaXQncyBhIHNpZ24gdGhlIHRyYW5zYWN0aW9uIHNob3VsZCBiZSBkcm9wcGVkXG4gIGlmICghcGFyc2VkU2FtcGxlUmF0ZSkge1xuICAgIERFQlVHX0JVSUxEICYmXG4gICAgICBsb2dnZXIubG9nKFxuICAgICAgICBgW1RyYWNpbmddIERpc2NhcmRpbmcgdHJhbnNhY3Rpb24gYmVjYXVzZSAke1xuICAgICAgICAgIHR5cGVvZiBvcHRpb25zLnRyYWNlc1NhbXBsZXIgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gJ3RyYWNlc1NhbXBsZXIgcmV0dXJuZWQgMCBvciBmYWxzZSdcbiAgICAgICAgICAgIDogJ2EgbmVnYXRpdmUgc2FtcGxpbmcgZGVjaXNpb24gd2FzIGluaGVyaXRlZCBvciB0cmFjZXNTYW1wbGVSYXRlIGlzIHNldCB0byAwJ1xuICAgICAgICB9YCxcbiAgICAgICk7XG4gICAgcmV0dXJuIFtmYWxzZSwgcGFyc2VkU2FtcGxlUmF0ZSwgbG9jYWxTYW1wbGVSYXRlV2FzQXBwbGllZF07XG4gIH1cblxuICAvLyBXZSBhbHdheXMgY29tcGFyZSB0aGUgc2FtcGxlIHJhbmQgZm9yIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBjb250ZXh0IGFnYWluc3QgdGhlIGNob3NlbiBzYW1wbGUgcmF0ZS5cbiAgLy8gUmVhZCBtb3JlOiBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvdGVsZW1ldHJ5L3RyYWNlcy8jcHJvcGFnYXRlZC1yYW5kb20tdmFsdWVcbiAgY29uc3Qgc2hvdWxkU2FtcGxlID0gc2FtcGxlUmFuZCA8IHBhcnNlZFNhbXBsZVJhdGU7XG5cbiAgLy8gaWYgd2UncmUgbm90IGdvaW5nIHRvIGtlZXAgaXQsIHdlJ3JlIGRvbmVcbiAgaWYgKCFzaG91bGRTYW1wbGUpIHtcbiAgICBERUJVR19CVUlMRCAmJlxuICAgICAgbG9nZ2VyLmxvZyhcbiAgICAgICAgYFtUcmFjaW5nXSBEaXNjYXJkaW5nIHRyYW5zYWN0aW9uIGJlY2F1c2UgaXQncyBub3QgaW5jbHVkZWQgaW4gdGhlIHJhbmRvbSBzYW1wbGUgKHNhbXBsaW5nIHJhdGUgPSAke051bWJlcihcbiAgICAgICAgICBzYW1wbGVSYXRlLFxuICAgICAgICApfSlgLFxuICAgICAgKTtcbiAgfVxuXG4gIHJldHVybiBbc2hvdWxkU2FtcGxlLCBwYXJzZWRTYW1wbGVSYXRlLCBsb2NhbFNhbXBsZVJhdGVXYXNBcHBsaWVkXTtcbn1cblxuZXhwb3J0IHsgc2FtcGxlU3BhbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FtcGxpbmcuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/sampling.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/sentryNonRecordingSpan.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/sentryNonRecordingSpan.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SentryNonRecordingSpan: () => (/* binding */ SentryNonRecordingSpan)\n/* harmony export */ });\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n\n\n\n/**\n * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.\n */\nclass SentryNonRecordingSpan  {\n\n   constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateTraceId)();\n    this._spanId = spanContext.spanId || (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateSpanId)();\n  }\n\n  /** @inheritdoc */\n   spanContext() {\n    return {\n      spanId: this._spanId,\n      traceId: this._traceId,\n      traceFlags: _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n   end(_timestamp) {}\n\n  /** @inheritdoc */\n   setAttribute(_key, _value) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   setAttributes(_values) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   setStatus(_status) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   updateName(_name) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   isRecording() {\n    return false;\n  }\n\n  /** @inheritdoc */\n   addEvent(\n    _name,\n    _attributesOrStartTime,\n    _startTime,\n  ) {\n    return this;\n  }\n\n  /** @inheritDoc */\n   addLink(_link) {\n    return this;\n  }\n\n  /** @inheritDoc */\n   addLinks(_links) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n   recordException(_exception, _time) {\n    // noop\n  }\n}\n\n\n//# sourceMappingURL=sentryNonRecordingSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFjaW5nL3NlbnRyeU5vblJlY29yZGluZ1NwYW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXdEO0FBQytCOztBQUV2RjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7QUFDL0IsMkNBQTJDLG1GQUFlO0FBQzFELHlDQUF5QyxrRkFBYztBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdFQUFlO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdHJhY2luZy9zZW50cnlOb25SZWNvcmRpbmdTcGFuLmpzPzI3NGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVFJBQ0VfRkxBR19OT05FIH0gZnJvbSAnLi4vdXRpbHMvc3BhblV0aWxzLmpzJztcbmltcG9ydCB7IGdlbmVyYXRlVHJhY2VJZCwgZ2VuZXJhdGVTcGFuSWQgfSBmcm9tICcuLi91dGlscy1ob2lzdC9wcm9wYWdhdGlvbkNvbnRleHQuanMnO1xuXG4vKipcbiAqIEEgU2VudHJ5IFNwYW4gdGhhdCBpcyBub24tcmVjb3JkaW5nLCBtZWFuaW5nIGl0IHdpbGwgbm90IGJlIHNlbnQgdG8gU2VudHJ5LlxuICovXG5jbGFzcyBTZW50cnlOb25SZWNvcmRpbmdTcGFuICB7XG5cbiAgIGNvbnN0cnVjdG9yKHNwYW5Db250ZXh0ID0ge30pIHtcbiAgICB0aGlzLl90cmFjZUlkID0gc3BhbkNvbnRleHQudHJhY2VJZCB8fCBnZW5lcmF0ZVRyYWNlSWQoKTtcbiAgICB0aGlzLl9zcGFuSWQgPSBzcGFuQ29udGV4dC5zcGFuSWQgfHwgZ2VuZXJhdGVTcGFuSWQoKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgc3BhbkNvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNwYW5JZDogdGhpcy5fc3BhbklkLFxuICAgICAgdHJhY2VJZDogdGhpcy5fdHJhY2VJZCxcbiAgICAgIHRyYWNlRmxhZ3M6IFRSQUNFX0ZMQUdfTk9ORSxcbiAgICB9O1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgIGVuZChfdGltZXN0YW1wKSB7fVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgc2V0QXR0cmlidXRlKF9rZXksIF92YWx1ZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBzZXRBdHRyaWJ1dGVzKF92YWx1ZXMpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgc2V0U3RhdHVzKF9zdGF0dXMpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgdXBkYXRlTmFtZShfbmFtZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBpc1JlY29yZGluZygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGFkZEV2ZW50KFxuICAgIF9uYW1lLFxuICAgIF9hdHRyaWJ1dGVzT3JTdGFydFRpbWUsXG4gICAgX3N0YXJ0VGltZSxcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgIGFkZExpbmsoX2xpbmspIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgYWRkTGlua3MoX2xpbmtzKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBzaG91bGQgZ2VuZXJhbGx5IG5vdCBiZSB1c2VkLFxuICAgKiBidXQgd2UgbmVlZCBpdCBmb3IgYmVpbmcgY29tcGxpYW50IHdpdGggdGhlIE9URUwgU3BhbiBpbnRlcmZhY2UuXG4gICAqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqL1xuICAgcmVjb3JkRXhjZXB0aW9uKF9leGNlcHRpb24sIF90aW1lKSB7XG4gICAgLy8gbm9vcFxuICB9XG59XG5cbmV4cG9ydCB7IFNlbnRyeU5vblJlY29yZGluZ1NwYW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbnRyeU5vblJlY29yZGluZ1NwYW4uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/sentryNonRecordingSpan.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/sentrySpan.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/sentrySpan.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SentrySpan: () => (/* binding */ SentrySpan)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../envelope.js */ \"./node_modules/@sentry/core/build/esm/envelope.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _logSpans_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logSpans.js */ \"./node_modules/@sentry/core/build/esm/tracing/logSpans.js\");\n/* harmony import */ var _measurement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./measurement.js */ \"./node_modules/@sentry/core/build/esm/tracing/measurement.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst MAX_SPAN_COUNT = 1000;\n\n/**\n * Span contains all data about a span\n */\nclass SentrySpan  {\n\n  /** Epoch timestamp in seconds when the span started. */\n\n  /** Epoch timestamp in seconds when the span ended. */\n\n  /** Internal keeper of the status */\n\n  /** The timed events added to this span. */\n\n  /** if true, treat span as a standalone span (not part of a transaction) */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startSpan()`\n   * or other span methods.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n   constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateTraceId)();\n    this._spanId = spanContext.spanId || (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_0__.generateSpanId)();\n    this._startTime = spanContext.startTimestamp || (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__.timestampInSeconds)();\n    this._links = spanContext.links;\n\n    this._attributes = {};\n    this.setAttributes({\n      [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n      [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes,\n    });\n\n    this._name = spanContext.name;\n\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n\n    this._events = [];\n\n    this._isStandaloneSpan = spanContext.isStandalone;\n\n    // If the span is already ended, ensure we finalize the span immediately\n    if (this._endTime) {\n      this._onSpanEnded();\n    }\n  }\n\n  /** @inheritDoc */\n   addLink(link) {\n    if (this._links) {\n      this._links.push(link);\n    } else {\n      this._links = [link];\n    }\n    return this;\n  }\n\n  /** @inheritDoc */\n   addLinks(links) {\n    if (this._links) {\n      this._links.push(...links);\n    } else {\n      this._links = links;\n    }\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n   recordException(_exception, _time) {\n    // noop\n  }\n\n  /** @inheritdoc */\n   spanContext() {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.TRACE_FLAG_SAMPLED : _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n   setAttribute(key, value) {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n\n    return this;\n  }\n\n  /** @inheritdoc */\n   setAttributes(attributes) {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for browser tracing where we want to adjust the start time afterwards.\n   * USE THIS WITH CAUTION!\n   *\n   * @hidden\n   * @internal\n   */\n   updateStartTime(timeInput) {\n    this._startTime = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanTimeInputToSeconds)(timeInput);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setStatus(value) {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   updateName(name) {\n    this._name = name;\n    this.setAttribute(_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');\n    return this;\n  }\n\n  /** @inheritdoc */\n   end(endTimestamp) {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n\n    this._endTime = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanTimeInputToSeconds)(endTimestamp);\n    (0,_logSpans_js__WEBPACK_IMPORTED_MODULE_4__.logSpanEnd)(this);\n\n    this._onSpanEnded();\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n   getSpanJSON() {\n    return {\n      data: this._attributes,\n      description: this._name,\n      op: this._attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.getStatusMessage)(this._status),\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ,\n      profile_id: this._attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_PROFILE_ID] ,\n      exclusive_time: this._attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] ,\n      measurements: (0,_measurement_js__WEBPACK_IMPORTED_MODULE_5__.timedEventsToMeasurements)(this._events),\n      is_segment: (this._isStandaloneSpan && (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.getRootSpan)(this) === this) || undefined,\n      segment_id: this._isStandaloneSpan ? (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.getRootSpan)(this).spanContext().spanId : undefined,\n      links: (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.convertSpanLinksForEnvelope)(this._links),\n    };\n  }\n\n  /** @inheritdoc */\n   isRecording() {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * @inheritdoc\n   */\n   addEvent(\n    name,\n    attributesOrStartTime,\n    startTime,\n  ) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.log('[Tracing] Adding an event to span:', name);\n\n    const time = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__.timestampInSeconds)();\n    const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n\n    const event = {\n      name,\n      time: (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanTimeInputToSeconds)(time),\n      attributes,\n    };\n\n    this._events.push(event);\n\n    return this;\n  }\n\n  /**\n   * This method should generally not be used,\n   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n   * USE THIS WITH CAUTION!\n   * @internal\n   * @hidden\n   * @experimental\n   */\n   isStandaloneSpan() {\n    return !!this._isStandaloneSpan;\n  }\n\n  /** Emit `spanEnd` when the span is ended. */\n   _onSpanEnded() {\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_8__.getClient)();\n    if (client) {\n      client.emit('spanEnd', this);\n    }\n\n    // A segment span is basically the root span of a local span tree.\n    // So for now, this is either what we previously refer to as the root span,\n    // or a standalone span.\n    const isSegmentSpan = this._isStandaloneSpan || this === (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.getRootSpan)(this);\n\n    if (!isSegmentSpan) {\n      return;\n    }\n\n    // if this is a standalone span, we send it immediately\n    if (this._isStandaloneSpan) {\n      if (this._sampled) {\n        sendSpanEnvelope((0,_envelope_js__WEBPACK_IMPORTED_MODULE_9__.createSpanEnvelope)([this], client));\n      } else {\n        _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD &&\n          _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'span');\n        }\n      }\n      return;\n    }\n\n    const transactionEvent = this._convertSpanToTransaction();\n    if (transactionEvent) {\n      const scope = (0,_utils_js__WEBPACK_IMPORTED_MODULE_10__.getCapturedScopesOnSpan)(this).scope || (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_8__.getCurrentScope)();\n      scope.captureEvent(transactionEvent);\n    }\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n   _convertSpanToTransaction() {\n    // We can only convert finished spans\n    if (!isFullFinishedSpan((0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToJSON)(this))) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = (0,_utils_js__WEBPACK_IMPORTED_MODULE_10__.getCapturedScopesOnSpan)(this);\n\n    const normalizedRequest = capturedSpanScope?.getScopeData().sdkProcessingMetadata?.normalizedRequest;\n\n    if (this._sampled !== true) {\n      return undefined;\n    }\n\n    // The transaction span itself as well as any potential standalone spans should be filtered out\n    const finishedSpans = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.getSpanDescendants)(this).filter(span => span !== this && !isStandaloneSpan(span));\n\n    const spans = finishedSpans.map(span => (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToJSON)(span)).filter(isFullFinishedSpan);\n\n    const source = this._attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n    // remove internal root span attributes we don't need to send.\n    /* eslint-disable @typescript-eslint/no-dynamic-delete */\n    delete this._attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    spans.forEach(span => {\n      delete span.data[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_2__.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    });\n    // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete\n\n    const transaction = {\n      contexts: {\n        trace: (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_3__.spanToTransactionTraceContext)(this),\n      },\n      spans:\n        // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n        // we do not use spans anymore after this point\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans,\n      start_timestamp: this._startTime,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        dynamicSamplingContext: (0,_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_11__.getDynamicSamplingContextFromSpan)(this),\n      },\n      request: normalizedRequest,\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const measurements = (0,_measurement_js__WEBPACK_IMPORTED_MODULE_5__.timedEventsToMeasurements)(this._events);\n    const hasMeasurements = measurements && Object.keys(measurements).length;\n\n    if (hasMeasurements) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_6__.DEBUG_BUILD &&\n        _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_7__.logger.log(\n          '[Measurements] Adding measurements to transaction event',\n          JSON.stringify(measurements, undefined, 2),\n        );\n      transaction.measurements = measurements;\n    }\n\n    return transaction;\n  }\n}\n\nfunction isSpanTimeInput(value) {\n  return (value && typeof value === 'number') || value instanceof Date || Array.isArray(value);\n}\n\n// We want to filter out any incomplete SpanJSON objects\nfunction isFullFinishedSpan(input) {\n  return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n}\n\n/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\nfunction isStandaloneSpan(span) {\n  return span instanceof SentrySpan && span.isStandaloneSpan();\n}\n\n/**\n * Sends a `SpanEnvelope`.\n *\n * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n * the envelope will not be sent either.\n */\nfunction sendSpanEnvelope(envelope) {\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_8__.getClient)();\n  if (!client) {\n    return;\n  }\n\n  const spanItems = envelope[1];\n  if (!spanItems || spanItems.length === 0) {\n    client.recordDroppedEvent('before_send', 'span');\n    return;\n  }\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\n\n//# sourceMappingURL=sentrySpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/sentrySpan.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/spanstatus.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/spanstatus.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPAN_STATUS_ERROR: () => (/* binding */ SPAN_STATUS_ERROR),\n/* harmony export */   SPAN_STATUS_OK: () => (/* binding */ SPAN_STATUS_OK),\n/* harmony export */   SPAN_STATUS_UNSET: () => (/* binding */ SPAN_STATUS_UNSET),\n/* harmony export */   getSpanStatusFromHttpCode: () => (/* binding */ getSpanStatusFromHttpCode),\n/* harmony export */   setHttpStatus: () => (/* binding */ setHttpStatus)\n/* harmony export */ });\nconst SPAN_STATUS_UNSET = 0;\nconst SPAN_STATUS_OK = 1;\nconst SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nfunction getSpanStatusFromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return { code: SPAN_STATUS_OK };\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return { code: SPAN_STATUS_ERROR, message: 'unauthenticated' };\n      case 403:\n        return { code: SPAN_STATUS_ERROR, message: 'permission_denied' };\n      case 404:\n        return { code: SPAN_STATUS_ERROR, message: 'not_found' };\n      case 409:\n        return { code: SPAN_STATUS_ERROR, message: 'already_exists' };\n      case 413:\n        return { code: SPAN_STATUS_ERROR, message: 'failed_precondition' };\n      case 429:\n        return { code: SPAN_STATUS_ERROR, message: 'resource_exhausted' };\n      case 499:\n        return { code: SPAN_STATUS_ERROR, message: 'cancelled' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'invalid_argument' };\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return { code: SPAN_STATUS_ERROR, message: 'unimplemented' };\n      case 503:\n        return { code: SPAN_STATUS_ERROR, message: 'unavailable' };\n      case 504:\n        return { code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'internal_error' };\n    }\n  }\n\n  return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nfunction setHttpStatus(span, httpStatus) {\n  span.setAttribute('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n\n\n//# sourceMappingURL=spanstatus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFjaW5nL3NwYW5zdGF0dXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFMEc7QUFDMUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdHJhY2luZy9zcGFuc3RhdHVzLmpzPzhkZWQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU1BBTl9TVEFUVVNfVU5TRVQgPSAwO1xuY29uc3QgU1BBTl9TVEFUVVNfT0sgPSAxO1xuY29uc3QgU1BBTl9TVEFUVVNfRVJST1IgPSAyO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgSFRUUCBzdGF0dXMgY29kZSBpbnRvIGEgc2VudHJ5IHN0YXR1cyB3aXRoIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0gaHR0cFN0YXR1cyBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAqIEByZXR1cm5zIFRoZSBzcGFuIHN0YXR1cyBvciB1bmtub3duX2Vycm9yLlxuICovXG4vLyBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvZXZlbnQtcGF5bG9hZHMvc3Bhbi9cbmZ1bmN0aW9uIGdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUoaHR0cFN0YXR1cykge1xuICBpZiAoaHR0cFN0YXR1cyA8IDQwMCAmJiBodHRwU3RhdHVzID49IDEwMCkge1xuICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX09LIH07XG4gIH1cblxuICBpZiAoaHR0cFN0YXR1cyA+PSA0MDAgJiYgaHR0cFN0YXR1cyA8IDUwMCkge1xuICAgIHN3aXRjaCAoaHR0cFN0YXR1cykge1xuICAgICAgY2FzZSA0MDE6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAndW5hdXRoZW50aWNhdGVkJyB9O1xuICAgICAgY2FzZSA0MDM6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAncGVybWlzc2lvbl9kZW5pZWQnIH07XG4gICAgICBjYXNlIDQwNDpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdub3RfZm91bmQnIH07XG4gICAgICBjYXNlIDQwOTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdhbHJlYWR5X2V4aXN0cycgfTtcbiAgICAgIGNhc2UgNDEzOlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ZhaWxlZF9wcmVjb25kaXRpb24nIH07XG4gICAgICBjYXNlIDQyOTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdyZXNvdXJjZV9leGhhdXN0ZWQnIH07XG4gICAgICBjYXNlIDQ5OTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdjYW5jZWxsZWQnIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ludmFsaWRfYXJndW1lbnQnIH07XG4gICAgfVxuICB9XG5cbiAgaWYgKGh0dHBTdGF0dXMgPj0gNTAwICYmIGh0dHBTdGF0dXMgPCA2MDApIHtcbiAgICBzd2l0Y2ggKGh0dHBTdGF0dXMpIHtcbiAgICAgIGNhc2UgNTAxOlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3VuaW1wbGVtZW50ZWQnIH07XG4gICAgICBjYXNlIDUwMzpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICd1bmF2YWlsYWJsZScgfTtcbiAgICAgIGNhc2UgNTA0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2RlYWRsaW5lX2V4Y2VlZGVkJyB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdpbnRlcm5hbF9lcnJvcicgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3Vua25vd25fZXJyb3InIH07XG59XG5cbi8qKlxuICogU2V0cyB0aGUgSHR0cCBzdGF0dXMgYXR0cmlidXRlcyBvbiB0aGUgY3VycmVudCBzcGFuIGJhc2VkIG9uIHRoZSBodHRwIGNvZGUuXG4gKiBBZGRpdGlvbmFsbHksIHRoZSBzcGFuJ3Mgc3RhdHVzIGlzIHVwZGF0ZWQsIGRlcGVuZGluZyBvbiB0aGUgaHR0cCBjb2RlLlxuICovXG5mdW5jdGlvbiBzZXRIdHRwU3RhdHVzKHNwYW4sIGh0dHBTdGF0dXMpIHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2h0dHAucmVzcG9uc2Uuc3RhdHVzX2NvZGUnLCBodHRwU3RhdHVzKTtcblxuICBjb25zdCBzcGFuU3RhdHVzID0gZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZShodHRwU3RhdHVzKTtcbiAgaWYgKHNwYW5TdGF0dXMubWVzc2FnZSAhPT0gJ3Vua25vd25fZXJyb3InKSB7XG4gICAgc3Bhbi5zZXRTdGF0dXMoc3BhblN0YXR1cyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgU1BBTl9TVEFUVVNfRVJST1IsIFNQQU5fU1RBVFVTX09LLCBTUEFOX1NUQVRVU19VTlNFVCwgZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZSwgc2V0SHR0cFN0YXR1cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BhbnN0YXR1cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/trace.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/trace.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   continueTrace: () => (/* binding */ continueTrace),\n/* harmony export */   startInactiveSpan: () => (/* binding */ startInactiveSpan),\n/* harmony export */   startNewTrace: () => (/* binding */ startNewTrace),\n/* harmony export */   startSpan: () => (/* binding */ startSpan),\n/* harmony export */   startSpanManual: () => (/* binding */ startSpanManual),\n/* harmony export */   suppressTracing: () => (/* binding */ suppressTracing),\n/* harmony export */   withActiveSpan: () => (/* binding */ withActiveSpan)\n/* harmony export */ });\n/* harmony import */ var _asyncContext_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../asyncContext/index.js */ \"./node_modules/@sentry/core/build/esm/asyncContext/index.js\");\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../carrier.js */ \"./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_handleCallbackErrors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/handleCallbackErrors.js */ \"./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js\");\n/* harmony import */ var _utils_hasSpansEnabled_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/hasSpansEnabled.js */ \"./node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js\");\n/* harmony import */ var _utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/parseSampleRate.js */ \"./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js\");\n/* harmony import */ var _utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/spanOnScope.js */ \"./node_modules/@sentry/core/build/esm/utils/spanOnScope.js\");\n/* harmony import */ var _utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n/* harmony import */ var _utils_hoist_tracing_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\");\n/* harmony import */ var _dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _logSpans_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./logSpans.js */ \"./node_modules/@sentry/core/build/esm/tracing/logSpans.js\");\n/* harmony import */ var _sampling_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./sampling.js */ \"./node_modules/@sentry/core/build/esm/tracing/sampling.js\");\n/* harmony import */ var _sentryNonRecordingSpan_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sentryNonRecordingSpan.js */ \"./node_modules/@sentry/core/build/esm/tracing/sentryNonRecordingSpan.js\");\n/* harmony import */ var _sentrySpan_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./sentrySpan.js */ \"./node_modules/@sentry/core/build/esm/tracing/sentrySpan.js\");\n/* harmony import */ var _spanstatus_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./spanstatus.js */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* eslint-disable max-lines */\n\n\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  // We still need to fork a potentially passed scope, as we set the active span on it\n  // and we need to ensure that it is cleaned up properly once the span ends.\n  const customForkedScope = customScope?.clone();\n\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.withScope)(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n\n    return wrapper(() => {\n      const scope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new _sentryNonRecordingSpan_js__WEBPACK_IMPORTED_MODULE_1__.SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_2__._setSpanForScope)(scope, activeSpan);\n\n      return (0,_utils_handleCallbackErrors_js__WEBPACK_IMPORTED_MODULE_3__.handleCallbackErrors)(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.spanToJSON)(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: _spanstatus_js__WEBPACK_IMPORTED_MODULE_5__.SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n        () => {\n          activeSpan.end();\n        },\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. Use `span.end()` to end the span.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  const customForkedScope = customScope?.clone();\n\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.withScope)(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n\n    return wrapper(() => {\n      const scope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new _sentryNonRecordingSpan_js__WEBPACK_IMPORTED_MODULE_1__.SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_2__._setSpanForScope)(scope, activeSpan);\n\n      return (0,_utils_handleCallbackErrors_js__WEBPACK_IMPORTED_MODULE_3__.handleCallbackErrors)(\n        // We pass the `finish` function to the callback, so the user can finish the span manually\n        // this is mainly here for historic purposes because previously, we instructed users to call\n        // `finish` instead of `span.end()` to also clean up the scope. Nowadays, calling `span.end()`\n        // or `finish` has the same effect and we simply leave it here to avoid breaking user code.\n        () => callback(activeSpan, () => activeSpan.end()),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.spanToJSON)(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: _spanstatus_js__WEBPACK_IMPORTED_MODULE_5__.SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope\n    ? (callback) => (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.withScope)(options.scope, callback)\n    : customParentSpan !== undefined\n      ? (callback) => withActiveSpan(customParentSpan, callback)\n      : (callback) => callback();\n\n  return wrapper(() => {\n    const scope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n    const parentSpan = getParentSpan(scope);\n\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n\n    if (shouldSkipSpan) {\n      return new _sentryNonRecordingSpan_js__WEBPACK_IMPORTED_MODULE_1__.SentryNonRecordingSpan();\n    }\n\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope,\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nconst continueTrace = (\n  options\n\n,\n  callback,\n) => {\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_6__.getMainCarrier)();\n  const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_7__.getAsyncContextStrategy)(carrier);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n\n  const { sentryTrace, baggage } = options;\n\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.withScope)(scope => {\n    const propagationContext = (0,_utils_hoist_tracing_js__WEBPACK_IMPORTED_MODULE_8__.propagationContextFromHeaders)(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.withScope)(scope => {\n    (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_2__._setSpanForScope)(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const acs = getAcs();\n\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.withScope)(scope => {\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: true });\n    return callback();\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nfunction startNewTrace(callback) {\n  return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.withScope)(scope => {\n    scope.setPropagationContext({\n      traceId: (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_9__.generateTraceId)(),\n      sampleRand: Math.random(),\n    });\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_10__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_11__.logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\n\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope,\n}\n\n) {\n  if (!(0,_utils_hasSpansEnabled_js__WEBPACK_IMPORTED_MODULE_12__.hasSpansEnabled)()) {\n    const span = new _sentryNonRecordingSpan_js__WEBPACK_IMPORTED_MODULE_1__.SentryNonRecordingSpan();\n\n    // If this is a root span, we ensure to freeze a DSC\n    // So we can have at least partial data here\n    if (forceTransaction || !parentSpan) {\n      const dsc = {\n        sampled: 'false',\n        sample_rate: '0',\n        transaction: spanArguments.name,\n        ...(0,_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__.getDynamicSamplingContextFromSpan)(span),\n      } ;\n      (0,_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__.freezeDscOnSpan)(span, dsc);\n    }\n\n    return span;\n  }\n\n  const isolationScope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)();\n\n  let span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.addChildSpanToSpan)(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = (0,_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__.getDynamicSamplingContextFromSpan)(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const parentSampled = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.spanIsSampled)(parentSpan);\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    (0,_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__.freezeDscOnSpan)(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled,\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    if (dsc) {\n      (0,_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_13__.freezeDscOnSpan)(span, dsc);\n    }\n  }\n\n  (0,_logSpans_js__WEBPACK_IMPORTED_MODULE_14__.logSpanStart)(span);\n\n  (0,_utils_js__WEBPACK_IMPORTED_MODULE_15__.setCapturedScopesOnSpan)(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options) {\n  const exp = options.experimental || {};\n  const initialCtx = {\n    isStandalone: exp.standalone,\n    ...options,\n  };\n\n  if (options.startTime) {\n    const ctx = { ...initialCtx };\n    ctx.startTimestamp = (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.spanTimeInputToSeconds)(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return initialCtx;\n}\n\nfunction getAcs() {\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_6__.getMainCarrier)();\n  return (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_7__.getAsyncContextStrategy)(carrier);\n}\n\nfunction _startRootSpan(spanArguments, scope, parentSampled) {\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  const options = client?.getOptions() || {};\n\n  const { name = '' } = spanArguments;\n\n  const mutableSpanSamplingData = { spanAttributes: { ...spanArguments.attributes }, spanName: name, parentSampled };\n\n  // we don't care about the decision for the moment; this is just a placeholder\n  client?.emit('beforeSampling', mutableSpanSamplingData, { decision: false });\n\n  // If hook consumers override the parentSampled flag, we will use that value instead of the actual one\n  const finalParentSampled = mutableSpanSamplingData.parentSampled ?? parentSampled;\n  const finalAttributes = mutableSpanSamplingData.spanAttributes;\n\n  const currentPropagationContext = scope.getPropagationContext();\n  const [sampled, sampleRate, localSampleRateWasApplied] = scope.getScopeData().sdkProcessingMetadata[\n    SUPPRESS_TRACING_KEY\n  ]\n    ? [false]\n    : (0,_sampling_js__WEBPACK_IMPORTED_MODULE_16__.sampleSpan)(\n        options,\n        {\n          name,\n          parentSampled: finalParentSampled,\n          attributes: finalAttributes,\n          parentSampleRate: (0,_utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_17__.parseSampleRate)(currentPropagationContext.dsc?.sample_rate),\n        },\n        currentPropagationContext.sampleRand,\n      );\n\n  const rootSpan = new _sentrySpan_js__WEBPACK_IMPORTED_MODULE_18__.SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_19__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_19__.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]:\n        sampleRate !== undefined && localSampleRateWasApplied ? sampleRate : undefined,\n      ...finalAttributes,\n    },\n    sampled,\n  });\n\n  if (!sampled && client) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_10__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_11__.logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n    client.recordDroppedEvent('sample_rate', 'transaction');\n  }\n\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan, scope, spanArguments) {\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.spanIsSampled)(parentSpan);\n\n  const childSpan = sampled\n    ? new _sentrySpan_js__WEBPACK_IMPORTED_MODULE_18__.SentrySpan({\n        ...spanArguments,\n        parentSpanId: spanId,\n        traceId,\n        sampled,\n      })\n    : new _sentryNonRecordingSpan_js__WEBPACK_IMPORTED_MODULE_1__.SentryNonRecordingSpan({ traceId });\n\n  (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.addChildSpanToSpan)(parentSpan, childSpan);\n\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n\n  return childSpan;\n}\n\nfunction getParentSpan(scope) {\n  const span = (0,_utils_spanOnScope_js__WEBPACK_IMPORTED_MODULE_2__._getSpanForScope)(scope) ;\n\n  if (!span) {\n    return undefined;\n  }\n\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  const options = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return (0,_utils_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.getRootSpan)(span) ;\n  }\n\n  return span;\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\n\n//# sourceMappingURL=trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/trace.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/tracing/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/tracing/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCapturedScopesOnSpan: () => (/* binding */ getCapturedScopesOnSpan),\n/* harmony export */   setCapturedScopesOnSpan: () => (/* binding */ setCapturedScopesOnSpan)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nfunction setCapturedScopesOnSpan(span, scope, isolationScope) {\n  if (span) {\n    (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.addNonEnumerableProperty)(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.addNonEnumerableProperty)(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nfunction getCapturedScopesOnSpan(span) {\n  return {\n    scope: (span )[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span )[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n\n\n//# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFjaW5nL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRTs7QUFFcEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdGQUF3QjtBQUM1QixJQUFJLGdGQUF3QjtBQUM1QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNEQ7QUFDNUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdHJhY2luZy91dGlscy5qcz8xNjg0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L29iamVjdC5qcyc7XG5cbmNvbnN0IFNDT1BFX09OX1NUQVJUX1NQQU5fRklFTEQgPSAnX3NlbnRyeVNjb3BlJztcbmNvbnN0IElTT0xBVElPTl9TQ09QRV9PTl9TVEFSVF9TUEFOX0ZJRUxEID0gJ19zZW50cnlJc29sYXRpb25TY29wZSc7XG5cbi8qKiBTdG9yZSB0aGUgc2NvcGUgJiBpc29sYXRpb24gc2NvcGUgZm9yIGEgc3Bhbiwgd2hpY2ggY2FuIHRoZSBiZSB1c2VkIHdoZW4gaXQgaXMgZmluaXNoZWQuICovXG5mdW5jdGlvbiBzZXRDYXB0dXJlZFNjb3Blc09uU3BhbihzcGFuLCBzY29wZSwgaXNvbGF0aW9uU2NvcGUpIHtcbiAgaWYgKHNwYW4pIHtcbiAgICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoc3BhbiwgSVNPTEFUSU9OX1NDT1BFX09OX1NUQVJUX1NQQU5fRklFTEQsIGlzb2xhdGlvblNjb3BlKTtcbiAgICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoc3BhbiwgU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRCwgc2NvcGUpO1xuICB9XG59XG5cbi8qKlxuICogR3JhYnMgdGhlIHNjb3BlIGFuZCBpc29sYXRpb24gc2NvcGUgb2ZmIGEgc3BhbiB0aGF0IHdlcmUgYWN0aXZlIHdoZW4gdGhlIHNwYW4gd2FzIHN0YXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGdldENhcHR1cmVkU2NvcGVzT25TcGFuKHNwYW4pIHtcbiAgcmV0dXJuIHtcbiAgICBzY29wZTogKHNwYW4gKVtTQ09QRV9PTl9TVEFSVF9TUEFOX0ZJRUxEXSxcbiAgICBpc29sYXRpb25TY29wZTogKHNwYW4gKVtJU09MQVRJT05fU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRF0sXG4gIH07XG59XG5cbmV4cG9ydCB7IGdldENhcHR1cmVkU2NvcGVzT25TcGFuLCBzZXRDYXB0dXJlZFNjb3Blc09uU3BhbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/tracing/utils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/transports/base.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/transports/base.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TRANSPORT_BUFFER_SIZE: () => (/* binding */ DEFAULT_TRANSPORT_BUFFER_SIZE),\n/* harmony export */   createTransport: () => (/* binding */ createTransport)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_promisebuffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/promisebuffer.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/promisebuffer.js\");\n/* harmony import */ var _utils_hoist_ratelimit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/ratelimit.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/ratelimit.js\");\n/* harmony import */ var _utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/syncpromise.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n\n\n\n\n\n\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nfunction createTransport(\n  options,\n  makeRequest,\n  buffer = (0,_utils_hoist_promisebuffer_js__WEBPACK_IMPORTED_MODULE_0__.makePromiseBuffer)(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n) {\n  let rateLimits = {};\n  const flush = (timeout) => buffer.drain(timeout);\n\n  function send(envelope) {\n    const filteredEnvelopeItems = [];\n\n    // Drop rate limited items from envelope\n    (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.forEachEnvelopeItem)(envelope, (item, type) => {\n      const dataCategory = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.envelopeItemTypeToDataCategory)(type);\n      if ((0,_utils_hoist_ratelimit_js__WEBPACK_IMPORTED_MODULE_2__.isRateLimited)(rateLimits, dataCategory)) {\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_3__.resolvedSyncPromise)({});\n    }\n\n    const filteredEnvelope = (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.createEnvelope)(envelope[0], filteredEnvelopeItems );\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason) => {\n      (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.forEachEnvelopeItem)(filteredEnvelope, (item, type) => {\n        options.recordDroppedEvent(reason, (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.envelopeItemTypeToDataCategory)(type));\n      });\n    };\n\n    const requestTask = () =>\n      makeRequest({ body: (0,_utils_hoist_envelope_js__WEBPACK_IMPORTED_MODULE_1__.serializeEnvelope)(filteredEnvelope) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_5__.logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = (0,_utils_hoist_ratelimit_js__WEBPACK_IMPORTED_MODULE_2__.updateRateLimits)(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_5__.logger.error('Encountered error running transport request:', error);\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error === _utils_hoist_promisebuffer_js__WEBPACK_IMPORTED_MODULE_0__.SENTRY_BUFFER_FULL_ERROR) {\n          _debug_build_js__WEBPACK_IMPORTED_MODULE_4__.DEBUG_BUILD && _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_5__.logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return (0,_utils_hoist_syncpromise_js__WEBPACK_IMPORTED_MODULE_3__.resolvedSyncPromise)({});\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n\n\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFuc3BvcnRzL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDb0Y7QUFDbEY7QUFDNEM7QUFDaEI7QUFDVjs7QUFFcEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnRkFBaUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSw2RUFBbUI7QUFDdkIsMkJBQTJCLHdGQUE4QjtBQUN6RCxVQUFVLHdFQUFhO0FBQ3ZCO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxhQUFhLGdGQUFtQixHQUFHO0FBQ25DOztBQUVBLDZCQUE2Qix3RUFBYzs7QUFFM0M7QUFDQTtBQUNBLE1BQU0sNkVBQW1CO0FBQ3pCLDJDQUEyQyx3RkFBOEI7QUFDekUsT0FBTztBQUNQOztBQUVBO0FBQ0Esb0JBQW9CLE1BQU0sMkVBQWlCLG9CQUFvQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdEQUFXLElBQUksMERBQU0sMkNBQTJDLHFCQUFxQjtBQUNqRzs7QUFFQSx1QkFBdUIsMkVBQWdCO0FBQ3ZDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxVQUFVLHdEQUFXLElBQUksMERBQU07QUFDL0I7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1GQUF3QjtBQUM5QyxVQUFVLHdEQUFXLElBQUksMERBQU07QUFDL0I7QUFDQSxpQkFBaUIsZ0ZBQW1CLEdBQUc7QUFDdkMsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUwRDtBQUMxRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cmFuc3BvcnRzL2Jhc2UuanM/YWZjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4uL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IGZvckVhY2hFbnZlbG9wZUl0ZW0sIGVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeSwgY3JlYXRlRW52ZWxvcGUsIHNlcmlhbGl6ZUVudmVsb3BlIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvZW52ZWxvcGUuanMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJztcbmltcG9ydCB7IG1ha2VQcm9taXNlQnVmZmVyLCBTRU5UUllfQlVGRkVSX0ZVTExfRVJST1IgfSBmcm9tICcuLi91dGlscy1ob2lzdC9wcm9taXNlYnVmZmVyLmpzJztcbmltcG9ydCB7IGlzUmF0ZUxpbWl0ZWQsIHVwZGF0ZVJhdGVMaW1pdHMgfSBmcm9tICcuLi91dGlscy1ob2lzdC9yYXRlbGltaXQuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZWRTeW5jUHJvbWlzZSB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L3N5bmNwcm9taXNlLmpzJztcblxuY29uc3QgREVGQVVMVF9UUkFOU1BPUlRfQlVGRkVSX1NJWkUgPSA2NDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGEgU2VudHJ5IGBUcmFuc3BvcnRgXG4gKlxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBwYXJhbSBtYWtlUmVxdWVzdFxuICovXG5mdW5jdGlvbiBjcmVhdGVUcmFuc3BvcnQoXG4gIG9wdGlvbnMsXG4gIG1ha2VSZXF1ZXN0LFxuICBidWZmZXIgPSBtYWtlUHJvbWlzZUJ1ZmZlcihcbiAgICBvcHRpb25zLmJ1ZmZlclNpemUgfHwgREVGQVVMVF9UUkFOU1BPUlRfQlVGRkVSX1NJWkUsXG4gICksXG4pIHtcbiAgbGV0IHJhdGVMaW1pdHMgPSB7fTtcbiAgY29uc3QgZmx1c2ggPSAodGltZW91dCkgPT4gYnVmZmVyLmRyYWluKHRpbWVvdXQpO1xuXG4gIGZ1bmN0aW9uIHNlbmQoZW52ZWxvcGUpIHtcbiAgICBjb25zdCBmaWx0ZXJlZEVudmVsb3BlSXRlbXMgPSBbXTtcblxuICAgIC8vIERyb3AgcmF0ZSBsaW1pdGVkIGl0ZW1zIGZyb20gZW52ZWxvcGVcbiAgICBmb3JFYWNoRW52ZWxvcGVJdGVtKGVudmVsb3BlLCAoaXRlbSwgdHlwZSkgPT4ge1xuICAgICAgY29uc3QgZGF0YUNhdGVnb3J5ID0gZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5KHR5cGUpO1xuICAgICAgaWYgKGlzUmF0ZUxpbWl0ZWQocmF0ZUxpbWl0cywgZGF0YUNhdGVnb3J5KSkge1xuICAgICAgICBvcHRpb25zLnJlY29yZERyb3BwZWRFdmVudCgncmF0ZWxpbWl0X2JhY2tvZmYnLCBkYXRhQ2F0ZWdvcnkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlsdGVyZWRFbnZlbG9wZUl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTa2lwIHNlbmRpbmcgaWYgZW52ZWxvcGUgaXMgZW1wdHkgYWZ0ZXIgZmlsdGVyaW5nIG91dCByYXRlIGxpbWl0ZWQgZXZlbnRzXG4gICAgaWYgKGZpbHRlcmVkRW52ZWxvcGVJdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiByZXNvbHZlZFN5bmNQcm9taXNlKHt9KTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJlZEVudmVsb3BlID0gY3JlYXRlRW52ZWxvcGUoZW52ZWxvcGVbMF0sIGZpbHRlcmVkRW52ZWxvcGVJdGVtcyApO1xuXG4gICAgLy8gQ3JlYXRlcyBjbGllbnQgcmVwb3J0IGZvciBlYWNoIGl0ZW0gaW4gYW4gZW52ZWxvcGVcbiAgICBjb25zdCByZWNvcmRFbnZlbG9wZUxvc3MgPSAocmVhc29uKSA9PiB7XG4gICAgICBmb3JFYWNoRW52ZWxvcGVJdGVtKGZpbHRlcmVkRW52ZWxvcGUsIChpdGVtLCB0eXBlKSA9PiB7XG4gICAgICAgIG9wdGlvbnMucmVjb3JkRHJvcHBlZEV2ZW50KHJlYXNvbiwgZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5KHR5cGUpKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCByZXF1ZXN0VGFzayA9ICgpID0+XG4gICAgICBtYWtlUmVxdWVzdCh7IGJvZHk6IHNlcmlhbGl6ZUVudmVsb3BlKGZpbHRlcmVkRW52ZWxvcGUpIH0pLnRoZW4oXG4gICAgICAgIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHRocm93IG9uIE5PSyByZXNwb25zZXMsIGJ1dCB3ZSB3YW50IHRvIGF0IGxlYXN0IGxvZyB0aGVtXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IHVuZGVmaW5lZCAmJiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA8IDIwMCB8fCByZXNwb25zZS5zdGF0dXNDb2RlID49IDMwMCkpIHtcbiAgICAgICAgICAgIERFQlVHX0JVSUxEICYmIGxvZ2dlci53YXJuKGBTZW50cnkgcmVzcG9uZGVkIHdpdGggc3RhdHVzIGNvZGUgJHtyZXNwb25zZS5zdGF0dXNDb2RlfSB0byBzZW50IGV2ZW50LmApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJhdGVMaW1pdHMgPSB1cGRhdGVSYXRlTGltaXRzKHJhdGVMaW1pdHMsIHJlc3BvbnNlKTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICByZWNvcmRFbnZlbG9wZUxvc3MoJ25ldHdvcmtfZXJyb3InKTtcbiAgICAgICAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIuZXJyb3IoJ0VuY291bnRlcmVkIGVycm9yIHJ1bm5pbmcgdHJhbnNwb3J0IHJlcXVlc3Q6JywgZXJyb3IpO1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgIHJldHVybiBidWZmZXIuYWRkKHJlcXVlc3RUYXNrKS50aGVuKFxuICAgICAgcmVzdWx0ID0+IHJlc3VsdCxcbiAgICAgIGVycm9yID0+IHtcbiAgICAgICAgaWYgKGVycm9yID09PSBTRU5UUllfQlVGRkVSX0ZVTExfRVJST1IpIHtcbiAgICAgICAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIuZXJyb3IoJ1NraXBwZWQgc2VuZGluZyBldmVudCBiZWNhdXNlIGJ1ZmZlciBpcyBmdWxsLicpO1xuICAgICAgICAgIHJlY29yZEVudmVsb3BlTG9zcygncXVldWVfb3ZlcmZsb3cnKTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRTeW5jUHJvbWlzZSh7fSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2VuZCxcbiAgICBmbHVzaCxcbiAgfTtcbn1cblxuZXhwb3J0IHsgREVGQVVMVF9UUkFOU1BPUlRfQlVGRkVSX1NJWkUsIGNyZWF0ZVRyYW5zcG9ydCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/transports/base.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/trpc.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/trpc.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trpcMiddleware: () => (/* binding */ trpcMiddleware)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _exports_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exports.js */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-hoist/object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _tracing_trace_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tracing/trace.js */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n/* harmony import */ var _utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils-hoist/normalize.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst trpcCaptureContext = { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } };\n\nfunction captureIfError(nextResult) {\n  // TODO: Set span status based on what TRPCError was encountered\n  if (\n    typeof nextResult === 'object' &&\n    nextResult !== null &&\n    'ok' in nextResult &&\n    !nextResult.ok &&\n    'error' in nextResult\n  ) {\n    (0,_exports_js__WEBPACK_IMPORTED_MODULE_0__.captureException)(nextResult.error, trpcCaptureContext);\n  }\n}\n\n/**\n * Sentry tRPC middleware that captures errors and creates spans for tRPC procedures.\n */\nfunction trpcMiddleware(options = {}) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return async function (opts) {\n    const { path, type, next, rawInput, getRawInput } = opts;\n\n    const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_1__.getClient)();\n    const clientOptions = client?.getOptions();\n\n    const trpcContext = {\n      procedure_path: path,\n      procedure_type: type,\n    };\n\n    (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(\n      trpcContext,\n      '__sentry_override_normalization_depth__',\n      1 + // 1 for context.input + the normal normalization depth\n        (clientOptions?.normalizeDepth ?? 5), // 5 is a sane depth\n    );\n\n    if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions?.sendDefaultPii) {\n      if (rawInput !== undefined) {\n        trpcContext.input = (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_3__.normalize)(rawInput);\n      }\n\n      if (getRawInput !== undefined && typeof getRawInput === 'function') {\n        try {\n          const rawRes = await getRawInput();\n\n          trpcContext.input = (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_3__.normalize)(rawRes);\n        } catch (err) {\n          // noop\n        }\n      }\n    }\n\n    return (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_1__.withIsolationScope)(scope => {\n      scope.setContext('trpc', trpcContext);\n      return (0,_tracing_trace_js__WEBPACK_IMPORTED_MODULE_4__.startSpanManual)(\n        {\n          name: `trpc/${path}`,\n          op: 'rpc.server',\n          attributes: {\n            [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n            [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc',\n          },\n          forceTransaction: !!options.forceTransaction,\n        },\n        async span => {\n          try {\n            const nextResult = await next();\n            captureIfError(nextResult);\n            span.end();\n            return nextResult;\n          } catch (e) {\n            (0,_exports_js__WEBPACK_IMPORTED_MODULE_0__.captureException)(e, trpcCaptureContext);\n            span.end();\n            throw e;\n          }\n        },\n      ) ;\n    });\n  };\n}\n\n\n//# sourceMappingURL=trpc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS90cnBjLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBbUU7QUFDbkI7QUFDNkQ7QUFDaEY7QUFDc0M7QUFDekM7QUFDSztBQUNFO0FBQ29CO0FBQ0U7O0FBRXZELDZCQUE2QixhQUFhLHdCQUF3Qjs7QUFFbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSw2REFBZ0I7QUFDcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwQ0FBMEM7O0FBRXRELG1CQUFtQiw0REFBUztBQUM1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGdGQUF3QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEIsb0VBQVM7QUFDckM7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDhCQUE4QixvRUFBUztBQUN2QyxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxxRUFBa0I7QUFDN0I7QUFDQSxhQUFhLGtFQUFlO0FBQzVCO0FBQ0Esd0JBQXdCLEtBQUs7QUFDN0I7QUFDQTtBQUNBLGFBQWEsb0ZBQWdDO0FBQzdDLGFBQWEsb0ZBQWdDO0FBQzdDLFdBQVc7QUFDWDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1osWUFBWSw2REFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3RycGMuanM/NTNhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDbGllbnQsIHdpdGhJc29sYXRpb25TY29wZSB9IGZyb20gJy4vY3VycmVudFNjb3Blcy5qcyc7XG5pbXBvcnQgeyBjYXB0dXJlRXhjZXB0aW9uIH0gZnJvbSAnLi9leHBvcnRzLmpzJztcbmltcG9ydCB7IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSB9IGZyb20gJy4vc2VtYW50aWNBdHRyaWJ1dGVzLmpzJztcbmltcG9ydCAnLi90cmFjaW5nL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkgfSBmcm9tICcuL3V0aWxzLWhvaXN0L29iamVjdC5qcyc7XG5pbXBvcnQgJy4vZGVidWctYnVpbGQuanMnO1xuaW1wb3J0ICcuL3V0aWxzLWhvaXN0L3RpbWUuanMnO1xuaW1wb3J0ICcuL3V0aWxzLWhvaXN0L2xvZ2dlci5qcyc7XG5pbXBvcnQgeyBzdGFydFNwYW5NYW51YWwgfSBmcm9tICcuL3RyYWNpbmcvdHJhY2UuanMnO1xuaW1wb3J0IHsgbm9ybWFsaXplIH0gZnJvbSAnLi91dGlscy1ob2lzdC9ub3JtYWxpemUuanMnO1xuXG5jb25zdCB0cnBjQ2FwdHVyZUNvbnRleHQgPSB7IG1lY2hhbmlzbTogeyBoYW5kbGVkOiBmYWxzZSwgZGF0YTogeyBmdW5jdGlvbjogJ3RycGNNaWRkbGV3YXJlJyB9IH0gfTtcblxuZnVuY3Rpb24gY2FwdHVyZUlmRXJyb3IobmV4dFJlc3VsdCkge1xuICAvLyBUT0RPOiBTZXQgc3BhbiBzdGF0dXMgYmFzZWQgb24gd2hhdCBUUlBDRXJyb3Igd2FzIGVuY291bnRlcmVkXG4gIGlmIChcbiAgICB0eXBlb2YgbmV4dFJlc3VsdCA9PT0gJ29iamVjdCcgJiZcbiAgICBuZXh0UmVzdWx0ICE9PSBudWxsICYmXG4gICAgJ29rJyBpbiBuZXh0UmVzdWx0ICYmXG4gICAgIW5leHRSZXN1bHQub2sgJiZcbiAgICAnZXJyb3InIGluIG5leHRSZXN1bHRcbiAgKSB7XG4gICAgY2FwdHVyZUV4Y2VwdGlvbihuZXh0UmVzdWx0LmVycm9yLCB0cnBjQ2FwdHVyZUNvbnRleHQpO1xuICB9XG59XG5cbi8qKlxuICogU2VudHJ5IHRSUEMgbWlkZGxld2FyZSB0aGF0IGNhcHR1cmVzIGVycm9ycyBhbmQgY3JlYXRlcyBzcGFucyBmb3IgdFJQQyBwcm9jZWR1cmVzLlxuICovXG5mdW5jdGlvbiB0cnBjTWlkZGxld2FyZShvcHRpb25zID0ge30pIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAvLyBAdHMtaWdub3JlXG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiAob3B0cykge1xuICAgIGNvbnN0IHsgcGF0aCwgdHlwZSwgbmV4dCwgcmF3SW5wdXQsIGdldFJhd0lucHV0IH0gPSBvcHRzO1xuXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgY29uc3QgY2xpZW50T3B0aW9ucyA9IGNsaWVudD8uZ2V0T3B0aW9ucygpO1xuXG4gICAgY29uc3QgdHJwY0NvbnRleHQgPSB7XG4gICAgICBwcm9jZWR1cmVfcGF0aDogcGF0aCxcbiAgICAgIHByb2NlZHVyZV90eXBlOiB0eXBlLFxuICAgIH07XG5cbiAgICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoXG4gICAgICB0cnBjQ29udGV4dCxcbiAgICAgICdfX3NlbnRyeV9vdmVycmlkZV9ub3JtYWxpemF0aW9uX2RlcHRoX18nLFxuICAgICAgMSArIC8vIDEgZm9yIGNvbnRleHQuaW5wdXQgKyB0aGUgbm9ybWFsIG5vcm1hbGl6YXRpb24gZGVwdGhcbiAgICAgICAgKGNsaWVudE9wdGlvbnM/Lm5vcm1hbGl6ZURlcHRoID8/IDUpLCAvLyA1IGlzIGEgc2FuZSBkZXB0aFxuICAgICk7XG5cbiAgICBpZiAob3B0aW9ucy5hdHRhY2hScGNJbnB1dCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5hdHRhY2hScGNJbnB1dCA6IGNsaWVudE9wdGlvbnM/LnNlbmREZWZhdWx0UGlpKSB7XG4gICAgICBpZiAocmF3SW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0cnBjQ29udGV4dC5pbnB1dCA9IG5vcm1hbGl6ZShyYXdJbnB1dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRSYXdJbnB1dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBnZXRSYXdJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJhd1JlcyA9IGF3YWl0IGdldFJhd0lucHV0KCk7XG5cbiAgICAgICAgICB0cnBjQ29udGV4dC5pbnB1dCA9IG5vcm1hbGl6ZShyYXdSZXMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvLyBub29wXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd2l0aElzb2xhdGlvblNjb3BlKHNjb3BlID0+IHtcbiAgICAgIHNjb3BlLnNldENvbnRleHQoJ3RycGMnLCB0cnBjQ29udGV4dCk7XG4gICAgICByZXR1cm4gc3RhcnRTcGFuTWFudWFsKFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogYHRycGMvJHtwYXRofWAsXG4gICAgICAgICAgb3A6ICdycGMuc2VydmVyJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBbU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0VdOiAncm91dGUnLFxuICAgICAgICAgICAgW1NFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8ucnBjLnRycGMnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZm9yY2VUcmFuc2FjdGlvbjogISFvcHRpb25zLmZvcmNlVHJhbnNhY3Rpb24sXG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHNwYW4gPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0UmVzdWx0ID0gYXdhaXQgbmV4dCgpO1xuICAgICAgICAgICAgY2FwdHVyZUlmRXJyb3IobmV4dFJlc3VsdCk7XG4gICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICAgICAgcmV0dXJuIG5leHRSZXN1bHQ7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY2FwdHVyZUV4Y2VwdGlvbihlLCB0cnBjQ2FwdHVyZUNvbnRleHQpO1xuICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgKSA7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCB7IHRycGNNaWRkbGV3YXJlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cnBjLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/trpc.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/aggregate-errors.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/aggregate-errors.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyAggregateErrorsToEvent: () => (/* binding */ applyAggregateErrorsToEvent)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nfunction applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation,\n  parser,\n  key,\n  limit,\n  event,\n  hint,\n) {\n  if (!event.exception?.values || !hint || !(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isInstanceOf)(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      hint.originalException ,\n      key,\n      event.exception.values,\n      originalException,\n      0,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation,\n  parser,\n  limit,\n  error,\n  key,\n  prevExceptions,\n  exception,\n  exceptionId,\n) {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isInstanceOf)(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isInstanceOf)(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception, exceptionId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception,\n  source,\n  exceptionId,\n  parentId,\n) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n\n\n//# sourceMappingURL=aggregate-errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9hZ2dyZWdhdGUtZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLG9EQUFZO0FBQ3hEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxNQUFNLG9EQUFZO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsb0RBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLEVBQUU7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQ7O0FBRWpEO0FBQ0E7QUFDQSxpREFBaUQsMEJBQTBCO0FBQzNFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFdUM7QUFDdkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvYWdncmVnYXRlLWVycm9ycy5qcz8zOTk0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzSW5zdGFuY2VPZiB9IGZyb20gJy4vaXMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgZXhjZXB0aW9ucyBpbnNpZGUgYGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNgIGZvciBlcnJvcnMgdGhhdCBhcmUgbmVzdGVkIG9uIHByb3BlcnRpZXMgYmFzZWQgb24gdGhlIGBrZXlgIHBhcmFtZXRlci5cbiAqL1xuZnVuY3Rpb24gYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50KFxuICBleGNlcHRpb25Gcm9tRXJyb3JJbXBsZW1lbnRhdGlvbixcbiAgcGFyc2VyLFxuICBrZXksXG4gIGxpbWl0LFxuICBldmVudCxcbiAgaGludCxcbikge1xuICBpZiAoIWV2ZW50LmV4Y2VwdGlvbj8udmFsdWVzIHx8ICFoaW50IHx8ICFpc0luc3RhbmNlT2YoaGludC5vcmlnaW5hbEV4Y2VwdGlvbiwgRXJyb3IpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gR2VuZXJhbGx5IHNwZWFraW5nIHRoZSBsYXN0IGl0ZW0gaW4gYGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNgIGlzIHRoZSBleGNlcHRpb24gb3JpZ2luYXRpbmcgZnJvbSB0aGUgb3JpZ2luYWwgRXJyb3JcbiAgY29uc3Qgb3JpZ2luYWxFeGNlcHRpb24gPVxuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMubGVuZ3RoID4gMCA/IGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXNbZXZlbnQuZXhjZXB0aW9uLnZhbHVlcy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAvLyBXZSBvbmx5IGNyZWF0ZSBleGNlcHRpb24gZ3JvdXBpbmcgaWYgdGhlcmUgaXMgYW4gZXhjZXB0aW9uIGluIHRoZSBldmVudC5cbiAgaWYgKG9yaWdpbmFsRXhjZXB0aW9uKSB7XG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcyA9IGFnZ3JlZ2F0ZUV4Y2VwdGlvbnNGcm9tRXJyb3IoXG4gICAgICBleGNlcHRpb25Gcm9tRXJyb3JJbXBsZW1lbnRhdGlvbixcbiAgICAgIHBhcnNlcixcbiAgICAgIGxpbWl0LFxuICAgICAgaGludC5vcmlnaW5hbEV4Y2VwdGlvbiAsXG4gICAgICBrZXksXG4gICAgICBldmVudC5leGNlcHRpb24udmFsdWVzLFxuICAgICAgb3JpZ2luYWxFeGNlcHRpb24sXG4gICAgICAwLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWdncmVnYXRlRXhjZXB0aW9uc0Zyb21FcnJvcihcbiAgZXhjZXB0aW9uRnJvbUVycm9ySW1wbGVtZW50YXRpb24sXG4gIHBhcnNlcixcbiAgbGltaXQsXG4gIGVycm9yLFxuICBrZXksXG4gIHByZXZFeGNlcHRpb25zLFxuICBleGNlcHRpb24sXG4gIGV4Y2VwdGlvbklkLFxuKSB7XG4gIGlmIChwcmV2RXhjZXB0aW9ucy5sZW5ndGggPj0gbGltaXQgKyAxKSB7XG4gICAgcmV0dXJuIHByZXZFeGNlcHRpb25zO1xuICB9XG5cbiAgbGV0IG5ld0V4Y2VwdGlvbnMgPSBbLi4ucHJldkV4Y2VwdGlvbnNdO1xuXG4gIC8vIFJlY3Vyc2l2ZWx5IGNhbGwgdGhpcyBmdW5jdGlvbiBpbiBvcmRlciB0byB3YWxrIGRvd24gYSBjaGFpbiBvZiBlcnJvcnNcbiAgaWYgKGlzSW5zdGFuY2VPZihlcnJvcltrZXldLCBFcnJvcikpIHtcbiAgICBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yUGFyZW50RXhjZXB0aW9uKGV4Y2VwdGlvbiwgZXhjZXB0aW9uSWQpO1xuICAgIGNvbnN0IG5ld0V4Y2VwdGlvbiA9IGV4Y2VwdGlvbkZyb21FcnJvckltcGxlbWVudGF0aW9uKHBhcnNlciwgZXJyb3Jba2V5XSk7XG4gICAgY29uc3QgbmV3RXhjZXB0aW9uSWQgPSBuZXdFeGNlcHRpb25zLmxlbmd0aDtcbiAgICBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yQ2hpbGRFeGNlcHRpb24obmV3RXhjZXB0aW9uLCBrZXksIG5ld0V4Y2VwdGlvbklkLCBleGNlcHRpb25JZCk7XG4gICAgbmV3RXhjZXB0aW9ucyA9IGFnZ3JlZ2F0ZUV4Y2VwdGlvbnNGcm9tRXJyb3IoXG4gICAgICBleGNlcHRpb25Gcm9tRXJyb3JJbXBsZW1lbnRhdGlvbixcbiAgICAgIHBhcnNlcixcbiAgICAgIGxpbWl0LFxuICAgICAgZXJyb3Jba2V5XSxcbiAgICAgIGtleSxcbiAgICAgIFtuZXdFeGNlcHRpb24sIC4uLm5ld0V4Y2VwdGlvbnNdLFxuICAgICAgbmV3RXhjZXB0aW9uLFxuICAgICAgbmV3RXhjZXB0aW9uSWQsXG4gICAgKTtcbiAgfVxuXG4gIC8vIFRoaXMgd2lsbCBjcmVhdGUgZXhjZXB0aW9uIGdyb3VwaW5nIGZvciBBZ2dyZWdhdGVFcnJvcnNcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQWdncmVnYXRlRXJyb3JcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXJyb3IuZXJyb3JzKSkge1xuICAgIGVycm9yLmVycm9ycy5mb3JFYWNoKChjaGlsZEVycm9yLCBpKSA9PiB7XG4gICAgICBpZiAoaXNJbnN0YW5jZU9mKGNoaWxkRXJyb3IsIEVycm9yKSkge1xuICAgICAgICBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yUGFyZW50RXhjZXB0aW9uKGV4Y2VwdGlvbiwgZXhjZXB0aW9uSWQpO1xuICAgICAgICBjb25zdCBuZXdFeGNlcHRpb24gPSBleGNlcHRpb25Gcm9tRXJyb3JJbXBsZW1lbnRhdGlvbihwYXJzZXIsIGNoaWxkRXJyb3IpO1xuICAgICAgICBjb25zdCBuZXdFeGNlcHRpb25JZCA9IG5ld0V4Y2VwdGlvbnMubGVuZ3RoO1xuICAgICAgICBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yQ2hpbGRFeGNlcHRpb24obmV3RXhjZXB0aW9uLCBgZXJyb3JzWyR7aX1dYCwgbmV3RXhjZXB0aW9uSWQsIGV4Y2VwdGlvbklkKTtcbiAgICAgICAgbmV3RXhjZXB0aW9ucyA9IGFnZ3JlZ2F0ZUV4Y2VwdGlvbnNGcm9tRXJyb3IoXG4gICAgICAgICAgZXhjZXB0aW9uRnJvbUVycm9ySW1wbGVtZW50YXRpb24sXG4gICAgICAgICAgcGFyc2VyLFxuICAgICAgICAgIGxpbWl0LFxuICAgICAgICAgIGNoaWxkRXJyb3IsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIFtuZXdFeGNlcHRpb24sIC4uLm5ld0V4Y2VwdGlvbnNdLFxuICAgICAgICAgIG5ld0V4Y2VwdGlvbixcbiAgICAgICAgICBuZXdFeGNlcHRpb25JZCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXdFeGNlcHRpb25zO1xufVxuXG5mdW5jdGlvbiBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yUGFyZW50RXhjZXB0aW9uKGV4Y2VwdGlvbiwgZXhjZXB0aW9uSWQpIHtcbiAgLy8gRG9uJ3Qga25vdyBpZiB0aGlzIGRlZmF1bHQgbWFrZXMgc2Vuc2UuIFRoZSBwcm90b2NvbCByZXF1aXJlcyB1cyB0byBzZXQgdGhlc2UgdmFsdWVzIHNvIHdlIHBpY2sgKnNvbWUqIGRlZmF1bHQuXG4gIGV4Y2VwdGlvbi5tZWNoYW5pc20gPSBleGNlcHRpb24ubWVjaGFuaXNtIHx8IHsgdHlwZTogJ2dlbmVyaWMnLCBoYW5kbGVkOiB0cnVlIH07XG5cbiAgZXhjZXB0aW9uLm1lY2hhbmlzbSA9IHtcbiAgICAuLi5leGNlcHRpb24ubWVjaGFuaXNtLFxuICAgIC4uLihleGNlcHRpb24udHlwZSA9PT0gJ0FnZ3JlZ2F0ZUVycm9yJyAmJiB7IGlzX2V4Y2VwdGlvbl9ncm91cDogdHJ1ZSB9KSxcbiAgICBleGNlcHRpb25faWQ6IGV4Y2VwdGlvbklkLFxuICB9O1xufVxuXG5mdW5jdGlvbiBhcHBseUV4Y2VwdGlvbkdyb3VwRmllbGRzRm9yQ2hpbGRFeGNlcHRpb24oXG4gIGV4Y2VwdGlvbixcbiAgc291cmNlLFxuICBleGNlcHRpb25JZCxcbiAgcGFyZW50SWQsXG4pIHtcbiAgLy8gRG9uJ3Qga25vdyBpZiB0aGlzIGRlZmF1bHQgbWFrZXMgc2Vuc2UuIFRoZSBwcm90b2NvbCByZXF1aXJlcyB1cyB0byBzZXQgdGhlc2UgdmFsdWVzIHNvIHdlIHBpY2sgKnNvbWUqIGRlZmF1bHQuXG4gIGV4Y2VwdGlvbi5tZWNoYW5pc20gPSBleGNlcHRpb24ubWVjaGFuaXNtIHx8IHsgdHlwZTogJ2dlbmVyaWMnLCBoYW5kbGVkOiB0cnVlIH07XG5cbiAgZXhjZXB0aW9uLm1lY2hhbmlzbSA9IHtcbiAgICAuLi5leGNlcHRpb24ubWVjaGFuaXNtLFxuICAgIHR5cGU6ICdjaGFpbmVkJyxcbiAgICBzb3VyY2UsXG4gICAgZXhjZXB0aW9uX2lkOiBleGNlcHRpb25JZCxcbiAgICBwYXJlbnRfaWQ6IHBhcmVudElkLFxuICB9O1xufVxuXG5leHBvcnQgeyBhcHBseUFnZ3JlZ2F0ZUVycm9yc1RvRXZlbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFnZ3JlZ2F0ZS1lcnJvcnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/aggregate-errors.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_BAGGAGE_STRING_LENGTH: () => (/* binding */ MAX_BAGGAGE_STRING_LENGTH),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX),\n/* harmony export */   SENTRY_BAGGAGE_KEY_PREFIX_REGEX: () => (/* binding */ SENTRY_BAGGAGE_KEY_PREFIX_REGEX),\n/* harmony export */   baggageHeaderToDynamicSamplingContext: () => (/* binding */ baggageHeaderToDynamicSamplingContext),\n/* harmony export */   dynamicSamplingContextToSentryBaggageHeader: () => (/* binding */ dynamicSamplingContextToSentryBaggageHeader),\n/* harmony export */   objectToBaggageHeader: () => (/* binding */ objectToBaggageHeader),\n/* harmony export */   parseBaggageHeader: () => (/* binding */ parseBaggageHeader)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\n\nconst SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nconst MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nfunction baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader,\n) {\n  const baggageObject = parseBaggageHeader(baggageHeader);\n\n  if (!baggageObject) {\n    return undefined;\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext ;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nfunction dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext,\n) {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Take a baggage header and parse it into an object.\n */\nfunction parseBaggageHeader(\n  baggageHeader,\n) {\n  if (!baggageHeader || (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(baggageHeader) && !Array.isArray(baggageHeader))) {\n    return undefined;\n  }\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    return baggageHeader.reduce((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      Object.entries(currBaggageObject).forEach(([key, value]) => {\n        acc[key] = value;\n      });\n      return acc;\n    }, {});\n  }\n\n  return baggageHeaderToObject(baggageHeader);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader) {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry =>\n      baggageEntry.split('=').map(keyOrValue => {\n        try {\n          return decodeURIComponent(keyOrValue.trim());\n        } catch {\n          // We ignore errors here, e.g. if the value cannot be URL decoded.\n          // This will then be skipped in the next step\n          return;\n        }\n      }),\n    )\n    .reduce((acc, [key, value]) => {\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object) {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD &&\n        _logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n\n\n//# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/breadcrumb-log-level.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/breadcrumb-log-level.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBreadcrumbLogLevelFromHttpStatusCode: () => (/* binding */ getBreadcrumbLogLevelFromHttpStatusCode)\n/* harmony export */ });\n/**\n * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.\n */\nfunction getBreadcrumbLogLevelFromHttpStatusCode(statusCode) {\n  // NOTE: undefined defaults to 'info' in Sentry\n  if (statusCode === undefined) {\n    return undefined;\n  } else if (statusCode >= 400 && statusCode < 500) {\n    return 'warning';\n  } else if (statusCode >= 500) {\n    return 'error';\n  } else {\n    return undefined;\n  }\n}\n\n\n//# sourceMappingURL=breadcrumb-log-level.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9icmVhZGNydW1iLWxvZy1sZXZlbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVtRDtBQUNuRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9icmVhZGNydW1iLWxvZy1sZXZlbC5qcz84NTQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGV0ZXJtaW5lIGEgYnJlYWRjcnVtYidzIGxvZyBsZXZlbCAob25seSBgd2FybmluZ2Agb3IgYGVycm9yYCkgYmFzZWQgb24gYW4gSFRUUCBzdGF0dXMgY29kZS5cbiAqL1xuZnVuY3Rpb24gZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlKHN0YXR1c0NvZGUpIHtcbiAgLy8gTk9URTogdW5kZWZpbmVkIGRlZmF1bHRzIHRvICdpbmZvJyBpbiBTZW50cnlcbiAgaWYgKHN0YXR1c0NvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoc3RhdHVzQ29kZSA+PSA0MDAgJiYgc3RhdHVzQ29kZSA8IDUwMCkge1xuICAgIHJldHVybiAnd2FybmluZyc7XG4gIH0gZWxzZSBpZiAoc3RhdHVzQ29kZSA+PSA1MDApIHtcbiAgICByZXR1cm4gJ2Vycm9yJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWRjcnVtYi1sb2ctbGV2ZWwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/breadcrumb-log-level.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/browser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getComponentName: () => (/* binding */ getComponentName),\n/* harmony export */   getLocationHref: () => (/* binding */ getLocationHref),\n/* harmony export */   htmlTreeAsString: () => (/* binding */ htmlTreeAsString)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\nconst WINDOW = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ ;\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(\n  elem,\n  options = {},\n) {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem ;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  const elem = el\n\n;\n\n  const out = [];\n\n  if (!elem?.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    const className = elem.className;\n    if (className && (0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isString)(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nfunction getComponentName(elem) {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem ;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n\n\n//# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/browser.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/clientreport.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/clientreport.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClientReportEnvelope: () => (/* binding */ createClientReportEnvelope)\n/* harmony export */ });\n/* harmony import */ var _envelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./envelope.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\");\n/* harmony import */ var _time_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n\n\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nfunction createClientReportEnvelope(\n  discarded_events,\n  dsn,\n  timestamp,\n) {\n  const clientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || (0,_time_js__WEBPACK_IMPORTED_MODULE_0__.dateTimestampInSeconds)(),\n      discarded_events,\n    },\n  ];\n  return (0,_envelope_js__WEBPACK_IMPORTED_MODULE_1__.createEnvelope)(dsn ? { dsn } : {}, [clientReportItem]);\n}\n\n\n//# sourceMappingURL=clientreport.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9jbGllbnRyZXBvcnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQStDO0FBQ0k7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHVCQUF1QjtBQUM3QjtBQUNBLDhCQUE4QixnRUFBc0I7QUFDcEQ7QUFDQSxLQUFLO0FBQ0w7QUFDQSxTQUFTLDREQUFjLFNBQVMsTUFBTSxJQUFJO0FBQzFDOztBQUVzQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9jbGllbnRyZXBvcnQuanM/N2FjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVFbnZlbG9wZSB9IGZyb20gJy4vZW52ZWxvcGUuanMnO1xuaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyB9IGZyb20gJy4vdGltZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBjbGllbnQgcmVwb3J0IGVudmVsb3BlXG4gKiBAcGFyYW0gZGlzY2FyZGVkX2V2ZW50cyBBbiBhcnJheSBvZiBkaXNjYXJkIGV2ZW50c1xuICogQHBhcmFtIGRzbiBBIERTTiB0aGF0IGNhbiBiZSBzZXQgb24gdGhlIGhlYWRlci4gT3B0aW9uYWwuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudFJlcG9ydEVudmVsb3BlKFxuICBkaXNjYXJkZWRfZXZlbnRzLFxuICBkc24sXG4gIHRpbWVzdGFtcCxcbikge1xuICBjb25zdCBjbGllbnRSZXBvcnRJdGVtID0gW1xuICAgIHsgdHlwZTogJ2NsaWVudF9yZXBvcnQnIH0sXG4gICAge1xuICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAgfHwgZGF0ZVRpbWVzdGFtcEluU2Vjb25kcygpLFxuICAgICAgZGlzY2FyZGVkX2V2ZW50cyxcbiAgICB9LFxuICBdO1xuICByZXR1cm4gY3JlYXRlRW52ZWxvcGUoZHNuID8geyBkc24gfSA6IHt9LCBbY2xpZW50UmVwb3J0SXRlbV0pO1xufVxuXG5leHBvcnQgeyBjcmVhdGVDbGllbnRSZXBvcnRFbnZlbG9wZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50cmVwb3J0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/clientreport.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/debug-ids.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/debug-ids.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDebugImagesForResources: () => (/* binding */ getDebugImagesForResources),\n/* harmony export */   getFilenameToDebugIdMap: () => (/* binding */ getFilenameToDebugIdMap)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\nlet parsedStackResults;\nlet lastKeysCount;\nlet cachedFilenameDebugIds;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nfunction getFilenameToDebugIdMap(stackParser) {\n  const debugIdMap = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n\n    const result = parsedStackResults[stackKey];\n\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame?.filename;\n        const debugId = debugIdMap[stackKey];\n\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n\n    return acc;\n  }, {});\n\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nfunction getDebugImagesForResources(\n  stackParser,\n  resource_paths,\n) {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n\n  const images = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path] ,\n      });\n    }\n  }\n\n  return images;\n}\n\n\n//# sourceMappingURL=debug-ids.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9kZWJ1Zy1pZHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDOztBQUU1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIscURBQVU7QUFDL0I7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUcsSUFBSTs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFK0Q7QUFDL0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvZGVidWctaWRzLmpzPzNkYjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR0xPQkFMX09CSiB9IGZyb20gJy4vd29ybGR3aWRlLmpzJztcblxubGV0IHBhcnNlZFN0YWNrUmVzdWx0cztcbmxldCBsYXN0S2V5c0NvdW50O1xubGV0IGNhY2hlZEZpbGVuYW1lRGVidWdJZHM7XG5cbi8qKlxuICogUmV0dXJucyBhIG1hcCBvZiBmaWxlbmFtZXMgdG8gZGVidWcgaWRlbnRpZmllcnMuXG4gKi9cbmZ1bmN0aW9uIGdldEZpbGVuYW1lVG9EZWJ1Z0lkTWFwKHN0YWNrUGFyc2VyKSB7XG4gIGNvbnN0IGRlYnVnSWRNYXAgPSBHTE9CQUxfT0JKLl9zZW50cnlEZWJ1Z0lkcztcbiAgaWYgKCFkZWJ1Z0lkTWFwKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgZGVidWdJZEtleXMgPSBPYmplY3Qua2V5cyhkZWJ1Z0lkTWFwKTtcblxuICAvLyBJZiB0aGUgY291bnQgb2YgcmVnaXN0ZXJlZCBnbG9iYWxzIGhhc24ndCBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGNhbGwsIHdlXG4gIC8vIGNhbiBqdXN0IHJldHVybiB0aGUgY2FjaGVkIHJlc3VsdC5cbiAgaWYgKGNhY2hlZEZpbGVuYW1lRGVidWdJZHMgJiYgZGVidWdJZEtleXMubGVuZ3RoID09PSBsYXN0S2V5c0NvdW50KSB7XG4gICAgcmV0dXJuIGNhY2hlZEZpbGVuYW1lRGVidWdJZHM7XG4gIH1cblxuICBsYXN0S2V5c0NvdW50ID0gZGVidWdJZEtleXMubGVuZ3RoO1xuXG4gIC8vIEJ1aWxkIGEgbWFwIG9mIGZpbGVuYW1lIC0+IGRlYnVnX2lkLlxuICBjYWNoZWRGaWxlbmFtZURlYnVnSWRzID0gZGVidWdJZEtleXMucmVkdWNlKChhY2MsIHN0YWNrS2V5KSA9PiB7XG4gICAgaWYgKCFwYXJzZWRTdGFja1Jlc3VsdHMpIHtcbiAgICAgIHBhcnNlZFN0YWNrUmVzdWx0cyA9IHt9O1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlZFN0YWNrUmVzdWx0c1tzdGFja0tleV07XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICBhY2NbcmVzdWx0WzBdXSA9IHJlc3VsdFsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcGFyc2VkU3RhY2sgPSBzdGFja1BhcnNlcihzdGFja0tleSk7XG5cbiAgICAgIGZvciAobGV0IGkgPSBwYXJzZWRTdGFjay5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBzdGFja0ZyYW1lID0gcGFyc2VkU3RhY2tbaV07XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gc3RhY2tGcmFtZT8uZmlsZW5hbWU7XG4gICAgICAgIGNvbnN0IGRlYnVnSWQgPSBkZWJ1Z0lkTWFwW3N0YWNrS2V5XTtcblxuICAgICAgICBpZiAoZmlsZW5hbWUgJiYgZGVidWdJZCkge1xuICAgICAgICAgIGFjY1tmaWxlbmFtZV0gPSBkZWJ1Z0lkO1xuICAgICAgICAgIHBhcnNlZFN0YWNrUmVzdWx0c1tzdGFja0tleV0gPSBbZmlsZW5hbWUsIGRlYnVnSWRdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIHJldHVybiBjYWNoZWRGaWxlbmFtZURlYnVnSWRzO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIGRlYnVnIGltYWdlcyBmb3IgdGhlIGdpdmVuIHJlc291cmNlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVidWdJbWFnZXNGb3JSZXNvdXJjZXMoXG4gIHN0YWNrUGFyc2VyLFxuICByZXNvdXJjZV9wYXRocyxcbikge1xuICBjb25zdCBmaWxlbmFtZURlYnVnSWRNYXAgPSBnZXRGaWxlbmFtZVRvRGVidWdJZE1hcChzdGFja1BhcnNlcik7XG5cbiAgaWYgKCFmaWxlbmFtZURlYnVnSWRNYXApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCBpbWFnZXMgPSBbXTtcbiAgZm9yIChjb25zdCBwYXRoIG9mIHJlc291cmNlX3BhdGhzKSB7XG4gICAgaWYgKHBhdGggJiYgZmlsZW5hbWVEZWJ1Z0lkTWFwW3BhdGhdKSB7XG4gICAgICBpbWFnZXMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdzb3VyY2VtYXAnLFxuICAgICAgICBjb2RlX2ZpbGU6IHBhdGgsXG4gICAgICAgIGRlYnVnX2lkOiBmaWxlbmFtZURlYnVnSWRNYXBbcGF0aF0gLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGltYWdlcztcbn1cblxuZXhwb3J0IHsgZ2V0RGVidWdJbWFnZXNGb3JSZXNvdXJjZXMsIGdldEZpbGVuYW1lVG9EZWJ1Z0lkTWFwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1pZHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/debug-ids.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dsnFromString: () => (/* binding */ dsnFromString),\n/* harmony export */   dsnToString: () => (/* binding */ dsnToString),\n/* harmony export */   extractOrgIdFromDsnHost: () => (/* binding */ extractOrgIdFromDsnHost),\n/* harmony export */   makeDsn: () => (/* binding */ makeDsn)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n\n\n\n/** Regular expression used to extract org ID from a DSN host. */\nconst ORG_ID_REGEX = /^o(\\d+)\\./;\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn, withPassword = false) {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nfunction dsnFromString(str) {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    (0,_logger_js__WEBPACK_IMPORTED_MODULE_0__.consoleSandbox)(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() ;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol , publicKey });\n}\n\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn) {\n  if (!_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Extract the org ID from a DSN host.\n *\n * @param host The host from a DSN\n * @returns The org ID if found, undefined otherwise\n */\nfunction extractOrgIdFromDsnHost(host) {\n  const match = host.match(ORG_ID_REGEX);\n\n  return match?.[1];\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nfunction makeDsn(from) {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n\n\n//# sourceMappingURL=dsn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9kc24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWdEO0FBQ0s7O0FBRXJEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHlEQUF5RDtBQUNuRTtBQUNBLE9BQU8sU0FBUyxLQUFLLFVBQVUsRUFBRSwyQkFBMkIsS0FBSyxPQUFPO0FBQ3hFLFFBQVEsS0FBSyxFQUFFLFdBQVcsS0FBSyxPQUFPLEdBQUcsVUFBVSxLQUFLLFVBQVUsRUFBRSxVQUFVO0FBQzlFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSSwwREFBYztBQUNsQjtBQUNBLDJDQUEyQyxJQUFJO0FBQy9DLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkIsbUVBQW1FO0FBQ2hHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPLHdEQUFXO0FBQ2xCO0FBQ0E7O0FBRUEsVUFBVSw0QkFBNEI7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBLE1BQU0sOENBQU0sOEJBQThCLFdBQVc7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLDhDQUFNLGdEQUFnRCxVQUFVO0FBQ3BFO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLDhDQUFNLCtDQUErQyxTQUFTO0FBQ2xFO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLDhDQUFNLDJDQUEyQyxLQUFLO0FBQzFEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFd0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvZHNuLmpzPzlhZjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBjb25zb2xlU2FuZGJveCwgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXIuanMnO1xuXG4vKiogUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gZXh0cmFjdCBvcmcgSUQgZnJvbSBhIERTTiBob3N0LiAqL1xuY29uc3QgT1JHX0lEX1JFR0VYID0gL15vKFxcZCspXFwuLztcblxuLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHBhcnNlIGEgRHNuLiAqL1xuY29uc3QgRFNOX1JFR0VYID0gL14oPzooXFx3Kyk6KVxcL1xcLyg/OihcXHcrKSg/OjooXFx3Kyk/KT9AKShbXFx3Li1dKykoPzo6KFxcZCspKT9cXC8oLispLztcblxuZnVuY3Rpb24gaXNWYWxpZFByb3RvY29sKHByb3RvY29sKSB7XG4gIHJldHVybiBwcm90b2NvbCA9PT0gJ2h0dHAnIHx8IHByb3RvY29sID09PSAnaHR0cHMnO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERzbi5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGlzIHdpbGwgcmVuZGVyIHRoZSBwdWJsaWMgcmVwcmVzZW50YXRpb24gd2l0aG91dCB0aGUgcGFzc3dvcmRcbiAqIGNvbXBvbmVudC4gVG8gZ2V0IHRoZSBkZXByZWNhdGVkIHByaXZhdGUgcmVwcmVzZW50YXRpb24sIHNldCBgd2l0aFBhc3N3b3JkYFxuICogdG8gdHJ1ZS5cbiAqXG4gKiBAcGFyYW0gd2l0aFBhc3N3b3JkIFdoZW4gc2V0IHRvIHRydWUsIHRoZSBwYXNzd29yZCB3aWxsIGJlIGluY2x1ZGVkLlxuICovXG5mdW5jdGlvbiBkc25Ub1N0cmluZyhkc24sIHdpdGhQYXNzd29yZCA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgaG9zdCwgcGF0aCwgcGFzcywgcG9ydCwgcHJvamVjdElkLCBwcm90b2NvbCwgcHVibGljS2V5IH0gPSBkc247XG4gIHJldHVybiAoXG4gICAgYCR7cHJvdG9jb2x9Oi8vJHtwdWJsaWNLZXl9JHt3aXRoUGFzc3dvcmQgJiYgcGFzcyA/IGA6JHtwYXNzfWAgOiAnJ31gICtcbiAgICBgQCR7aG9zdH0ke3BvcnQgPyBgOiR7cG9ydH1gIDogJyd9LyR7cGF0aCA/IGAke3BhdGh9L2AgOiBwYXRofSR7cHJvamVjdElkfWBcbiAgKTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgYSBEc24gZnJvbSBhIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gc3RyIEEgRHNuIGFzIHN0cmluZ1xuICogQHJldHVybnMgRHNuIGFzIERzbkNvbXBvbmVudHMgb3IgdW5kZWZpbmVkIGlmIEBwYXJhbSBzdHIgaXMgbm90IGEgdmFsaWQgRFNOIHN0cmluZ1xuICovXG5mdW5jdGlvbiBkc25Gcm9tU3RyaW5nKHN0cikge1xuICBjb25zdCBtYXRjaCA9IERTTl9SRUdFWC5leGVjKHN0cik7XG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIC8vIFRoaXMgc2hvdWxkIGJlIGxvZ2dlZCB0byB0aGUgY29uc29sZVxuICAgIGNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLmVycm9yKGBJbnZhbGlkIFNlbnRyeSBEc246ICR7c3RyfWApO1xuICAgIH0pO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBbcHJvdG9jb2wsIHB1YmxpY0tleSwgcGFzcyA9ICcnLCBob3N0ID0gJycsIHBvcnQgPSAnJywgbGFzdFBhdGggPSAnJ10gPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhdGggPSAnJztcbiAgbGV0IHByb2plY3RJZCA9IGxhc3RQYXRoO1xuXG4gIGNvbnN0IHNwbGl0ID0gcHJvamVjdElkLnNwbGl0KCcvJyk7XG4gIGlmIChzcGxpdC5sZW5ndGggPiAxKSB7XG4gICAgcGF0aCA9IHNwbGl0LnNsaWNlKDAsIC0xKS5qb2luKCcvJyk7XG4gICAgcHJvamVjdElkID0gc3BsaXQucG9wKCkgO1xuICB9XG5cbiAgaWYgKHByb2plY3RJZCkge1xuICAgIGNvbnN0IHByb2plY3RNYXRjaCA9IHByb2plY3RJZC5tYXRjaCgvXlxcZCsvKTtcbiAgICBpZiAocHJvamVjdE1hdGNoKSB7XG4gICAgICBwcm9qZWN0SWQgPSBwcm9qZWN0TWF0Y2hbMF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzbkZyb21Db21wb25lbnRzKHsgaG9zdCwgcGFzcywgcGF0aCwgcHJvamVjdElkLCBwb3J0LCBwcm90b2NvbDogcHJvdG9jb2wgLCBwdWJsaWNLZXkgfSk7XG59XG5cbmZ1bmN0aW9uIGRzbkZyb21Db21wb25lbnRzKGNvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogY29tcG9uZW50cy5wcm90b2NvbCxcbiAgICBwdWJsaWNLZXk6IGNvbXBvbmVudHMucHVibGljS2V5IHx8ICcnLFxuICAgIHBhc3M6IGNvbXBvbmVudHMucGFzcyB8fCAnJyxcbiAgICBob3N0OiBjb21wb25lbnRzLmhvc3QsXG4gICAgcG9ydDogY29tcG9uZW50cy5wb3J0IHx8ICcnLFxuICAgIHBhdGg6IGNvbXBvbmVudHMucGF0aCB8fCAnJyxcbiAgICBwcm9qZWN0SWQ6IGNvbXBvbmVudHMucHJvamVjdElkLFxuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURzbihkc24pIHtcbiAgaWYgKCFERUJVR19CVUlMRCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgeyBwb3J0LCBwcm9qZWN0SWQsIHByb3RvY29sIH0gPSBkc247XG5cbiAgY29uc3QgcmVxdWlyZWRDb21wb25lbnRzID0gWydwcm90b2NvbCcsICdwdWJsaWNLZXknLCAnaG9zdCcsICdwcm9qZWN0SWQnXTtcbiAgY29uc3QgaGFzTWlzc2luZ1JlcXVpcmVkQ29tcG9uZW50ID0gcmVxdWlyZWRDb21wb25lbnRzLmZpbmQoY29tcG9uZW50ID0+IHtcbiAgICBpZiAoIWRzbltjb21wb25lbnRdKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoYEludmFsaWQgU2VudHJ5IERzbjogJHtjb21wb25lbnR9IG1pc3NpbmdgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuXG4gIGlmIChoYXNNaXNzaW5nUmVxdWlyZWRDb21wb25lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXByb2plY3RJZC5tYXRjaCgvXlxcZCskLykpIHtcbiAgICBsb2dnZXIuZXJyb3IoYEludmFsaWQgU2VudHJ5IERzbjogSW52YWxpZCBwcm9qZWN0SWQgJHtwcm9qZWN0SWR9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFpc1ZhbGlkUHJvdG9jb2wocHJvdG9jb2wpKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBJbnZhbGlkIFNlbnRyeSBEc246IEludmFsaWQgcHJvdG9jb2wgJHtwcm90b2NvbH1gKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocG9ydCAmJiBpc05hTihwYXJzZUludChwb3J0LCAxMCkpKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBJbnZhbGlkIFNlbnRyeSBEc246IEludmFsaWQgcG9ydCAke3BvcnR9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogRXh0cmFjdCB0aGUgb3JnIElEIGZyb20gYSBEU04gaG9zdC5cbiAqXG4gKiBAcGFyYW0gaG9zdCBUaGUgaG9zdCBmcm9tIGEgRFNOXG4gKiBAcmV0dXJucyBUaGUgb3JnIElEIGlmIGZvdW5kLCB1bmRlZmluZWQgb3RoZXJ3aXNlXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RPcmdJZEZyb21Ec25Ib3N0KGhvc3QpIHtcbiAgY29uc3QgbWF0Y2ggPSBob3N0Lm1hdGNoKE9SR19JRF9SRUdFWCk7XG5cbiAgcmV0dXJuIG1hdGNoPy5bMV07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHZhbGlkIFNlbnRyeSBEc24gb2JqZWN0LCBpZGVudGlmeWluZyBhIFNlbnRyeSBpbnN0YW5jZSBhbmQgcHJvamVjdC5cbiAqIEByZXR1cm5zIGEgdmFsaWQgRHNuQ29tcG9uZW50cyBvYmplY3Qgb3IgYHVuZGVmaW5lZGAgaWYgQHBhcmFtIGZyb20gaXMgYW4gaW52YWxpZCBEU04gc291cmNlXG4gKi9cbmZ1bmN0aW9uIG1ha2VEc24oZnJvbSkge1xuICBjb25zdCBjb21wb25lbnRzID0gdHlwZW9mIGZyb20gPT09ICdzdHJpbmcnID8gZHNuRnJvbVN0cmluZyhmcm9tKSA6IGRzbkZyb21Db21wb25lbnRzKGZyb20pO1xuICBpZiAoIWNvbXBvbmVudHMgfHwgIXZhbGlkYXRlRHNuKGNvbXBvbmVudHMpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gY29tcG9uZW50cztcbn1cblxuZXhwb3J0IHsgZHNuRnJvbVN0cmluZywgZHNuVG9TdHJpbmcsIGV4dHJhY3RPcmdJZEZyb21Ec25Ib3N0LCBtYWtlRHNuIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kc24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addItemToEnvelope: () => (/* binding */ addItemToEnvelope),\n/* harmony export */   createAttachmentEnvelopeItem: () => (/* binding */ createAttachmentEnvelopeItem),\n/* harmony export */   createEnvelope: () => (/* binding */ createEnvelope),\n/* harmony export */   createEventEnvelopeHeaders: () => (/* binding */ createEventEnvelopeHeaders),\n/* harmony export */   createSpanEnvelopeItem: () => (/* binding */ createSpanEnvelopeItem),\n/* harmony export */   envelopeContainsItemType: () => (/* binding */ envelopeContainsItemType),\n/* harmony export */   envelopeItemTypeToDataCategory: () => (/* binding */ envelopeItemTypeToDataCategory),\n/* harmony export */   forEachEnvelopeItem: () => (/* binding */ forEachEnvelopeItem),\n/* harmony export */   getSdkMetadataForEnvelopeHeader: () => (/* binding */ getSdkMetadataForEnvelopeHeader),\n/* harmony export */   parseEnvelope: () => (/* binding */ parseEnvelope),\n/* harmony export */   serializeEnvelope: () => (/* binding */ serializeEnvelope)\n/* harmony export */ });\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../carrier.js */ \"./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _dsn_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dsn.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/dsn.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./normalize.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction createEnvelope(headers, items = []) {\n  return [headers, items] ;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction addItemToEnvelope(envelope, newItem) {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] ;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nfunction forEachEnvelopeItem(\n  envelope,\n  callback,\n) {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nfunction envelopeContainsItemType(envelope, types) {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input) {\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getSentryCarrier)(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ);\n  return carrier.encodePolyfill ? carrier.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input) {\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_0__.getSentryCarrier)(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ);\n  return carrier.decodePolyfill ? carrier.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nfunction serializeEnvelope(envelope) {\n  const [envHeaders, items] = envelope;\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts = JSON.stringify(envHeaders);\n\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify((0,_normalize_js__WEBPACK_IMPORTED_MODULE_2__.normalize)(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers) {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nfunction parseEnvelope(env) {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n\n  function readBinary(length) {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson() {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(decodeUTF8(readBinary(i))) ;\n  }\n\n  const envelopeHeader = readJson();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nfunction createSpanEnvelopeItem(spanJson) {\n  const spanHeaders = {\n    type: 'span',\n  };\n\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nfunction createAttachmentEnvelopeItem(attachment) {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n\n  return [\n    {\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    },\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  raw_security: 'security',\n  log: 'log_item',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nfunction getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n  if (!metadataOrEvent?.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nfunction createEventEnvelopeHeaders(\n  event,\n  sdkInfo,\n  tunnel,\n  dsn,\n) {\n  const dynamicSamplingContext = event.sdkProcessingMetadata?.dynamicSamplingContext;\n  return {\n    event_id: event.event_id ,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: (0,_dsn_js__WEBPACK_IMPORTED_MODULE_3__.dsnToString)(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dynamicSamplingContext,\n    }),\n  };\n}\n\n\n//# sourceMappingURL=envelope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9lbnZlbG9wZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUQ7QUFDVjtBQUNJO0FBQ0M7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDZEQUFnQixDQUFDLHFEQUFVO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsNkRBQWdCLENBQUMscURBQVU7QUFDN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCLDRCQUE0Qjs7QUFFNUM7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLHdEQUFTO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCO0FBQzFCLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGNBQWM7QUFDbkMsNkJBQTZCLEtBQUssb0RBQVcsT0FBTztBQUNwRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRWlSO0FBQ2pSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L2VudmVsb3BlLmpzPzhiOGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0U2VudHJ5Q2FycmllciB9IGZyb20gJy4uL2NhcnJpZXIuanMnO1xuaW1wb3J0IHsgZHNuVG9TdHJpbmcgfSBmcm9tICcuL2Rzbi5qcyc7XG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tICcuL25vcm1hbGl6ZS5qcyc7XG5pbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi93b3JsZHdpZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gZW52ZWxvcGUuXG4gKiBNYWtlIHN1cmUgdG8gYWx3YXlzIGV4cGxpY2l0bHkgcHJvdmlkZSB0aGUgZ2VuZXJpYyB0byB0aGlzIGZ1bmN0aW9uXG4gKiBzbyB0aGF0IHRoZSBlbnZlbG9wZSB0eXBlcyByZXNvbHZlIGNvcnJlY3RseS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRW52ZWxvcGUoaGVhZGVycywgaXRlbXMgPSBbXSkge1xuICByZXR1cm4gW2hlYWRlcnMsIGl0ZW1zXSA7XG59XG5cbi8qKlxuICogQWRkIGFuIGl0ZW0gdG8gYW4gZW52ZWxvcGUuXG4gKiBNYWtlIHN1cmUgdG8gYWx3YXlzIGV4cGxpY2l0bHkgcHJvdmlkZSB0aGUgZ2VuZXJpYyB0byB0aGlzIGZ1bmN0aW9uXG4gKiBzbyB0aGF0IHRoZSBlbnZlbG9wZSB0eXBlcyByZXNvbHZlIGNvcnJlY3RseS5cbiAqL1xuZnVuY3Rpb24gYWRkSXRlbVRvRW52ZWxvcGUoZW52ZWxvcGUsIG5ld0l0ZW0pIHtcbiAgY29uc3QgW2hlYWRlcnMsIGl0ZW1zXSA9IGVudmVsb3BlO1xuICByZXR1cm4gW2hlYWRlcnMsIFsuLi5pdGVtcywgbmV3SXRlbV1dIDtcbn1cblxuLyoqXG4gKiBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBsb29wIHRocm91Z2ggdGhlIGl0ZW1zIGFuZCBpdGVtIHR5cGVzIG9mIGFuIGVudmVsb3BlLlxuICogKFRoaXMgZnVuY3Rpb24gd2FzIG1vc3RseSBjcmVhdGVkIGJlY2F1c2Ugd29ya2luZyB3aXRoIGVudmVsb3BlIHR5cGVzIGlzIHBhaW5mdWwgYXQgdGhlIG1vbWVudClcbiAqXG4gKiBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVlLCB0aGUgcmVzdCBvZiB0aGUgaXRlbXMgd2lsbCBiZSBza2lwcGVkLlxuICovXG5mdW5jdGlvbiBmb3JFYWNoRW52ZWxvcGVJdGVtKFxuICBlbnZlbG9wZSxcbiAgY2FsbGJhY2ssXG4pIHtcbiAgY29uc3QgZW52ZWxvcGVJdGVtcyA9IGVudmVsb3BlWzFdO1xuXG4gIGZvciAoY29uc3QgZW52ZWxvcGVJdGVtIG9mIGVudmVsb3BlSXRlbXMpIHtcbiAgICBjb25zdCBlbnZlbG9wZUl0ZW1UeXBlID0gZW52ZWxvcGVJdGVtWzBdLnR5cGU7XG4gICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2soZW52ZWxvcGVJdGVtLCBlbnZlbG9wZUl0ZW1UeXBlKTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGVudmVsb3BlIGNvbnRhaW5zIGFueSBvZiB0aGUgZ2l2ZW4gZW52ZWxvcGUgaXRlbSB0eXBlc1xuICovXG5mdW5jdGlvbiBlbnZlbG9wZUNvbnRhaW5zSXRlbVR5cGUoZW52ZWxvcGUsIHR5cGVzKSB7XG4gIHJldHVybiBmb3JFYWNoRW52ZWxvcGVJdGVtKGVudmVsb3BlLCAoXywgdHlwZSkgPT4gdHlwZXMuaW5jbHVkZXModHlwZSkpO1xufVxuXG4vKipcbiAqIEVuY29kZSBhIHN0cmluZyB0byBVVEY4IGFycmF5LlxuICovXG5mdW5jdGlvbiBlbmNvZGVVVEY4KGlucHV0KSB7XG4gIGNvbnN0IGNhcnJpZXIgPSBnZXRTZW50cnlDYXJyaWVyKEdMT0JBTF9PQkopO1xuICByZXR1cm4gY2Fycmllci5lbmNvZGVQb2x5ZmlsbCA/IGNhcnJpZXIuZW5jb2RlUG9seWZpbGwoaW5wdXQpIDogbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGlucHV0KTtcbn1cblxuLyoqXG4gKiBEZWNvZGUgYSBVVEY4IGFycmF5IHRvIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlVVRGOChpbnB1dCkge1xuICBjb25zdCBjYXJyaWVyID0gZ2V0U2VudHJ5Q2FycmllcihHTE9CQUxfT0JKKTtcbiAgcmV0dXJuIGNhcnJpZXIuZGVjb2RlUG9seWZpbGwgPyBjYXJyaWVyLmRlY29kZVBvbHlmaWxsKGlucHV0KSA6IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShpbnB1dCk7XG59XG5cbi8qKlxuICogU2VyaWFsaXplcyBhbiBlbnZlbG9wZS5cbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXplRW52ZWxvcGUoZW52ZWxvcGUpIHtcbiAgY29uc3QgW2VudkhlYWRlcnMsIGl0ZW1zXSA9IGVudmVsb3BlO1xuICAvLyBJbml0aWFsbHkgd2UgY29uc3RydWN0IG91ciBlbnZlbG9wZSBhcyBhIHN0cmluZyBhbmQgb25seSBjb252ZXJ0IHRvIGJpbmFyeSBjaHVua3MgaWYgd2UgZW5jb3VudGVyIGJpbmFyeSBkYXRhXG4gIGxldCBwYXJ0cyA9IEpTT04uc3RyaW5naWZ5KGVudkhlYWRlcnMpO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZChuZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBwYXJ0cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBhcnRzID0gdHlwZW9mIG5leHQgPT09ICdzdHJpbmcnID8gcGFydHMgKyBuZXh0IDogW2VuY29kZVVURjgocGFydHMpLCBuZXh0XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFydHMucHVzaCh0eXBlb2YgbmV4dCA9PT0gJ3N0cmluZycgPyBlbmNvZGVVVEY4KG5leHQpIDogbmV4dCk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgY29uc3QgW2l0ZW1IZWFkZXJzLCBwYXlsb2FkXSA9IGl0ZW07XG5cbiAgICBhcHBlbmQoYFxcbiR7SlNPTi5zdHJpbmdpZnkoaXRlbUhlYWRlcnMpfVxcbmApO1xuXG4gICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAnc3RyaW5nJyB8fCBwYXlsb2FkIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgYXBwZW5kKHBheWxvYWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgc3RyaW5naWZpZWRQYXlsb2FkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RyaW5naWZpZWRQYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEluIGNhc2UsIGRlc3BpdGUgYWxsIG91ciBlZmZvcnRzIHRvIGtlZXAgYHBheWxvYWRgIGNpcmN1bGFyLWRlcGVuZGVuY3ktZnJlZSwgYEpTT04uc3RyaW5naWZ5KClgIHN0aWxsXG4gICAgICAgIC8vIGZhaWxzLCB3ZSB0cnkgYWdhaW4gYWZ0ZXIgbm9ybWFsaXppbmcgaXQgYWdhaW4gd2l0aCBpbmZpbml0ZSBub3JtYWxpemF0aW9uIGRlcHRoLiBUaGlzIG9mIGNvdXJzZSBoYXMgYVxuICAgICAgICAvLyBwZXJmb3JtYW5jZSBpbXBhY3QgYnV0IGluIHRoaXMgY2FzZSBhIHBlcmZvcm1hbmNlIGhpdCBpcyBiZXR0ZXIgdGhhbiB0aHJvd2luZy5cbiAgICAgICAgc3RyaW5naWZpZWRQYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplKHBheWxvYWQpKTtcbiAgICAgIH1cbiAgICAgIGFwcGVuZChzdHJpbmdpZmllZFBheWxvYWQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0eXBlb2YgcGFydHMgPT09ICdzdHJpbmcnID8gcGFydHMgOiBjb25jYXRCdWZmZXJzKHBhcnRzKTtcbn1cblxuZnVuY3Rpb24gY29uY2F0QnVmZmVycyhidWZmZXJzKSB7XG4gIGNvbnN0IHRvdGFsTGVuZ3RoID0gYnVmZmVycy5yZWR1Y2UoKGFjYywgYnVmKSA9PiBhY2MgKyBidWYubGVuZ3RoLCAwKTtcblxuICBjb25zdCBtZXJnZWQgPSBuZXcgVWludDhBcnJheSh0b3RhbExlbmd0aCk7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGNvbnN0IGJ1ZmZlciBvZiBidWZmZXJzKSB7XG4gICAgbWVyZ2VkLnNldChidWZmZXIsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGJ1ZmZlci5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gbWVyZ2VkO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhbiBlbnZlbG9wZVxuICovXG5mdW5jdGlvbiBwYXJzZUVudmVsb3BlKGVudikge1xuICBsZXQgYnVmZmVyID0gdHlwZW9mIGVudiA9PT0gJ3N0cmluZycgPyBlbmNvZGVVVEY4KGVudikgOiBlbnY7XG5cbiAgZnVuY3Rpb24gcmVhZEJpbmFyeShsZW5ndGgpIHtcbiAgICBjb25zdCBiaW4gPSBidWZmZXIuc3ViYXJyYXkoMCwgbGVuZ3RoKTtcbiAgICAvLyBSZXBsYWNlIHRoZSBidWZmZXIgd2l0aCB0aGUgcmVtYWluaW5nIGRhdGEgZXhjbHVkaW5nIHRyYWlsaW5nIG5ld2xpbmVcbiAgICBidWZmZXIgPSBidWZmZXIuc3ViYXJyYXkobGVuZ3RoICsgMSk7XG4gICAgcmV0dXJuIGJpbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRKc29uKCkge1xuICAgIGxldCBpID0gYnVmZmVyLmluZGV4T2YoMHhhKTtcbiAgICAvLyBJZiB3ZSBjb3VsZG4ndCBmaW5kIGEgbmV3bGluZSwgd2UgbXVzdCBoYXZlIGZvdW5kIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICAgIGlmIChpIDwgMCkge1xuICAgICAgaSA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlVVRGOChyZWFkQmluYXJ5KGkpKSkgO1xuICB9XG5cbiAgY29uc3QgZW52ZWxvcGVIZWFkZXIgPSByZWFkSnNvbigpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBjb25zdCBpdGVtcyA9IFtdO1xuXG4gIHdoaWxlIChidWZmZXIubGVuZ3RoKSB7XG4gICAgY29uc3QgaXRlbUhlYWRlciA9IHJlYWRKc29uKCk7XG4gICAgY29uc3QgYmluYXJ5TGVuZ3RoID0gdHlwZW9mIGl0ZW1IZWFkZXIubGVuZ3RoID09PSAnbnVtYmVyJyA/IGl0ZW1IZWFkZXIubGVuZ3RoIDogdW5kZWZpbmVkO1xuXG4gICAgaXRlbXMucHVzaChbaXRlbUhlYWRlciwgYmluYXJ5TGVuZ3RoID8gcmVhZEJpbmFyeShiaW5hcnlMZW5ndGgpIDogcmVhZEpzb24oKV0pO1xuICB9XG5cbiAgcmV0dXJuIFtlbnZlbG9wZUhlYWRlciwgaXRlbXNdO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgZW52ZWxvcGUgaXRlbSBmb3IgYSBzaW5nbGUgc3BhblxuICovXG5mdW5jdGlvbiBjcmVhdGVTcGFuRW52ZWxvcGVJdGVtKHNwYW5Kc29uKSB7XG4gIGNvbnN0IHNwYW5IZWFkZXJzID0ge1xuICAgIHR5cGU6ICdzcGFuJyxcbiAgfTtcblxuICByZXR1cm4gW3NwYW5IZWFkZXJzLCBzcGFuSnNvbl07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhdHRhY2htZW50IGVudmVsb3BlIGl0ZW1zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUF0dGFjaG1lbnRFbnZlbG9wZUl0ZW0oYXR0YWNobWVudCkge1xuICBjb25zdCBidWZmZXIgPSB0eXBlb2YgYXR0YWNobWVudC5kYXRhID09PSAnc3RyaW5nJyA/IGVuY29kZVVURjgoYXR0YWNobWVudC5kYXRhKSA6IGF0dGFjaG1lbnQuZGF0YTtcblxuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIHR5cGU6ICdhdHRhY2htZW50JyxcbiAgICAgIGxlbmd0aDogYnVmZmVyLmxlbmd0aCxcbiAgICAgIGZpbGVuYW1lOiBhdHRhY2htZW50LmZpbGVuYW1lLFxuICAgICAgY29udGVudF90eXBlOiBhdHRhY2htZW50LmNvbnRlbnRUeXBlLFxuICAgICAgYXR0YWNobWVudF90eXBlOiBhdHRhY2htZW50LmF0dGFjaG1lbnRUeXBlLFxuICAgIH0sXG4gICAgYnVmZmVyLFxuICBdO1xufVxuXG5jb25zdCBJVEVNX1RZUEVfVE9fREFUQV9DQVRFR09SWV9NQVAgPSB7XG4gIHNlc3Npb246ICdzZXNzaW9uJyxcbiAgc2Vzc2lvbnM6ICdzZXNzaW9uJyxcbiAgYXR0YWNobWVudDogJ2F0dGFjaG1lbnQnLFxuICB0cmFuc2FjdGlvbjogJ3RyYW5zYWN0aW9uJyxcbiAgZXZlbnQ6ICdlcnJvcicsXG4gIGNsaWVudF9yZXBvcnQ6ICdpbnRlcm5hbCcsXG4gIHVzZXJfcmVwb3J0OiAnZGVmYXVsdCcsXG4gIHByb2ZpbGU6ICdwcm9maWxlJyxcbiAgcHJvZmlsZV9jaHVuazogJ3Byb2ZpbGUnLFxuICByZXBsYXlfZXZlbnQ6ICdyZXBsYXknLFxuICByZXBsYXlfcmVjb3JkaW5nOiAncmVwbGF5JyxcbiAgY2hlY2tfaW46ICdtb25pdG9yJyxcbiAgZmVlZGJhY2s6ICdmZWVkYmFjaycsXG4gIHNwYW46ICdzcGFuJyxcbiAgcmF3X3NlY3VyaXR5OiAnc2VjdXJpdHknLFxuICBsb2c6ICdsb2dfaXRlbScsXG59O1xuXG4vKipcbiAqIE1hcHMgdGhlIHR5cGUgb2YgYW4gZW52ZWxvcGUgaXRlbSB0byBhIGRhdGEgY2F0ZWdvcnkuXG4gKi9cbmZ1bmN0aW9uIGVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeSh0eXBlKSB7XG4gIHJldHVybiBJVEVNX1RZUEVfVE9fREFUQV9DQVRFR09SWV9NQVBbdHlwZV07XG59XG5cbi8qKiBFeHRyYWN0cyB0aGUgbWluaW1hbCBTREsgaW5mbyBmcm9tIHRoZSBtZXRhZGF0YSBvciBhbiBldmVudHMgKi9cbmZ1bmN0aW9uIGdldFNka01ldGFkYXRhRm9yRW52ZWxvcGVIZWFkZXIobWV0YWRhdGFPckV2ZW50KSB7XG4gIGlmICghbWV0YWRhdGFPckV2ZW50Py5zZGspIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgeyBuYW1lLCB2ZXJzaW9uIH0gPSBtZXRhZGF0YU9yRXZlbnQuc2RrO1xuICByZXR1cm4geyBuYW1lLCB2ZXJzaW9uIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBldmVudCBlbnZlbG9wZSBoZWFkZXJzLCBiYXNlZCBvbiBldmVudCwgc2RrIGluZm8gYW5kIHR1bm5lbFxuICogTm90ZTogVGhpcyBmdW5jdGlvbiB3YXMgZXh0cmFjdGVkIGZyb20gdGhlIGNvcmUgcGFja2FnZSB0byBtYWtlIGl0IGF2YWlsYWJsZSBpbiBSZXBsYXlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbnZlbG9wZUhlYWRlcnMoXG4gIGV2ZW50LFxuICBzZGtJbmZvLFxuICB0dW5uZWwsXG4gIGRzbixcbikge1xuICBjb25zdCBkeW5hbWljU2FtcGxpbmdDb250ZXh0ID0gZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhPy5keW5hbWljU2FtcGxpbmdDb250ZXh0O1xuICByZXR1cm4ge1xuICAgIGV2ZW50X2lkOiBldmVudC5ldmVudF9pZCAsXG4gICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIC4uLihzZGtJbmZvICYmIHsgc2RrOiBzZGtJbmZvIH0pLFxuICAgIC4uLighIXR1bm5lbCAmJiBkc24gJiYgeyBkc246IGRzblRvU3RyaW5nKGRzbikgfSksXG4gICAgLi4uKGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgJiYge1xuICAgICAgdHJhY2U6IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQsXG4gICAgfSksXG4gIH07XG59XG5cbmV4cG9ydCB7IGFkZEl0ZW1Ub0VudmVsb3BlLCBjcmVhdGVBdHRhY2htZW50RW52ZWxvcGVJdGVtLCBjcmVhdGVFbnZlbG9wZSwgY3JlYXRlRXZlbnRFbnZlbG9wZUhlYWRlcnMsIGNyZWF0ZVNwYW5FbnZlbG9wZUl0ZW0sIGVudmVsb3BlQ29udGFpbnNJdGVtVHlwZSwgZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5LCBmb3JFYWNoRW52ZWxvcGVJdGVtLCBnZXRTZGtNZXRhZGF0YUZvckVudmVsb3BlSGVhZGVyLCBwYXJzZUVudmVsb3BlLCBzZXJpYWxpemVFbnZlbG9wZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52ZWxvcGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/envelope.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/eventbuilder.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/eventbuilder.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eventFromMessage: () => (/* binding */ eventFromMessage),\n/* harmony export */   eventFromUnknownInput: () => (/* binding */ eventFromUnknownInput),\n/* harmony export */   exceptionFromError: () => (/* binding */ exceptionFromError),\n/* harmony export */   parseStackFrames: () => (/* binding */ parseStackFrames)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./normalize.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n\n\n\n\n\n/**\n * Extracts stack frames from the error.stack string\n */\nfunction parseStackFrames(stackParser, error) {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nfunction exceptionFromError(stackParser, error) {\n  const exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj) {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (value instanceof Error) {\n        return value;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getMessageForObject(exception) {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  }\n\n  const keys = (0,_object_js__WEBPACK_IMPORTED_MODULE_0__.extractExceptionKeysForMessage)(exception);\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isErrorEvent)(exception)) {\n    return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n  }\n\n  const className = getObjectClassName(exception);\n\n  return `${\n    className && className !== 'Object' ? `'${className}'` : 'Object'\n  } captured as exception with keys: ${keys}`;\n}\n\nfunction getObjectClassName(obj) {\n  try {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\n\nfunction getException(\n  client,\n  mechanism,\n  exception,\n  hint,\n) {\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isError)(exception)) {\n    return [exception, undefined];\n  }\n\n  // Mutate this!\n  mechanism.synthetic = true;\n\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isPlainObject)(exception)) {\n    const normalizeDepth = client?.getOptions().normalizeDepth;\n    const extras = { ['__serialized__']: (0,_normalize_js__WEBPACK_IMPORTED_MODULE_2__.normalizeToSize)(exception , normalizeDepth) };\n\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    if (errorFromProp) {\n      return [errorFromProp, extras];\n    }\n\n    const message = getMessageForObject(exception);\n    const ex = hint?.syntheticException || new Error(message);\n    ex.message = message;\n\n    return [ex, extras];\n  }\n\n  // This handles when someone does: `throw \"something awesome\";`\n  // We use synthesized Error here so we can extract a (rough) stack trace.\n  const ex = hint?.syntheticException || new Error(exception );\n  ex.message = `${exception}`;\n\n  return [ex, undefined];\n}\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nfunction eventFromUnknownInput(\n  client,\n  stackParser,\n  exception,\n  hint,\n) {\n  const providedMechanism = hint?.data && (hint.data ).mechanism;\n  const mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  const [ex, extras] = getException(client, mechanism, exception, hint);\n\n  const event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n\n  if (extras) {\n    event.extra = extras;\n  }\n\n  (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.addExceptionTypeValue)(event, undefined, undefined);\n  (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.addExceptionMechanism)(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint?.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(\n  stackParser,\n  message,\n  level = 'info',\n  hint,\n  attachStacktrace,\n) {\n  const event = {\n    event_id: hint?.event_id,\n    level,\n  };\n\n  if (attachStacktrace && hint?.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [\n          {\n            value: message,\n            stacktrace: { frames },\n          },\n        ],\n      };\n      (0,_misc_js__WEBPACK_IMPORTED_MODULE_3__.addExceptionMechanism)(event, { synthetic: true });\n    }\n  }\n\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isParameterizedString)(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n\n\n//# sourceMappingURL=eventbuilder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/eventbuilder.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addConsoleInstrumentationHandler: () => (/* binding */ addConsoleInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n\n\n\n\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addConsoleInstrumentationHandler(handler) {\n  const type = 'console';\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentConsole);\n}\n\nfunction instrumentConsole() {\n  if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ)) {\n    return;\n  }\n\n  _logger_js__WEBPACK_IMPORTED_MODULE_2__.CONSOLE_LEVELS.forEach(function (level) {\n    if (!(level in _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    (0,_object_js__WEBPACK_IMPORTED_MODULE_3__.fill)(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.console, level, function (originalConsoleMethod) {\n      _logger_js__WEBPACK_IMPORTED_MODULE_2__.originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args) {\n        const handlerData = { args, level };\n        (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)('console', handlerData);\n\n        const log = _logger_js__WEBPACK_IMPORTED_MODULE_2__.originalConsoleMethods[level];\n        log?.apply(_worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n\n\n//# sourceMappingURL=console.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0U7QUFDbEM7QUFDUztBQUNnQzs7QUFFN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsd0RBQVU7QUFDWixFQUFFLDZEQUFlO0FBQ2pCOztBQUVBO0FBQ0EsUUFBUSxrRUFBdUI7QUFDL0I7QUFDQTs7QUFFQSxFQUFFLHNEQUFjO0FBQ2hCLG1CQUFtQixxREFBVTtBQUM3QjtBQUNBOztBQUVBLElBQUksZ0RBQUksQ0FBQyxxREFBVTtBQUNuQixNQUFNLDhEQUFzQjs7QUFFNUI7QUFDQSw4QkFBOEI7QUFDOUIsUUFBUSw2REFBZTs7QUFFdkIsb0JBQW9CLDhEQUFzQjtBQUMxQyxtQkFBbUIscURBQVU7QUFDN0I7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUU0QztBQUM1QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2NvbnNvbGUuanM/MzVjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT05TT0xFX0xFVkVMUywgb3JpZ2luYWxDb25zb2xlTWV0aG9kcyB9IGZyb20gJy4uL2xvZ2dlci5qcyc7XG5pbXBvcnQgeyBmaWxsIH0gZnJvbSAnLi4vb2JqZWN0LmpzJztcbmltcG9ydCB7IEdMT0JBTF9PQkogfSBmcm9tICcuLi93b3JsZHdpZGUuanMnO1xuaW1wb3J0IHsgYWRkSGFuZGxlciwgbWF5YmVJbnN0cnVtZW50LCB0cmlnZ2VySGFuZGxlcnMgfSBmcm9tICcuL2hhbmRsZXJzLmpzJztcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIgZm9yIHdoZW4gYSBjb25zb2xlLnh4eCBtZXRob2QgaXMgY2FsbGVkLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyKGhhbmRsZXIpIHtcbiAgY29uc3QgdHlwZSA9ICdjb25zb2xlJztcbiAgYWRkSGFuZGxlcih0eXBlLCBoYW5kbGVyKTtcbiAgbWF5YmVJbnN0cnVtZW50KHR5cGUsIGluc3RydW1lbnRDb25zb2xlKTtcbn1cblxuZnVuY3Rpb24gaW5zdHJ1bWVudENvbnNvbGUoKSB7XG4gIGlmICghKCdjb25zb2xlJyBpbiBHTE9CQUxfT0JKKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIENPTlNPTEVfTEVWRUxTLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgaWYgKCEobGV2ZWwgaW4gR0xPQkFMX09CSi5jb25zb2xlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZpbGwoR0xPQkFMX09CSi5jb25zb2xlLCBsZXZlbCwgZnVuY3Rpb24gKG9yaWdpbmFsQ29uc29sZU1ldGhvZCkge1xuICAgICAgb3JpZ2luYWxDb25zb2xlTWV0aG9kc1tsZXZlbF0gPSBvcmlnaW5hbENvbnNvbGVNZXRob2Q7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBjb25zdCBoYW5kbGVyRGF0YSA9IHsgYXJncywgbGV2ZWwgfTtcbiAgICAgICAgdHJpZ2dlckhhbmRsZXJzKCdjb25zb2xlJywgaGFuZGxlckRhdGEpO1xuXG4gICAgICAgIGNvbnN0IGxvZyA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZHNbbGV2ZWxdO1xuICAgICAgICBsb2c/LmFwcGx5KEdMT0JBTF9PQkouY29uc29sZSwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnNvbGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/instrument/console.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/instrument/fetch.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/fetch.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addFetchEndInstrumentationHandler: () => (/* binding */ addFetchEndInstrumentationHandler),\n/* harmony export */   addFetchInstrumentationHandler: () => (/* binding */ addFetchInstrumentationHandler),\n/* harmony export */   parseFetchArgs: () => (/* binding */ parseFetchArgs)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _supports_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../supports.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/supports.js\");\n/* harmony import */ var _time_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n\n\n\n\n\n\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addFetchInstrumentationHandler(\n  handler,\n  skipNativeFetchCheck,\n) {\n  const type = 'fetch';\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, () => instrumentFetch(undefined, skipNativeFetchCheck));\n}\n\n/**\n * Add an instrumentation handler for long-lived fetch requests, like consuming server-sent events (SSE) via fetch.\n * The handler will resolve the request body and emit the actual `endTimestamp`, so that the\n * span can be updated accordingly.\n *\n * Only used internally\n * @hidden\n */\nfunction addFetchEndInstrumentationHandler(handler) {\n  const type = 'fetch-body-resolved';\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, () => instrumentFetch(streamHandler));\n}\n\nfunction instrumentFetch(onFetchResolved, skipNativeFetchCheck = false) {\n  if (skipNativeFetchCheck && !(0,_supports_js__WEBPACK_IMPORTED_MODULE_1__.supportsNativeFetch)()) {\n    return;\n  }\n\n  (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.fill)(_worldwide_js__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_OBJ, 'fetch', function (originalFetch) {\n    return function (...args) {\n      // We capture the error right here and not in the Promise error callback because Safari (and probably other\n      // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.\n\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n      //       it means the error, that was caused by your fetch call did not\n      //       have a stack trace, so the SDK backfilled the stack trace so\n      //       you can see which fetch call failed.\n      const virtualError = new Error();\n\n      const { method, url } = parseFetchArgs(args);\n      const handlerData = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: (0,_time_js__WEBPACK_IMPORTED_MODULE_4__.timestampInSeconds)() * 1000,\n        // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation\n        virtualError,\n        headers: getHeadersFromFetchArgs(args),\n      };\n\n      // if there is no callback, fetch is instrumented directly\n      if (!onFetchResolved) {\n        (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)('fetch', {\n          ...handlerData,\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(_worldwide_js__WEBPACK_IMPORTED_MODULE_3__.GLOBAL_OBJ, args).then(\n        async (response) => {\n          if (onFetchResolved) {\n            onFetchResolved(response);\n          } else {\n            (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)('fetch', {\n              ...handlerData,\n              endTimestamp: (0,_time_js__WEBPACK_IMPORTED_MODULE_4__.timestampInSeconds)() * 1000,\n              response,\n            });\n          }\n\n          return response;\n        },\n        (error) => {\n          (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)('fetch', {\n            ...handlerData,\n            endTimestamp: (0,_time_js__WEBPACK_IMPORTED_MODULE_4__.timestampInSeconds)() * 1000,\n            error,\n          });\n\n          if ((0,_is_js__WEBPACK_IMPORTED_MODULE_5__.isError)(error) && error.stack === undefined) {\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n            //       it means the error, that was caused by your fetch call did not\n            //       have a stack trace, so the SDK backfilled the stack trace so\n            //       you can see which fetch call failed.\n            error.stack = virtualError.stack;\n            (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(error, 'framesToPop', 1);\n          }\n\n          // We enhance the not-so-helpful \"Failed to fetch\" error messages with the host\n          // Possible messages we handle here:\n          // * \"Failed to fetch\" (chromium)\n          // * \"Load failed\" (webkit)\n          // * \"NetworkError when attempting to fetch resource.\" (firefox)\n          if (\n            error instanceof TypeError &&\n            (error.message === 'Failed to fetch' ||\n              error.message === 'Load failed' ||\n              error.message === 'NetworkError when attempting to fetch resource.')\n          ) {\n            try {\n              const url = new URL(handlerData.fetchData.url);\n              error.message = `${error.message} (${url.host})`;\n            } catch {\n              // ignore it if errors happen here\n            }\n          }\n\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nasync function resolveResponse(res, onFinishedResolving) {\n  if (res?.body) {\n    const body = res.body;\n    const responseReader = body.getReader();\n\n    // Define a maximum duration after which we just cancel\n    const maxFetchDurationTimeout = setTimeout(\n      () => {\n        body.cancel().then(null, () => {\n          // noop\n        });\n      },\n      90 * 1000, // 90s\n    );\n\n    let readingActive = true;\n    while (readingActive) {\n      let chunkTimeout;\n      try {\n        // abort reading if read op takes more than 5s\n        chunkTimeout = setTimeout(() => {\n          body.cancel().then(null, () => {\n            // noop on error\n          });\n        }, 5000);\n\n        // This .read() call will reject/throw when we abort due to timeouts through `body.cancel()`\n        const { done } = await responseReader.read();\n\n        clearTimeout(chunkTimeout);\n\n        if (done) {\n          onFinishedResolving();\n          readingActive = false;\n        }\n      } catch (error) {\n        readingActive = false;\n      } finally {\n        clearTimeout(chunkTimeout);\n      }\n    }\n\n    clearTimeout(maxFetchDurationTimeout);\n\n    responseReader.releaseLock();\n    body.cancel().then(null, () => {\n      // noop on error\n    });\n  }\n}\n\nfunction streamHandler(response) {\n  // clone response for awaiting stream\n  let clonedResponseForResolving;\n  try {\n    clonedResponseForResolving = response.clone();\n  } catch {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  resolveResponse(clonedResponseForResolving, () => {\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)('fetch-body-resolved', {\n      endTimestamp: (0,_time_js__WEBPACK_IMPORTED_MODULE_4__.timestampInSeconds)() * 1000,\n      response,\n    });\n  });\n}\n\nfunction hasProp(obj, prop) {\n  return !!obj && typeof obj === 'object' && !!(obj )[prop];\n}\n\nfunction getUrlFromResource(resource) {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nfunction parseFetchArgs(fetchArgs) {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs ;\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg ),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n\nfunction getHeadersFromFetchArgs(fetchArgs) {\n  const [requestArgument, optionsArgument] = fetchArgs;\n\n  try {\n    if (\n      typeof optionsArgument === 'object' &&\n      optionsArgument !== null &&\n      'headers' in optionsArgument &&\n      optionsArgument.headers\n    ) {\n      return new Headers(optionsArgument.headers );\n    }\n\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_5__.isRequest)(requestArgument)) {\n      return new Headers(requestArgument.headers);\n    }\n  } catch {\n    // noop\n  }\n\n  return;\n}\n\n\n//# sourceMappingURL=fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/instrument/fetch.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalError.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalError.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addGlobalErrorInstrumentationHandler: () => (/* binding */ addGlobalErrorInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n\n\n\nlet _oldOnErrorHandler = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalErrorInstrumentationHandler(handler) {\n  const type = 'error';\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentError);\n}\n\nfunction instrumentError() {\n  _oldOnErrorHandler = _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onerror;\n\n  // Note: The reason we are doing window.onerror instead of window.addEventListener('error')\n  // is that we are using this handler in the Loader Script, to handle buffered errors consistently\n  _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onerror = function (\n    msg,\n    url,\n    line,\n    column,\n    error,\n  ) {\n    const handlerData = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)('error', handlerData);\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n\n\n//# sourceMappingURL=globalError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2dsb2JhbEVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNnQzs7QUFFN0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsd0RBQVU7QUFDWixFQUFFLDZEQUFlO0FBQ2pCOztBQUVBO0FBQ0EsdUJBQXVCLHFEQUFVOztBQUVqQztBQUNBO0FBQ0EsRUFBRSxxREFBVTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSw2REFBZTs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxFQUFFLHFEQUFVO0FBQ1o7O0FBRWdEO0FBQ2hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L2luc3RydW1lbnQvZ2xvYmFsRXJyb3IuanM/YTM0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi4vd29ybGR3aWRlLmpzJztcbmltcG9ydCB7IGFkZEhhbmRsZXIsIG1heWJlSW5zdHJ1bWVudCwgdHJpZ2dlckhhbmRsZXJzIH0gZnJvbSAnLi9oYW5kbGVycy5qcyc7XG5cbmxldCBfb2xkT25FcnJvckhhbmRsZXIgPSBudWxsO1xuXG4vKipcbiAqIEFkZCBhbiBpbnN0cnVtZW50YXRpb24gaGFuZGxlciBmb3Igd2hlbiBhbiBlcnJvciBpcyBjYXB0dXJlZCBieSB0aGUgZ2xvYmFsIGVycm9yIGhhbmRsZXIuXG4gKlxuICogVXNlIGF0IHlvdXIgb3duIHJpc2ssIHRoaXMgbWlnaHQgYnJlYWsgd2l0aG91dCBjaGFuZ2Vsb2cgbm90aWNlLCBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyKGhhbmRsZXIpIHtcbiAgY29uc3QgdHlwZSA9ICdlcnJvcic7XG4gIGFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcik7XG4gIG1heWJlSW5zdHJ1bWVudCh0eXBlLCBpbnN0cnVtZW50RXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpbnN0cnVtZW50RXJyb3IoKSB7XG4gIF9vbGRPbkVycm9ySGFuZGxlciA9IEdMT0JBTF9PQkoub25lcnJvcjtcblxuICAvLyBOb3RlOiBUaGUgcmVhc29uIHdlIGFyZSBkb2luZyB3aW5kb3cub25lcnJvciBpbnN0ZWFkIG9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicpXG4gIC8vIGlzIHRoYXQgd2UgYXJlIHVzaW5nIHRoaXMgaGFuZGxlciBpbiB0aGUgTG9hZGVyIFNjcmlwdCwgdG8gaGFuZGxlIGJ1ZmZlcmVkIGVycm9ycyBjb25zaXN0ZW50bHlcbiAgR0xPQkFMX09CSi5vbmVycm9yID0gZnVuY3Rpb24gKFxuICAgIG1zZyxcbiAgICB1cmwsXG4gICAgbGluZSxcbiAgICBjb2x1bW4sXG4gICAgZXJyb3IsXG4gICkge1xuICAgIGNvbnN0IGhhbmRsZXJEYXRhID0ge1xuICAgICAgY29sdW1uLFxuICAgICAgZXJyb3IsXG4gICAgICBsaW5lLFxuICAgICAgbXNnLFxuICAgICAgdXJsLFxuICAgIH07XG4gICAgdHJpZ2dlckhhbmRsZXJzKCdlcnJvcicsIGhhbmRsZXJEYXRhKTtcblxuICAgIGlmIChfb2xkT25FcnJvckhhbmRsZXIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgIHJldHVybiBfb2xkT25FcnJvckhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgR0xPQkFMX09CSi5vbmVycm9yLl9fU0VOVFJZX0lOU1RSVU1FTlRFRF9fID0gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxFcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalError.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalUnhandledRejection.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalUnhandledRejection.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addGlobalUnhandledRejectionInstrumentationHandler: () => (/* binding */ addGlobalUnhandledRejectionInstrumentationHandler)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _handlers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\");\n\n\n\nlet _oldOnUnhandledRejectionHandler = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalUnhandledRejectionInstrumentationHandler(\n  handler,\n) {\n  const type = 'unhandledrejection';\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.addHandler)(type, handler);\n  (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.maybeInstrument)(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onunhandledrejection;\n\n  // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')\n  // is that we are using this handler in the Loader Script, to handle buffered rejections consistently\n  _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onunhandledrejection = function (e) {\n    const handlerData = e;\n    (0,_handlers_js__WEBPACK_IMPORTED_MODULE_0__.triggerHandlers)('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  _worldwide_js__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n\n\n//# sourceMappingURL=globalUnhandledRejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2dsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFDZ0M7O0FBRTdFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSx3REFBVTtBQUNaLEVBQUUsNkRBQWU7QUFDakI7O0FBRUE7QUFDQSxvQ0FBb0MscURBQVU7O0FBRTlDO0FBQ0E7QUFDQSxFQUFFLHFEQUFVO0FBQ1o7QUFDQSxJQUFJLDZEQUFlOztBQUVuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEVBQUUscURBQVU7QUFDWjs7QUFFNkQ7QUFDN0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanM/ZWVhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi4vd29ybGR3aWRlLmpzJztcbmltcG9ydCB7IGFkZEhhbmRsZXIsIG1heWJlSW5zdHJ1bWVudCwgdHJpZ2dlckhhbmRsZXJzIH0gZnJvbSAnLi9oYW5kbGVycy5qcyc7XG5cbmxldCBfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyID0gbnVsbDtcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIgZm9yIHdoZW4gYW4gdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uIGlzIGNhcHR1cmVkLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIoXG4gIGhhbmRsZXIsXG4pIHtcbiAgY29uc3QgdHlwZSA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xuICBhZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBtYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudFVuaGFuZGxlZFJlamVjdGlvbik7XG59XG5cbmZ1bmN0aW9uIGluc3RydW1lbnRVbmhhbmRsZWRSZWplY3Rpb24oKSB7XG4gIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSBHTE9CQUxfT0JKLm9udW5oYW5kbGVkcmVqZWN0aW9uO1xuXG4gIC8vIE5vdGU6IFRoZSByZWFzb24gd2UgYXJlIGRvaW5nIHdpbmRvdy5vbnVuaGFuZGxlZHJlamVjdGlvbiBpbnN0ZWFkIG9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nKVxuICAvLyBpcyB0aGF0IHdlIGFyZSB1c2luZyB0aGlzIGhhbmRsZXIgaW4gdGhlIExvYWRlciBTY3JpcHQsIHRvIGhhbmRsZSBidWZmZXJlZCByZWplY3Rpb25zIGNvbnNpc3RlbnRseVxuICBHTE9CQUxfT0JKLm9udW5oYW5kbGVkcmVqZWN0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgICBjb25zdCBoYW5kbGVyRGF0YSA9IGU7XG4gICAgdHJpZ2dlckhhbmRsZXJzKCd1bmhhbmRsZWRyZWplY3Rpb24nLCBoYW5kbGVyRGF0YSk7XG5cbiAgICBpZiAoX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlcikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgcmV0dXJuIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBHTE9CQUxfT0JKLm9udW5oYW5kbGVkcmVqZWN0aW9uLl9fU0VOVFJZX0lOU1RSVU1FTlRFRF9fID0gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/instrument/globalUnhandledRejection.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHandler: () => (/* binding */ addHandler),\n/* harmony export */   maybeInstrument: () => (/* binding */ maybeInstrument),\n/* harmony export */   resetInstrumentationHandlers: () => (/* binding */ resetInstrumentationHandlers),\n/* harmony export */   triggerHandlers: () => (/* binding */ triggerHandlers)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../stacktrace.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n\n\n\n\n// We keep the handlers globally\nconst handlers = {};\nconst instrumented = {};\n\n/** Add a handler function. */\nfunction addHandler(type, handler) {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] ).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nfunction resetInstrumentationHandlers() {\n  Object.keys(handlers).forEach(key => {\n    handlers[key ] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nfunction maybeInstrument(type, instrumentFn) {\n  if (!instrumented[type]) {\n    instrumented[type] = true;\n    try {\n      instrumentFn();\n    } catch (e) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.error(`Error while instrumenting ${type}`, e);\n    }\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nfunction triggerHandlers(type, data) {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD &&\n        _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n\n//# sourceMappingURL=handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2hhbmRsZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBbUQ7QUFDYjtBQUNhOztBQUVuRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sTUFBTSx3REFBVyxJQUFJLDhDQUFNLG9DQUFvQyxLQUFLO0FBQ3BFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLE1BQU0sd0RBQVc7QUFDakIsUUFBUSw4Q0FBTTtBQUNkLG9FQUFvRSxLQUFLLFVBQVUsK0RBQWUsVUFBVTtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVzRjtBQUN0RiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9pbnN0cnVtZW50L2hhbmRsZXJzLmpzPzQ1NmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi8uLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IHsgZ2V0RnVuY3Rpb25OYW1lIH0gZnJvbSAnLi4vc3RhY2t0cmFjZS5qcyc7XG5cbi8vIFdlIGtlZXAgdGhlIGhhbmRsZXJzIGdsb2JhbGx5XG5jb25zdCBoYW5kbGVycyA9IHt9O1xuY29uc3QgaW5zdHJ1bWVudGVkID0ge307XG5cbi8qKiBBZGQgYSBoYW5kbGVyIGZ1bmN0aW9uLiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlcih0eXBlLCBoYW5kbGVyKSB7XG4gIGhhbmRsZXJzW3R5cGVdID0gaGFuZGxlcnNbdHlwZV0gfHwgW107XG4gIChoYW5kbGVyc1t0eXBlXSApLnB1c2goaGFuZGxlcik7XG59XG5cbi8qKlxuICogUmVzZXQgYWxsIGluc3RydW1lbnRhdGlvbiBoYW5kbGVycy5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgYnkgdGVzdHMgdG8gZW5zdXJlIHdlIGhhdmUgYSBjbGVhbiBzbGF0ZSBvZiBpbnN0cnVtZW50YXRpb24gaGFuZGxlcnMuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0SW5zdHJ1bWVudGF0aW9uSGFuZGxlcnMoKSB7XG4gIE9iamVjdC5rZXlzKGhhbmRsZXJzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaGFuZGxlcnNba2V5IF0gPSB1bmRlZmluZWQ7XG4gIH0pO1xufVxuXG4vKiogTWF5YmUgcnVuIGFuIGluc3RydW1lbnRhdGlvbiBmdW5jdGlvbiwgdW5sZXNzIGl0IHdhcyBhbHJlYWR5IGNhbGxlZC4gKi9cbmZ1bmN0aW9uIG1heWJlSW5zdHJ1bWVudCh0eXBlLCBpbnN0cnVtZW50Rm4pIHtcbiAgaWYgKCFpbnN0cnVtZW50ZWRbdHlwZV0pIHtcbiAgICBpbnN0cnVtZW50ZWRbdHlwZV0gPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICBpbnN0cnVtZW50Rm4oKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBERUJVR19CVUlMRCAmJiBsb2dnZXIuZXJyb3IoYEVycm9yIHdoaWxlIGluc3RydW1lbnRpbmcgJHt0eXBlfWAsIGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiogVHJpZ2dlciBoYW5kbGVycyBmb3IgYSBnaXZlbiBpbnN0cnVtZW50YXRpb24gdHlwZS4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVycyh0eXBlLCBkYXRhKSB7XG4gIGNvbnN0IHR5cGVIYW5kbGVycyA9IHR5cGUgJiYgaGFuZGxlcnNbdHlwZV07XG4gIGlmICghdHlwZUhhbmRsZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHR5cGVIYW5kbGVycykge1xuICAgIHRyeSB7XG4gICAgICBoYW5kbGVyKGRhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIERFQlVHX0JVSUxEICYmXG4gICAgICAgIGxvZ2dlci5lcnJvcihcbiAgICAgICAgICBgRXJyb3Igd2hpbGUgdHJpZ2dlcmluZyBpbnN0cnVtZW50YXRpb24gaGFuZGxlci5cXG5UeXBlOiAke3R5cGV9XFxuTmFtZTogJHtnZXRGdW5jdGlvbk5hbWUoaGFuZGxlcil9XFxuRXJyb3I6YCxcbiAgICAgICAgICBlLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBhZGRIYW5kbGVyLCBtYXliZUluc3RydW1lbnQsIHJlc2V0SW5zdHJ1bWVudGF0aW9uSGFuZGxlcnMsIHRyaWdnZXJIYW5kbGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZGxlcnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/instrument/handlers.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/is.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/is.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDOMError: () => (/* binding */ isDOMError),\n/* harmony export */   isDOMException: () => (/* binding */ isDOMException),\n/* harmony export */   isElement: () => (/* binding */ isElement),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isErrorEvent: () => (/* binding */ isErrorEvent),\n/* harmony export */   isEvent: () => (/* binding */ isEvent),\n/* harmony export */   isInstanceOf: () => (/* binding */ isInstanceOf),\n/* harmony export */   isParameterizedString: () => (/* binding */ isParameterizedString),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isPrimitive: () => (/* binding */ isPrimitive),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isRequest: () => (/* binding */ isRequest),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSyntheticEvent: () => (/* binding */ isSyntheticEvent),\n/* harmony export */   isThenable: () => (/* binding */ isThenable),\n/* harmony export */   isVueViewModel: () => (/* binding */ isVueViewModel)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isError(wat) {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat, className) {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isErrorEvent(wat) {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMError(wat) {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMException(wat) {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isString(wat) {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isParameterizedString(wat) {\n  return (\n    typeof wat === 'object' &&\n    wat !== null &&\n    '__sentry_template_string__' in wat &&\n    '__sentry_template_values__' in wat\n  );\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPrimitive(wat) {\n  return wat === null || isParameterizedString(wat) || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPlainObject(wat) {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isRegExp(wat) {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nfunction isThenable(wat) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat?.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nfunction isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isVueViewModel(wat) {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat ).__isVue || (wat )._isVue));\n}\n\n/**\n * Checks whether the given parameter is a Standard Web API Request instance.\n *\n * Returns false if Request is not available in the current runtime.\n */\nfunction isRequest(request) {\n  return typeof Request !== 'undefined' && isInstanceOf(request, Request);\n}\n\n\n//# sourceMappingURL=is.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/is.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/logger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/logger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONSOLE_LEVELS: () => (/* binding */ CONSOLE_LEVELS),\n/* harmony export */   consoleSandbox: () => (/* binding */ consoleSandbox),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   originalConsoleMethods: () => (/* binding */ originalConsoleMethods)\n/* harmony export */ });\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../carrier.js */ \"./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nconst CONSOLE_LEVELS = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] ;\n\n/** This may be mutated by the console instrumentation. */\nconst originalConsoleMethods\n\n = {};\n\n/** A Sentry Logger instance. */\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!(\"console\" in _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console ;\n  const wrappedFuncs = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) ;\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] ;\n    wrappedFuncs[level] = console[level] ;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] ;\n    });\n  }\n}\n\nfunction makeLogger() {\n  let enabled = false;\n  const logger = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled,\n  };\n\n  if (_debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = (...args) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger ;\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n */\nconst logger = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_2__.getGlobalSingleton)('logger', makeLogger);\n\n\n//# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9sb2dnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFtRDtBQUNIO0FBQ0o7O0FBRTVDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtFQUF1QjtBQUMvQjtBQUNBOztBQUVBLGtCQUFrQixxREFBVTtBQUM1Qjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLE1BQU0sd0RBQVc7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFEQUFVLGtCQUFrQixPQUFPLEdBQUcsS0FBSztBQUN2RCxXQUFXO0FBQ1g7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrREFBa0I7O0FBRXlDO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L2xvZ2dlci5qcz9jNTYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEdsb2JhbFNpbmdsZXRvbiB9IGZyb20gJy4uL2NhcnJpZXIuanMnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBHTE9CQUxfT0JKIH0gZnJvbSAnLi93b3JsZHdpZGUuanMnO1xuXG4vKiogUHJlZml4IGZvciBsb2dnaW5nIHN0cmluZ3MgKi9cbmNvbnN0IFBSRUZJWCA9ICdTZW50cnkgTG9nZ2VyICc7XG5cbmNvbnN0IENPTlNPTEVfTEVWRUxTID0gW1xuICAnZGVidWcnLFxuICAnaW5mbycsXG4gICd3YXJuJyxcbiAgJ2Vycm9yJyxcbiAgJ2xvZycsXG4gICdhc3NlcnQnLFxuICAndHJhY2UnLFxuXSA7XG5cbi8qKiBUaGlzIG1heSBiZSBtdXRhdGVkIGJ5IHRoZSBjb25zb2xlIGluc3RydW1lbnRhdGlvbi4gKi9cbmNvbnN0IG9yaWdpbmFsQ29uc29sZU1ldGhvZHNcblxuID0ge307XG5cbi8qKiBBIFNlbnRyeSBMb2dnZXIgaW5zdGFuY2UuICovXG5cbi8qKlxuICogVGVtcG9yYXJpbHkgZGlzYWJsZSBzZW50cnkgY29uc29sZSBpbnN0cnVtZW50YXRpb25zLlxuICpcbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gcnVuIGFnYWluc3QgdGhlIG9yaWdpbmFsIGBjb25zb2xlYCBtZXNzYWdlc1xuICogQHJldHVybnMgVGhlIHJlc3VsdHMgb2YgdGhlIGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGNvbnNvbGVTYW5kYm94KGNhbGxiYWNrKSB7XG4gIGlmICghKCdjb25zb2xlJyBpbiBHTE9CQUxfT0JKKSkge1xuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9XG5cbiAgY29uc3QgY29uc29sZSA9IEdMT0JBTF9PQkouY29uc29sZSA7XG4gIGNvbnN0IHdyYXBwZWRGdW5jcyA9IHt9O1xuXG4gIGNvbnN0IHdyYXBwZWRMZXZlbHMgPSBPYmplY3Qua2V5cyhvcmlnaW5hbENvbnNvbGVNZXRob2RzKSA7XG5cbiAgLy8gUmVzdG9yZSBhbGwgd3JhcHBlZCBjb25zb2xlIG1ldGhvZHNcbiAgd3JhcHBlZExldmVscy5mb3JFYWNoKGxldmVsID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbENvbnNvbGVNZXRob2QgPSBvcmlnaW5hbENvbnNvbGVNZXRob2RzW2xldmVsXSA7XG4gICAgd3JhcHBlZEZ1bmNzW2xldmVsXSA9IGNvbnNvbGVbbGV2ZWxdIDtcbiAgICBjb25zb2xlW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZDtcbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBSZXZlcnQgcmVzdG9yYXRpb24gdG8gd3JhcHBlZCBzdGF0ZVxuICAgIHdyYXBwZWRMZXZlbHMuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgICBjb25zb2xlW2xldmVsXSA9IHdyYXBwZWRGdW5jc1tsZXZlbF0gO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VMb2dnZXIoKSB7XG4gIGxldCBlbmFibGVkID0gZmFsc2U7XG4gIGNvbnN0IGxvZ2dlciA9IHtcbiAgICBlbmFibGU6ICgpID0+IHtcbiAgICAgIGVuYWJsZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZGlzYWJsZTogKCkgPT4ge1xuICAgICAgZW5hYmxlZCA9IGZhbHNlO1xuICAgIH0sXG4gICAgaXNFbmFibGVkOiAoKSA9PiBlbmFibGVkLFxuICB9O1xuXG4gIGlmIChERUJVR19CVUlMRCkge1xuICAgIENPTlNPTEVfTEVWRUxTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgIGNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgICAgICAgIEdMT0JBTF9PQkouY29uc29sZVtuYW1lXShgJHtQUkVGSVh9WyR7bmFtZX1dOmAsIC4uLmFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIENPTlNPTEVfTEVWRUxTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbG9nZ2VyIDtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgbG9nZ2VyIHNpbmdsZXRvbiB3aGljaCBlaXRoZXIgbG9ncyB0aGluZ3Mgb3Igbm8tb3BzIGlmIGxvZ2dpbmcgaXMgbm90IGVuYWJsZWQuXG4gKiBUaGUgbG9nZ2VyIGlzIGEgc2luZ2xldG9uIG9uIHRoZSBjYXJyaWVyLCB0byBlbnN1cmUgdGhhdCBhIGNvbnNpc3RlbnQgbG9nZ2VyIGlzIHVzZWQgdGhyb3VnaG91dCB0aGUgU0RLLlxuICovXG5jb25zdCBsb2dnZXIgPSBnZXRHbG9iYWxTaW5nbGV0b24oJ2xvZ2dlcicsIG1ha2VMb2dnZXIpO1xuXG5leHBvcnQgeyBDT05TT0xFX0xFVkVMUywgY29uc29sZVNhbmRib3gsIGxvZ2dlciwgb3JpZ2luYWxDb25zb2xlTWV0aG9kcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/lru.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/lru.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LRUMap: () => (/* binding */ LRUMap)\n/* harmony export */ });\n/** A simple Least Recently Used map */\nclass LRUMap {\n\n   constructor(  _maxSize) {this._maxSize = _maxSize;\n    this._cache = new Map();\n  }\n\n  /** Get the current size of the cache */\n   get size() {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n   get(key) {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n   set(key, value) {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n   remove(key) {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n   clear() {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n   keys() {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n   values() {\n    const values = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\n\n\n//# sourceMappingURL=lru.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9scnUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L2xydS5qcz9jZWM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBBIHNpbXBsZSBMZWFzdCBSZWNlbnRseSBVc2VkIG1hcCAqL1xuY2xhc3MgTFJVTWFwIHtcblxuICAgY29uc3RydWN0b3IoICBfbWF4U2l6ZSkge3RoaXMuX21heFNpemUgPSBfbWF4U2l6ZTtcbiAgICB0aGlzLl9jYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIC8qKiBHZXQgdGhlIGN1cnJlbnQgc2l6ZSBvZiB0aGUgY2FjaGUgKi9cbiAgIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9jYWNoZS5zaXplO1xuICB9XG5cbiAgLyoqIEdldCBhbiBlbnRyeSBvciB1bmRlZmluZWQgaWYgaXQgd2FzIG5vdCBpbiB0aGUgY2FjaGUuIFJlLWluc2VydHMgdG8gdXBkYXRlIHRoZSByZWNlbnRseSB1c2VkIG9yZGVyICovXG4gICBnZXQoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLl9jYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFuZCByZS1pbnNlcnQgdG8gdXBkYXRlIHRoZSBvcmRlclxuICAgIHRoaXMuX2NhY2hlLmRlbGV0ZShrZXkpO1xuICAgIHRoaXMuX2NhY2hlLnNldChrZXksIHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKiogSW5zZXJ0IGFuIGVudHJ5IGFuZCBldmljdCBhbiBvbGRlciBlbnRyeSBpZiB3ZSd2ZSByZWFjaGVkIG1heFNpemUgKi9cbiAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX2NhY2hlLnNpemUgPj0gdGhpcy5fbWF4U2l6ZSkge1xuICAgICAgLy8ga2V5cygpIHJldHVybnMgYW4gaXRlcmF0b3IgaW4gaW5zZXJ0aW9uIG9yZGVyIHNvIGtleXMoKS5uZXh0KCkgZ2l2ZXMgdXMgdGhlIG9sZGVzdCBrZXlcbiAgICAgIHRoaXMuX2NhY2hlLmRlbGV0ZSh0aGlzLl9jYWNoZS5rZXlzKCkubmV4dCgpLnZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5fY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqIFJlbW92ZSBhbiBlbnRyeSBhbmQgcmV0dXJuIHRoZSBlbnRyeSBpZiBpdCB3YXMgaW4gdGhlIGNhY2hlICovXG4gICByZW1vdmUoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLl9jYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuX2NhY2hlLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKiogQ2xlYXIgYWxsIGVudHJpZXMgKi9cbiAgIGNsZWFyKCkge1xuICAgIHRoaXMuX2NhY2hlLmNsZWFyKCk7XG4gIH1cblxuICAvKiogR2V0IGFsbCB0aGUga2V5cyAqL1xuICAga2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9jYWNoZS5rZXlzKCkpO1xuICB9XG5cbiAgLyoqIEdldCBhbGwgdGhlIHZhbHVlcyAqL1xuICAgdmFsdWVzKCkge1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIHRoaXMuX2NhY2hlLmZvckVhY2godmFsdWUgPT4gdmFsdWVzLnB1c2godmFsdWUpKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG59XG5cbmV4cG9ydCB7IExSVU1hcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHJ1LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/lru.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/misc.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/misc.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addContextToFrame: () => (/* binding */ addContextToFrame),\n/* harmony export */   addExceptionMechanism: () => (/* binding */ addExceptionMechanism),\n/* harmony export */   addExceptionTypeValue: () => (/* binding */ addExceptionTypeValue),\n/* harmony export */   checkOrSetAlreadyCaught: () => (/* binding */ checkOrSetAlreadyCaught),\n/* harmony export */   getEventDescription: () => (/* binding */ getEventDescription),\n/* harmony export */   parseSemver: () => (/* binding */ parseSemver),\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\nfunction getCrypto() {\n  const gbl = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ ;\n  return gbl.crypto || gbl.msCrypto;\n}\n\n/**\n * UUID4 generator\n * @param crypto Object that provides the crypto API.\n * @returns string Generated UUID4.\n */\nfunction uuid4(crypto = getCrypto()) {\n  let getRandomByte = () => Math.random() * 16;\n  try {\n    if (crypto?.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto?.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return typedArray[0];\n      };\n    }\n  } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] ) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c ) ^ ((getRandomByte() & 15) >> ((c ) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event) {\n  return event.exception?.values?.[0];\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nfunction getEventDescription(event) {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nfunction addExceptionTypeValue(event, value, type) {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nfunction addExceptionMechanism(event, newMechanism) {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\n\nfunction _parseInt(input) {\n  return parseInt(input || '', 10);\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nfunction parseSemver(input) {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = _parseInt(match[1]);\n  const minor = _parseInt(match[2]);\n  const patch = _parseInt(match[3]);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nfunction addContextToFrame(lines, frame, linesOfContext = 5) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line) => (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n\n  // We guard here to ensure this is not larger than the existing number of lines\n  const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  frame.context_line = (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(lines[lineIndex], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line) => (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.snipLine)(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nfunction checkOrSetAlreadyCaught(exception) {\n  if (isAlreadyCaptured(exception)) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    (0,_object_js__WEBPACK_IMPORTED_MODULE_2__.addNonEnumerableProperty)(exception , '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\nfunction isAlreadyCaptured(exception) {\n  try {\n    return (exception ).__sentry_captured__;\n  } catch {} // eslint-disable-line no-empty\n}\n\n\n//# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/node-stack-trace.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/node-stack-trace.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filenameIsInApp: () => (/* binding */ filenameIsInApp),\n/* harmony export */   node: () => (/* binding */ node),\n/* harmony export */   nodeStackLineParser: () => (/* binding */ nodeStackLineParser)\n/* harmony export */ });\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stacktrace.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n\n\n/**\n * Does this filename look like it's part of the app code?\n */\nfunction filenameIsInApp(filename, isNative = false) {\n  const isInternal =\n    isNative ||\n    (filename &&\n      // It's not internal if it's an absolute linux path\n      !filename.startsWith('/') &&\n      // It's not internal if it's an absolute windows path\n      !filename.match(/^[A-Z]:/) &&\n      // It's not internal if the path is starting with a dot\n      !filename.startsWith('.') &&\n      // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n      !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//)); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nfunction node(getModule) {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return (line) => {\n    const lineMatch = line.match(FULL_MATCH);\n\n    if (lineMatch) {\n      let object;\n      let method;\n      let functionName;\n      let typeName;\n      let methodName;\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n\n      if (functionName === undefined) {\n        methodName = methodName || _stacktrace_js__WEBPACK_IMPORTED_MODULE_0__.UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n\n      let filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename?.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative),\n      };\n    }\n\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nfunction nodeStackLineParser(getModule) {\n  return [90, node(getModule)];\n}\n\nfunction _parseIntOrUndefined(input) {\n  return parseInt(input || '', 10) || undefined;\n}\n\n\n//# sourceMappingURL=node-stack-trace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9ub2RlLXN0YWNrLXRyYWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUQ7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7O0FBRTVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQ0FBa0MsR0FBRztBQUNyQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1DQUFtQyw0REFBZ0I7QUFDbkQscUNBQXFDLFNBQVMsR0FBRyxXQUFXO0FBQzVEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVzRDtBQUN0RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9ub2RlLXN0YWNrLXRyYWNlLmpzPzUzNGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVU5LTk9XTl9GVU5DVElPTiB9IGZyb20gJy4vc3RhY2t0cmFjZS5qcyc7XG5cbi8qKlxuICogRG9lcyB0aGlzIGZpbGVuYW1lIGxvb2sgbGlrZSBpdCdzIHBhcnQgb2YgdGhlIGFwcCBjb2RlP1xuICovXG5mdW5jdGlvbiBmaWxlbmFtZUlzSW5BcHAoZmlsZW5hbWUsIGlzTmF0aXZlID0gZmFsc2UpIHtcbiAgY29uc3QgaXNJbnRlcm5hbCA9XG4gICAgaXNOYXRpdmUgfHxcbiAgICAoZmlsZW5hbWUgJiZcbiAgICAgIC8vIEl0J3Mgbm90IGludGVybmFsIGlmIGl0J3MgYW4gYWJzb2x1dGUgbGludXggcGF0aFxuICAgICAgIWZpbGVuYW1lLnN0YXJ0c1dpdGgoJy8nKSAmJlxuICAgICAgLy8gSXQncyBub3QgaW50ZXJuYWwgaWYgaXQncyBhbiBhYnNvbHV0ZSB3aW5kb3dzIHBhdGhcbiAgICAgICFmaWxlbmFtZS5tYXRjaCgvXltBLVpdOi8pICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgcGF0aCBpcyBzdGFydGluZyB3aXRoIGEgZG90XG4gICAgICAhZmlsZW5hbWUuc3RhcnRzV2l0aCgnLicpICYmXG4gICAgICAvLyBJdCdzIG5vdCBpbnRlcm5hbCBpZiB0aGUgZnJhbWUgaGFzIGEgcHJvdG9jb2wuIEluIG5vZGUsIHRoaXMgaXMgdXN1YWxseSB0aGUgY2FzZSBpZiB0aGUgZmlsZSBnb3QgcHJlLXByb2Nlc3NlZCB3aXRoIGEgYnVuZGxlciBsaWtlIHdlYnBhY2tcbiAgICAgICFmaWxlbmFtZS5tYXRjaCgvXlthLXpBLVpdKFthLXpBLVowLTkuXFwtK10pKjpcXC9cXC8vKSk7IC8vIFNjaGVtYSBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzY0MTc4MlxuXG4gIC8vIGluX2FwcCBpcyBhbGwgdGhhdCdzIG5vdCBhbiBpbnRlcm5hbCBOb2RlIGZ1bmN0aW9uIG9yIGEgbW9kdWxlIHdpdGhpbiBub2RlX21vZHVsZXNcbiAgLy8gbm90ZSB0aGF0IGlzTmF0aXZlIGFwcGVhcnMgdG8gcmV0dXJuIHRydWUgZXZlbiBmb3Igbm9kZSBjb3JlIGxpYnJhcmllc1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9yYXZlbi1ub2RlL2lzc3Vlcy8xNzZcblxuICByZXR1cm4gIWlzSW50ZXJuYWwgJiYgZmlsZW5hbWUgIT09IHVuZGVmaW5lZCAmJiAhZmlsZW5hbWUuaW5jbHVkZXMoJ25vZGVfbW9kdWxlcy8nKTtcbn1cblxuLyoqIE5vZGUgU3RhY2sgbGluZSBwYXJzZXIgKi9cbmZ1bmN0aW9uIG5vZGUoZ2V0TW9kdWxlKSB7XG4gIGNvbnN0IEZJTEVOQU1FX01BVENIID0gL15cXHMqWy1dezQsfSQvO1xuICBjb25zdCBGVUxMX01BVENIID0gL2F0ICg/OmFzeW5jICk/KD86KC4rPylcXHMrXFwoKT8oPzooLispOihcXGQrKTooXFxkKyk/fChbXildKykpXFwpPy87XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgcmV0dXJuIChsaW5lKSA9PiB7XG4gICAgY29uc3QgbGluZU1hdGNoID0gbGluZS5tYXRjaChGVUxMX01BVENIKTtcblxuICAgIGlmIChsaW5lTWF0Y2gpIHtcbiAgICAgIGxldCBvYmplY3Q7XG4gICAgICBsZXQgbWV0aG9kO1xuICAgICAgbGV0IGZ1bmN0aW9uTmFtZTtcbiAgICAgIGxldCB0eXBlTmFtZTtcbiAgICAgIGxldCBtZXRob2ROYW1lO1xuXG4gICAgICBpZiAobGluZU1hdGNoWzFdKSB7XG4gICAgICAgIGZ1bmN0aW9uTmFtZSA9IGxpbmVNYXRjaFsxXTtcblxuICAgICAgICBsZXQgbWV0aG9kU3RhcnQgPSBmdW5jdGlvbk5hbWUubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgaWYgKGZ1bmN0aW9uTmFtZVttZXRob2RTdGFydCAtIDFdID09PSAnLicpIHtcbiAgICAgICAgICBtZXRob2RTdGFydC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1ldGhvZFN0YXJ0ID4gMCkge1xuICAgICAgICAgIG9iamVjdCA9IGZ1bmN0aW9uTmFtZS5zbGljZSgwLCBtZXRob2RTdGFydCk7XG4gICAgICAgICAgbWV0aG9kID0gZnVuY3Rpb25OYW1lLnNsaWNlKG1ldGhvZFN0YXJ0ICsgMSk7XG4gICAgICAgICAgY29uc3Qgb2JqZWN0RW5kID0gb2JqZWN0LmluZGV4T2YoJy5Nb2R1bGUnKTtcbiAgICAgICAgICBpZiAob2JqZWN0RW5kID4gMCkge1xuICAgICAgICAgICAgZnVuY3Rpb25OYW1lID0gZnVuY3Rpb25OYW1lLnNsaWNlKG9iamVjdEVuZCArIDEpO1xuICAgICAgICAgICAgb2JqZWN0ID0gb2JqZWN0LnNsaWNlKDAsIG9iamVjdEVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHR5cGVOYW1lID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0aG9kKSB7XG4gICAgICAgIHR5cGVOYW1lID0gb2JqZWN0O1xuICAgICAgICBtZXRob2ROYW1lID0gbWV0aG9kO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0aG9kID09PSAnPGFub255bW91cz4nKSB7XG4gICAgICAgIG1ldGhvZE5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZ1bmN0aW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKGZ1bmN0aW9uTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1ldGhvZE5hbWUgPSBtZXRob2ROYW1lIHx8IFVOS05PV05fRlVOQ1RJT047XG4gICAgICAgIGZ1bmN0aW9uTmFtZSA9IHR5cGVOYW1lID8gYCR7dHlwZU5hbWV9LiR7bWV0aG9kTmFtZX1gIDogbWV0aG9kTmFtZTtcbiAgICAgIH1cblxuICAgICAgbGV0IGZpbGVuYW1lID0gbGluZU1hdGNoWzJdPy5zdGFydHNXaXRoKCdmaWxlOi8vJykgPyBsaW5lTWF0Y2hbMl0uc2xpY2UoNykgOiBsaW5lTWF0Y2hbMl07XG4gICAgICBjb25zdCBpc05hdGl2ZSA9IGxpbmVNYXRjaFs1XSA9PT0gJ25hdGl2ZSc7XG5cbiAgICAgIC8vIElmIGl0J3MgYSBXaW5kb3dzIHBhdGgsIHRyaW0gdGhlIGxlYWRpbmcgc2xhc2ggc28gdGhhdCBgL0M6L2Zvb2AgYmVjb21lcyBgQzovZm9vYFxuICAgICAgaWYgKGZpbGVuYW1lPy5tYXRjaCgvXFwvW0EtWl06LykpIHtcbiAgICAgICAgZmlsZW5hbWUgPSBmaWxlbmFtZS5zbGljZSgxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmaWxlbmFtZSAmJiBsaW5lTWF0Y2hbNV0gJiYgIWlzTmF0aXZlKSB7XG4gICAgICAgIGZpbGVuYW1lID0gbGluZU1hdGNoWzVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWUgPyBkZWNvZGVVUkkoZmlsZW5hbWUpIDogdW5kZWZpbmVkLFxuICAgICAgICBtb2R1bGU6IGdldE1vZHVsZSA/IGdldE1vZHVsZShmaWxlbmFtZSkgOiB1bmRlZmluZWQsXG4gICAgICAgIGZ1bmN0aW9uOiBmdW5jdGlvbk5hbWUsXG4gICAgICAgIGxpbmVubzogX3BhcnNlSW50T3JVbmRlZmluZWQobGluZU1hdGNoWzNdKSxcbiAgICAgICAgY29sbm86IF9wYXJzZUludE9yVW5kZWZpbmVkKGxpbmVNYXRjaFs0XSksXG4gICAgICAgIGluX2FwcDogZmlsZW5hbWVJc0luQXBwKGZpbGVuYW1lIHx8ICcnLCBpc05hdGl2ZSksXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChsaW5lLm1hdGNoKEZJTEVOQU1FX01BVENIKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZW5hbWU6IGxpbmUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbi8qKlxuICogTm9kZS5qcyBzdGFjayBsaW5lIHBhcnNlclxuICpcbiAqIFRoaXMgaXMgaW4gQHNlbnRyeS9jb3JlIHNvIGl0IGNhbiBiZSB1c2VkIGZyb20gdGhlIEVsZWN0cm9uIFNESyBpbiB0aGUgYnJvd3NlciBmb3Igd2hlbiBgbm9kZUludGVncmF0aW9uID09IHRydWVgLlxuICogVGhpcyBhbGxvd3MgaXQgdG8gYmUgdXNlZCB3aXRob3V0IHJlZmVyZW5jaW5nIG9yIGltcG9ydGluZyBhbnkgbm9kZSBzcGVjaWZpYyBjb2RlIHdoaWNoIGNhdXNlcyBidW5kbGVycyB0byBjb21wbGFpblxuICovXG5mdW5jdGlvbiBub2RlU3RhY2tMaW5lUGFyc2VyKGdldE1vZHVsZSkge1xuICByZXR1cm4gWzkwLCBub2RlKGdldE1vZHVsZSldO1xufVxuXG5mdW5jdGlvbiBfcGFyc2VJbnRPclVuZGVmaW5lZChpbnB1dCkge1xuICByZXR1cm4gcGFyc2VJbnQoaW5wdXQgfHwgJycsIDEwKSB8fCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCB7IGZpbGVuYW1lSXNJbkFwcCwgbm9kZSwgbm9kZVN0YWNrTGluZVBhcnNlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS1zdGFjay10cmFjZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/node-stack-trace.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   normalizeToSize: () => (/* binding */ normalizeToSize),\n/* harmony export */   normalizeUrlToBase: () => (/* binding */ normalizeUrlToBase)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _stacktrace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stacktrace.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n\n\n\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nfunction normalizeToSize(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object,\n  // Default Node.js REPL depth\n  depth = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize = 100 * 1024,\n) {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized ;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key,\n  value,\n  depth = +Infinity,\n  maxProperties = +Infinity,\n  memo = memoBuilder(),\n) {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    ['boolean', 'string'].includes(typeof value) ||\n    (typeof value === 'number' && Number.isFinite(value))\n  ) {\n    return value ;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value )['__sentry_skip_normalization__']) {\n    return value ;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value )['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value )['__sentry_override_normalization_depth__'] )\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value ;\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) ;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = (0,_object_js__WEBPACK_IMPORTED_MODULE_0__.convertToPlainObject)(value );\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value,\n) {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value )._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isVueViewModel)(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if ((0,_is_js__WEBPACK_IMPORTED_MODULE_1__.isSyntheticEvent)(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && !Number.isFinite(value)) {\n      return `[${value}]`;\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${(0,_stacktrace_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value) {\n  const prototype = Object.getPrototypeOf(value);\n\n  return prototype?.constructor ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nfunction normalizeUrlToBase(url, basePath) {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n\n/**\n * Helper to decycle json objects\n */\nfunction memoBuilder() {\n  const inner = new WeakSet();\n  function memoize(obj) {\n    if (inner.has(obj)) {\n      return true;\n    }\n    inner.add(obj);\n    return false;\n  }\n\n  function unmemoize(obj) {\n    inner.delete(obj);\n  }\n  return [memoize, unmemoize];\n}\n\n\n//# sourceMappingURL=normalize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/object.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/object.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addNonEnumerableProperty: () => (/* binding */ addNonEnumerableProperty),\n/* harmony export */   convertToPlainObject: () => (/* binding */ convertToPlainObject),\n/* harmony export */   dropUndefinedKeys: () => (/* binding */ dropUndefinedKeys),\n/* harmony export */   extractExceptionKeysForMessage: () => (/* binding */ extractExceptionKeysForMessage),\n/* harmony export */   fill: () => (/* binding */ fill),\n/* harmony export */   getOriginalFunction: () => (/* binding */ getOriginalFunction),\n/* harmony export */   markFunctionWrapped: () => (/* binding */ markFunctionWrapped),\n/* harmony export */   objectify: () => (/* binding */ objectify)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./browser.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/browser.js\");\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n\n\n\n\n\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * If the method on the passed object is not a function, the wrapper will not be applied.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nfunction fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n\n  // explicitly casting to unknown because we don't know the type of the method initially at all\n  const original = source[name] ;\n\n  if (typeof original !== 'function') {\n    return;\n  }\n\n  const wrapped = replacementFactory(original) ;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  try {\n    source[name] = wrapped;\n  } catch {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nfunction addNonEnumerableProperty(obj, name, value) {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch (o_O) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nfunction markFunctionWrapped(wrapped, original) {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch (o_O) {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nfunction convertToPlainObject(value)\n\n {\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isError)(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isEvent)(value)) {\n    const newObj\n\n = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isInstanceOf)(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isElement)(target) ? (0,_browser_js__WEBPACK_IMPORTED_MODULE_3__.htmlTreeAsString)(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj )[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception, maxLength = 40) {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  const firstKey = keys[0];\n\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n\n  if (firstKey.length >= maxLength) {\n    return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(firstKey, maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return (0,_string_js__WEBPACK_IMPORTED_MODULE_4__.truncate)(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n *\n * @deprecated This function is no longer used by the SDK and will be removed in a future major version.\n */\nfunction dropUndefinedKeys(inputValue) {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n  // Early return for primitive values\n  if (inputValue === null || typeof inputValue !== 'object') {\n    return inputValue;\n  }\n\n  // Check memo map first for all object types\n  const memoVal = memoizationMap.get(inputValue);\n  if (memoVal !== undefined) {\n    return memoVal ;\n  }\n\n  // handle arrays\n  if (Array.isArray(inputValue)) {\n    const returnValue = [];\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach(value => {\n      returnValue.push(_dropUndefinedKeys(value, memoizationMap));\n    });\n\n    return returnValue ;\n  }\n\n  if (isPojo(inputValue)) {\n    const returnValue = {};\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    const keys = Object.keys(inputValue);\n\n    keys.forEach(key => {\n      const val = inputValue[key];\n      if (val !== undefined) {\n        returnValue[key] = _dropUndefinedKeys(val, memoizationMap);\n      }\n    });\n\n    return returnValue ;\n  }\n\n  // For other object types, return as is\n  return inputValue;\n}\n\nfunction isPojo(input) {\n  // Plain objects have Object as constructor or no constructor\n  const constructor = (input ).constructor;\n  return constructor === Object || constructor === undefined;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nfunction objectify(wat) {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case (0,_is_js__WEBPACK_IMPORTED_MODULE_2__.isPrimitive)(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat ).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n\n\n//# sourceMappingURL=object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/object.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/path.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/path.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   basename: () => (/* binding */ basename),\n/* harmony export */   dirname: () => (/* binding */ dirname),\n/* harmony export */   isAbsolute: () => (/* binding */ isAbsolute),\n/* harmony export */   join: () => (/* binding */ join),\n/* harmony export */   normalizePath: () => (/* binding */ normalizePath),\n/* harmony export */   relative: () => (/* binding */ relative),\n/* harmony export */   resolve: () => (/* binding */ resolve)\n/* harmony export */ });\n// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename) {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nfunction resolve(...args) {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr) {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nfunction relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nfunction normalizePath(path) {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nfunction join(...args) {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nfunction dirname(path) {\n  const result = splitPath(path);\n  const root = result[0] || '';\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nfunction basename(path, ext) {\n  let f = splitPath(path)[2] || '';\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\n\n\n//# sourceMappingURL=path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/path.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/promisebuffer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/promisebuffer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SENTRY_BUFFER_FULL_ERROR: () => (/* binding */ SENTRY_BUFFER_FULL_ERROR),\n/* harmony export */   makePromiseBuffer: () => (/* binding */ makePromiseBuffer)\n/* harmony export */ });\n/* harmony import */ var _syncpromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./syncpromise.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\");\n\n\nconst SENTRY_BUFFER_FULL_ERROR = Symbol.for('SentryBufferFullError');\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nfunction makePromiseBuffer(limit) {\n  const buffer = [];\n\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer) {\n    if (!isReady()) {\n      return (0,_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.rejectedSyncPromise)(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout) {\n    return new _syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.SyncPromise((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void (0,_syncpromise_js__WEBPACK_IMPORTED_MODULE_0__.resolvedSyncPromise)(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n\n\n//# sourceMappingURL=promisebuffer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9wcm9taXNlYnVmZmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5Rjs7QUFFekY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG9FQUFtQjtBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdEQUFXO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsYUFBYSxvRUFBbUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXVEO0FBQ3ZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L3Byb21pc2VidWZmZXIuanM/ZTk5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTeW5jUHJvbWlzZSwgcmVzb2x2ZWRTeW5jUHJvbWlzZSwgcmVqZWN0ZWRTeW5jUHJvbWlzZSB9IGZyb20gJy4vc3luY3Byb21pc2UuanMnO1xuXG5jb25zdCBTRU5UUllfQlVGRkVSX0ZVTExfRVJST1IgPSBTeW1ib2wuZm9yKCdTZW50cnlCdWZmZXJGdWxsRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG5ldyBQcm9taXNlQnVmZmVyIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgbGltaXRcbiAqIEBwYXJhbSBsaW1pdCBtYXggbnVtYmVyIG9mIHByb21pc2VzIHRoYXQgY2FuIGJlIHN0b3JlZCBpbiB0aGUgYnVmZmVyXG4gKi9cbmZ1bmN0aW9uIG1ha2VQcm9taXNlQnVmZmVyKGxpbWl0KSB7XG4gIGNvbnN0IGJ1ZmZlciA9IFtdO1xuXG4gIGZ1bmN0aW9uIGlzUmVhZHkoKSB7XG4gICAgcmV0dXJuIGxpbWl0ID09PSB1bmRlZmluZWQgfHwgYnVmZmVyLmxlbmd0aCA8IGxpbWl0O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHByb21pc2UgZnJvbSB0aGUgcXVldWUuXG4gICAqXG4gICAqIEBwYXJhbSB0YXNrIENhbiBiZSBhbnkgUHJvbWlzZUxpa2U8VD5cbiAgICogQHJldHVybnMgUmVtb3ZlZCBwcm9taXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVtb3ZlKHRhc2spIHtcbiAgICByZXR1cm4gYnVmZmVyLnNwbGljZShidWZmZXIuaW5kZXhPZih0YXNrKSwgMSlbMF0gfHwgUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcHJvbWlzZSAocmVwcmVzZW50aW5nIGFuIGluLWZsaWdodCBhY3Rpb24pIHRvIHRoZSBxdWV1ZSwgYW5kIHNldCBpdCB0byByZW1vdmUgaXRzZWxmIG9uIGZ1bGZpbGxtZW50LlxuICAgKlxuICAgKiBAcGFyYW0gdGFza1Byb2R1Y2VyIEEgZnVuY3Rpb24gcHJvZHVjaW5nIGFueSBQcm9taXNlTGlrZTxUPjsgSW4gcHJldmlvdXMgdmVyc2lvbnMgdGhpcyB1c2VkIHRvIGJlIGB0YXNrOlxuICAgKiAgICAgICAgUHJvbWlzZUxpa2U8VD5gLCBidXQgdW5kZXIgdGhhdCBtb2RlbCwgUHJvbWlzZXMgd2VyZSBpbnN0YW50bHkgY3JlYXRlZCBvbiB0aGUgY2FsbC1zaXRlIGFuZCB0aGVpciBleGVjdXRvclxuICAgKiAgICAgICAgZnVuY3Rpb25zIHRoZXJlZm9yZSByYW4gaW1tZWRpYXRlbHkuIFRodXMsIGV2ZW4gaWYgdGhlIGJ1ZmZlciB3YXMgZnVsbCwgdGhlIGFjdGlvbiBzdGlsbCBoYXBwZW5lZC4gQnlcbiAgICogICAgICAgIHJlcXVpcmluZyB0aGUgcHJvbWlzZSB0byBiZSB3cmFwcGVkIGluIGEgZnVuY3Rpb24sIHdlIGNhbiBkZWZlciBwcm9taXNlIGNyZWF0aW9uIHVudGlsIGFmdGVyIHRoZSBidWZmZXJcbiAgICogICAgICAgIGxpbWl0IGNoZWNrLlxuICAgKiBAcmV0dXJucyBUaGUgb3JpZ2luYWwgcHJvbWlzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFkZCh0YXNrUHJvZHVjZXIpIHtcbiAgICBpZiAoIWlzUmVhZHkoKSkge1xuICAgICAgcmV0dXJuIHJlamVjdGVkU3luY1Byb21pc2UoU0VOVFJZX0JVRkZFUl9GVUxMX0VSUk9SKTtcbiAgICB9XG5cbiAgICAvLyBzdGFydCB0aGUgdGFzayBhbmQgYWRkIGl0cyBwcm9taXNlIHRvIHRoZSBxdWV1ZVxuICAgIGNvbnN0IHRhc2sgPSB0YXNrUHJvZHVjZXIoKTtcbiAgICBpZiAoYnVmZmVyLmluZGV4T2YodGFzaykgPT09IC0xKSB7XG4gICAgICBidWZmZXIucHVzaCh0YXNrKTtcbiAgICB9XG4gICAgdm9pZCB0YXNrXG4gICAgICAudGhlbigoKSA9PiByZW1vdmUodGFzaykpXG4gICAgICAvLyBVc2UgYHRoZW4obnVsbCwgcmVqZWN0aW9uSGFuZGxlcilgIHJhdGhlciB0aGFuIGBjYXRjaChyZWplY3Rpb25IYW5kbGVyKWAgc28gdGhhdCB3ZSBjYW4gdXNlIGBQcm9taXNlTGlrZWBcbiAgICAgIC8vIHJhdGhlciB0aGFuIGBQcm9taXNlYC4gYFByb21pc2VMaWtlYCBkb2Vzbid0IGhhdmUgYSBgLmNhdGNoYCBtZXRob2QsIG1ha2luZyBpdHMgcG9seWZpbGwgc21hbGxlci4gKEVTNSBkaWRuJ3RcbiAgICAgIC8vIGhhdmUgcHJvbWlzZXMsIHNvIFRTIGhhcyB0byBwb2x5ZmlsbCB3aGVuIGRvd24tY29tcGlsaW5nLilcbiAgICAgIC50aGVuKG51bGwsICgpID0+XG4gICAgICAgIHJlbW92ZSh0YXNrKS50aGVuKG51bGwsICgpID0+IHtcbiAgICAgICAgICAvLyBXZSBoYXZlIHRvIGFkZCBhbm90aGVyIGNhdGNoIGhlcmUgYmVjYXVzZSBgcmVtb3ZlKClgIHN0YXJ0cyBhIG5ldyBwcm9taXNlIGNoYWluLlxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgcmV0dXJuIHRhc2s7XG4gIH1cblxuICAvKipcbiAgICogV2FpdCBmb3IgYWxsIHByb21pc2VzIGluIHRoZSBxdWV1ZSB0byByZXNvbHZlIG9yIGZvciB0aW1lb3V0IHRvIGV4cGlyZSwgd2hpY2hldmVyIGNvbWVzIGZpcnN0LlxuICAgKlxuICAgKiBAcGFyYW0gdGltZW91dCBUaGUgdGltZSwgaW4gbXMsIGFmdGVyIHdoaWNoIHRvIHJlc29sdmUgdG8gYGZhbHNlYCBpZiB0aGUgcXVldWUgaXMgc3RpbGwgbm9uLWVtcHR5LiBQYXNzaW5nIGAwYCAob3JcbiAgICogbm90IHBhc3NpbmcgYW55dGhpbmcpIHdpbGwgbWFrZSB0aGUgcHJvbWlzZSB3YWl0IGFzIGxvbmcgYXMgaXQgdGFrZXMgZm9yIHRoZSBxdWV1ZSB0byBkcmFpbiBiZWZvcmUgcmVzb2x2aW5nIHRvXG4gICAqIGB0cnVlYC5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHdoaWNoIHdpbGwgcmVzb2x2ZSB0byBgdHJ1ZWAgaWYgdGhlIHF1ZXVlIGlzIGFscmVhZHkgZW1wdHkgb3IgZHJhaW5zIGJlZm9yZSB0aGUgdGltZW91dCwgYW5kXG4gICAqIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBmdW5jdGlvbiBkcmFpbih0aW1lb3V0KSB7XG4gICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgY291bnRlciA9IGJ1ZmZlci5sZW5ndGg7XG5cbiAgICAgIGlmICghY291bnRlcikge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgLy8gd2FpdCBmb3IgYHRpbWVvdXRgIG1zIGFuZCB0aGVuIHJlc29sdmUgdG8gYGZhbHNlYCAoaWYgbm90IGNhbmNlbGxlZCBmaXJzdClcbiAgICAgIGNvbnN0IGNhcHR1cmVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodGltZW91dCAmJiB0aW1lb3V0ID4gMCkge1xuICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9LCB0aW1lb3V0KTtcblxuICAgICAgLy8gaWYgYWxsIHByb21pc2VzIHJlc29sdmUgaW4gdGltZSwgY2FuY2VsIHRoZSB0aW1lciBhbmQgcmVzb2x2ZSB0byBgdHJ1ZWBcbiAgICAgIGJ1ZmZlci5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICB2b2lkIHJlc29sdmVkU3luY1Byb21pc2UoaXRlbSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgaWYgKCEtLWNvdW50ZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChjYXB0dXJlZFNldFRpbWVvdXQpO1xuICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgJDogYnVmZmVyLFxuICAgIGFkZCxcbiAgICBkcmFpbixcbiAgfTtcbn1cblxuZXhwb3J0IHsgU0VOVFJZX0JVRkZFUl9GVUxMX0VSUk9SLCBtYWtlUHJvbWlzZUJ1ZmZlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzZWJ1ZmZlci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/promisebuffer.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateSpanId: () => (/* binding */ generateSpanId),\n/* harmony export */   generateTraceId: () => (/* binding */ generateTraceId)\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n\n\n/**\n * Generate a random, valid trace ID.\n */\nfunction generateTraceId() {\n  return (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.uuid4)();\n}\n\n/**\n * Generate a random, valid span ID.\n */\nfunction generateSpanId() {\n  return (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.uuid4)().substring(16);\n}\n\n\n//# sourceMappingURL=propagationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9wcm9wYWdhdGlvbkNvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWtDOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsK0NBQUs7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsK0NBQUs7QUFDZDs7QUFFMkM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvcHJvcGFnYXRpb25Db250ZXh0LmpzPzVmZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXVpZDQgfSBmcm9tICcuL21pc2MuanMnO1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgcmFuZG9tLCB2YWxpZCB0cmFjZSBJRC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVUcmFjZUlkKCkge1xuICByZXR1cm4gdXVpZDQoKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSwgdmFsaWQgc3BhbiBJRC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVTcGFuSWQoKSB7XG4gIHJldHVybiB1dWlkNCgpLnN1YnN0cmluZygxNik7XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlU3BhbklkLCBnZW5lcmF0ZVRyYWNlSWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BhZ2F0aW9uQ29udGV4dC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/ratelimit.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/ratelimit.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RETRY_AFTER: () => (/* binding */ DEFAULT_RETRY_AFTER),\n/* harmony export */   disabledUntil: () => (/* binding */ disabledUntil),\n/* harmony export */   isRateLimited: () => (/* binding */ isRateLimited),\n/* harmony export */   parseRetryAfterHeader: () => (/* binding */ parseRetryAfterHeader),\n/* harmony export */   updateRateLimits: () => (/* binding */ updateRateLimits)\n/* harmony export */ });\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header, now = Date.now()) {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, dataCategory) {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, dataCategory, now = Date.now()) {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(\n  limits,\n  { statusCode, headers },\n  now = Date.now(),\n) {\n  const updatedRateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers?.['x-sentry-rate-limits'];\n  const retryAfterHeader = headers?.['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5) ;\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n\n\n//# sourceMappingURL=ratelimit.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9yYXRlbGltaXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQSx1Q0FBdUM7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLE9BQU87QUFDekM7QUFDQTtBQUNBOztBQUVBLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkscUJBQXFCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLFdBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0EsUUFBUTtBQUNSLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRXNHO0FBQ3RHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L3JhdGVsaW1pdC5qcz83NDgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEludGVudGlvbmFsbHkga2VlcGluZyB0aGUga2V5IGJyb2FkLCBhcyB3ZSBkb24ndCBrbm93IGZvciBzdXJlIHdoYXQgcmF0ZSBsaW1pdCBoZWFkZXJzIGdldCByZXR1cm5lZCBmcm9tIGJhY2tlbmRcblxuY29uc3QgREVGQVVMVF9SRVRSWV9BRlRFUiA9IDYwICogMTAwMDsgLy8gNjAgc2Vjb25kc1xuXG4vKipcbiAqIEV4dHJhY3RzIFJldHJ5LUFmdGVyIHZhbHVlIGZyb20gdGhlIHJlcXVlc3QgaGVhZGVyIG9yIHJldHVybnMgZGVmYXVsdCB2YWx1ZVxuICogQHBhcmFtIGhlYWRlciBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgJ1JldHJ5LUFmdGVyJyBoZWFkZXJcbiAqIEBwYXJhbSBub3cgY3VycmVudCB1bml4IHRpbWVzdGFtcFxuICpcbiAqL1xuZnVuY3Rpb24gcGFyc2VSZXRyeUFmdGVySGVhZGVyKGhlYWRlciwgbm93ID0gRGF0ZS5ub3coKSkge1xuICBjb25zdCBoZWFkZXJEZWxheSA9IHBhcnNlSW50KGAke2hlYWRlcn1gLCAxMCk7XG4gIGlmICghaXNOYU4oaGVhZGVyRGVsYXkpKSB7XG4gICAgcmV0dXJuIGhlYWRlckRlbGF5ICogMTAwMDtcbiAgfVxuXG4gIGNvbnN0IGhlYWRlckRhdGUgPSBEYXRlLnBhcnNlKGAke2hlYWRlcn1gKTtcbiAgaWYgKCFpc05hTihoZWFkZXJEYXRlKSkge1xuICAgIHJldHVybiBoZWFkZXJEYXRlIC0gbm93O1xuICB9XG5cbiAgcmV0dXJuIERFRkFVTFRfUkVUUllfQUZURVI7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZSB0aGF0IHRoZSBnaXZlbiBjYXRlZ29yeSBpcyBkaXNhYmxlZCB1bnRpbCBmb3IgcmF0ZSBsaW1pdGluZy5cbiAqIEluIGNhc2Ugbm8gY2F0ZWdvcnktc3BlY2lmaWMgbGltaXQgaXMgc2V0IGJ1dCBhIGdlbmVyYWwgcmF0ZSBsaW1pdCBhY3Jvc3MgYWxsIGNhdGVnb3JpZXMgaXMgYWN0aXZlLFxuICogdGhhdCB0aW1lIGlzIHJldHVybmVkLlxuICpcbiAqIEByZXR1cm4gdGhlIHRpbWUgaW4gbXMgdGhhdCB0aGUgY2F0ZWdvcnkgaXMgZGlzYWJsZWQgdW50aWwgb3IgMCBpZiB0aGVyZSdzIG5vIGFjdGl2ZSByYXRlIGxpbWl0LlxuICovXG5mdW5jdGlvbiBkaXNhYmxlZFVudGlsKGxpbWl0cywgZGF0YUNhdGVnb3J5KSB7XG4gIHJldHVybiBsaW1pdHNbZGF0YUNhdGVnb3J5XSB8fCBsaW1pdHMuYWxsIHx8IDA7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgY2F0ZWdvcnkgaXMgcmF0ZSBsaW1pdGVkXG4gKi9cbmZ1bmN0aW9uIGlzUmF0ZUxpbWl0ZWQobGltaXRzLCBkYXRhQ2F0ZWdvcnksIG5vdyA9IERhdGUubm93KCkpIHtcbiAgcmV0dXJuIGRpc2FibGVkVW50aWwobGltaXRzLCBkYXRhQ2F0ZWdvcnkpID4gbm93O1xufVxuXG4vKipcbiAqIFVwZGF0ZSByYXRlbGltaXRzIGZyb20gaW5jb21pbmcgaGVhZGVycy5cbiAqXG4gKiBAcmV0dXJuIHRoZSB1cGRhdGVkIFJhdGVMaW1pdHMgb2JqZWN0LlxuICovXG5mdW5jdGlvbiB1cGRhdGVSYXRlTGltaXRzKFxuICBsaW1pdHMsXG4gIHsgc3RhdHVzQ29kZSwgaGVhZGVycyB9LFxuICBub3cgPSBEYXRlLm5vdygpLFxuKSB7XG4gIGNvbnN0IHVwZGF0ZWRSYXRlTGltaXRzID0ge1xuICAgIC4uLmxpbWl0cyxcbiAgfTtcblxuICAvLyBcIlRoZSBuYW1lIGlzIGNhc2UtaW5zZW5zaXRpdmUuXCJcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hlYWRlcnMvZ2V0XG4gIGNvbnN0IHJhdGVMaW1pdEhlYWRlciA9IGhlYWRlcnM/LlsneC1zZW50cnktcmF0ZS1saW1pdHMnXTtcbiAgY29uc3QgcmV0cnlBZnRlckhlYWRlciA9IGhlYWRlcnM/LlsncmV0cnktYWZ0ZXInXTtcblxuICBpZiAocmF0ZUxpbWl0SGVhZGVyKSB7XG4gICAgLyoqXG4gICAgICogcmF0ZSBsaW1pdCBoZWFkZXJzIGFyZSBvZiB0aGUgZm9ybVxuICAgICAqICAgICA8aGVhZGVyPiw8aGVhZGVyPiwuLlxuICAgICAqIHdoZXJlIGVhY2ggPGhlYWRlcj4gaXMgb2YgdGhlIGZvcm1cbiAgICAgKiAgICAgPHJldHJ5X2FmdGVyPjogPGNhdGVnb3JpZXM+OiA8c2NvcGU+OiA8cmVhc29uX2NvZGU+OiA8bmFtZXNwYWNlcz5cbiAgICAgKiB3aGVyZVxuICAgICAqICAgICA8cmV0cnlfYWZ0ZXI+IGlzIGEgZGVsYXkgaW4gc2Vjb25kc1xuICAgICAqICAgICA8Y2F0ZWdvcmllcz4gaXMgdGhlIGV2ZW50IHR5cGUocykgKGVycm9yLCB0cmFuc2FjdGlvbiwgZXRjKSBiZWluZyByYXRlIGxpbWl0ZWQgYW5kIGlzIG9mIHRoZSBmb3JtXG4gICAgICogICAgICAgICA8Y2F0ZWdvcnk+OzxjYXRlZ29yeT47Li4uXG4gICAgICogICAgIDxzY29wZT4gaXMgd2hhdCdzIGJlaW5nIGxpbWl0ZWQgKG9yZywgcHJvamVjdCwgb3Iga2V5KSAtIGlnbm9yZWQgYnkgU0RLXG4gICAgICogICAgIDxyZWFzb25fY29kZT4gaXMgYW4gYXJiaXRyYXJ5IHN0cmluZyBsaWtlIFwib3JnX3F1b3RhXCIgLSBpZ25vcmVkIGJ5IFNES1xuICAgICAqICAgICA8bmFtZXNwYWNlcz4gU2VtaWNvbG9uLXNlcGFyYXRlZCBsaXN0IG9mIG1ldHJpYyBuYW1lc3BhY2UgaWRlbnRpZmllcnMuIERlZmluZXMgd2hpY2ggbmFtZXNwYWNlKHMpIHdpbGwgYmUgYWZmZWN0ZWQuXG4gICAgICogICAgICAgICBPbmx5IHByZXNlbnQgaWYgcmF0ZSBsaW1pdCBhcHBsaWVzIHRvIHRoZSBtZXRyaWNfYnVja2V0IGRhdGEgY2F0ZWdvcnkuXG4gICAgICovXG4gICAgZm9yIChjb25zdCBsaW1pdCBvZiByYXRlTGltaXRIZWFkZXIudHJpbSgpLnNwbGl0KCcsJykpIHtcbiAgICAgIGNvbnN0IFtyZXRyeUFmdGVyLCBjYXRlZ29yaWVzLCAsICwgbmFtZXNwYWNlc10gPSBsaW1pdC5zcGxpdCgnOicsIDUpIDtcbiAgICAgIGNvbnN0IGhlYWRlckRlbGF5ID0gcGFyc2VJbnQocmV0cnlBZnRlciwgMTApO1xuICAgICAgY29uc3QgZGVsYXkgPSAoIWlzTmFOKGhlYWRlckRlbGF5KSA/IGhlYWRlckRlbGF5IDogNjApICogMTAwMDsgLy8gNjBzZWMgZGVmYXVsdFxuICAgICAgaWYgKCFjYXRlZ29yaWVzKSB7XG4gICAgICAgIHVwZGF0ZWRSYXRlTGltaXRzLmFsbCA9IG5vdyArIGRlbGF5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeSBvZiBjYXRlZ29yaWVzLnNwbGl0KCc7JykpIHtcbiAgICAgICAgICBpZiAoY2F0ZWdvcnkgPT09ICdtZXRyaWNfYnVja2V0Jykge1xuICAgICAgICAgICAgLy8gbmFtZXNwYWNlcyB3aWxsIGJlIHByZXNlbnQgd2hlbiBjYXRlZ29yeSA9PT0gJ21ldHJpY19idWNrZXQnXG4gICAgICAgICAgICBpZiAoIW5hbWVzcGFjZXMgfHwgbmFtZXNwYWNlcy5zcGxpdCgnOycpLmluY2x1ZGVzKCdjdXN0b20nKSkge1xuICAgICAgICAgICAgICB1cGRhdGVkUmF0ZUxpbWl0c1tjYXRlZ29yeV0gPSBub3cgKyBkZWxheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlZFJhdGVMaW1pdHNbY2F0ZWdvcnldID0gbm93ICsgZGVsYXk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHJldHJ5QWZ0ZXJIZWFkZXIpIHtcbiAgICB1cGRhdGVkUmF0ZUxpbWl0cy5hbGwgPSBub3cgKyBwYXJzZVJldHJ5QWZ0ZXJIZWFkZXIocmV0cnlBZnRlckhlYWRlciwgbm93KTtcbiAgfSBlbHNlIGlmIChzdGF0dXNDb2RlID09PSA0MjkpIHtcbiAgICB1cGRhdGVkUmF0ZUxpbWl0cy5hbGwgPSBub3cgKyA2MCAqIDEwMDA7XG4gIH1cblxuICByZXR1cm4gdXBkYXRlZFJhdGVMaW1pdHM7XG59XG5cbmV4cG9ydCB7IERFRkFVTFRfUkVUUllfQUZURVIsIGRpc2FibGVkVW50aWwsIGlzUmF0ZUxpbWl0ZWQsIHBhcnNlUmV0cnlBZnRlckhlYWRlciwgdXBkYXRlUmF0ZUxpbWl0cyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmF0ZWxpbWl0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/ratelimit.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/severity.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/severity.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   severityLevelFromString: () => (/* binding */ severityLevelFromString)\n/* harmony export */ });\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nfunction severityLevelFromString(level) {\n  return (\n    level === 'warn' ? 'warning' : ['fatal', 'error', 'warning', 'log', 'info', 'debug'].includes(level) ? level : 'log'\n  ) ;\n}\n\n\n//# sourceMappingURL=severity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9zZXZlcml0eS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFbUM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3Qvc2V2ZXJpdHkuanM/MDQ1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nLWJhc2VkIGxldmVsIGludG8gYSBgU2V2ZXJpdHlMZXZlbGAsIG5vcm1hbGl6aW5nIGl0IGFsb25nIHRoZSB3YXkuXG4gKlxuICogQHBhcmFtIGxldmVsIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBkZXNpcmVkIGBTZXZlcml0eUxldmVsYC5cbiAqIEByZXR1cm5zIFRoZSBgU2V2ZXJpdHlMZXZlbGAgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gc3RyaW5nLCBvciAnbG9nJyBpZiB0aGUgc3RyaW5nIGlzbid0IGEgdmFsaWQgbGV2ZWwuXG4gKi9cbmZ1bmN0aW9uIHNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nKGxldmVsKSB7XG4gIHJldHVybiAoXG4gICAgbGV2ZWwgPT09ICd3YXJuJyA/ICd3YXJuaW5nJyA6IFsnZmF0YWwnLCAnZXJyb3InLCAnd2FybmluZycsICdsb2cnLCAnaW5mbycsICdkZWJ1ZyddLmluY2x1ZGVzKGxldmVsKSA/IGxldmVsIDogJ2xvZydcbiAgKSA7XG59XG5cbmV4cG9ydCB7IHNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXZlcml0eS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/severity.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UNKNOWN_FUNCTION: () => (/* binding */ UNKNOWN_FUNCTION),\n/* harmony export */   createStackParser: () => (/* binding */ createStackParser),\n/* harmony export */   getFramesFromEvent: () => (/* binding */ getFramesFromEvent),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   stackParserFromStackParserOptions: () => (/* binding */ stackParserFromStackParserOptions),\n/* harmony export */   stripSentryFramesAndReverse: () => (/* binding */ stripSentryFramesAndReverse)\n/* harmony export */ });\nconst STACKTRACE_FRAME_LIMIT = 50;\nconst UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nfunction createStackParser(...parsers) {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack, skipFirstLines = 0, framesToPop = 0) => {\n    const frames = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      const line = lines[i] ;\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames.slice(framesToPop));\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nfunction stackParserFromStackParserOptions(stackParser) {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nfunction stripSentryFramesAndReverse(stack) {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the scope itself, making it:\n    //\n    //   Sentry.captureException()\n    //   scope.captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION,\n  }));\n}\n\nfunction getLastStackFrame(arr) {\n  return arr[arr.length - 1] || {};\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nfunction getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */\nfunction getFramesFromEvent(event) {\n  const exception = event.exception;\n\n  if (exception) {\n    const frames = [];\n    try {\n      // @ts-expect-error Object could be undefined\n      exception.values.forEach(value => {\n        // @ts-expect-error Value could be undefined\n        if (value.stacktrace.frames) {\n          // @ts-expect-error Value could be undefined\n          frames.push(...value.stacktrace.frames);\n        }\n      });\n      return frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n\n\n//# sourceMappingURL=stacktrace.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/string.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/string.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isMatchingPattern: () => (/* binding */ isMatchingPattern),\n/* harmony export */   safeJoin: () => (/* binding */ safeJoin),\n/* harmony export */   snipLine: () => (/* binding */ snipLine),\n/* harmony export */   stringMatchesSomePattern: () => (/* binding */ stringMatchesSomePattern),\n/* harmony export */   truncate: () => (/* binding */ truncate)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nfunction truncate(str, max = 0) {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nfunction snipLine(line, colno) {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nfunction safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isVueViewModel)(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nfunction isMatchingPattern(\n  value,\n  pattern,\n  requireExactStringMatch = false,\n) {\n  if (!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(value)) {\n    return false;\n  }\n\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isRegExp)(pattern)) {\n    return pattern.test(value);\n  }\n  if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isString)(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nfunction stringMatchesSomePattern(\n  testString,\n  patterns = [],\n  requireExactStringMatch = false,\n) {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n\n\n//# sourceMappingURL=string.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9zdHJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTZEOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGtCQUFrQjtBQUN4RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixNQUFNLEVBQUUsUUFBUTtBQUNqQztBQUNBO0FBQ0Esa0JBQWtCLEtBQUs7QUFDdkI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0RBQWM7QUFDeEI7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sZ0RBQVE7QUFDZjtBQUNBOztBQUVBLE1BQU0sZ0RBQVE7QUFDZDtBQUNBO0FBQ0EsTUFBTSxnREFBUTtBQUNkO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxRjtBQUNyRiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9zdHJpbmcuanM/ZjliNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1N0cmluZywgaXNSZWdFeHAsIGlzVnVlVmlld01vZGVsIH0gZnJvbSAnLi9pcy5qcyc7XG5cbi8qKlxuICogVHJ1bmNhdGVzIGdpdmVuIHN0cmluZyB0byB0aGUgbWF4aW11bSBjaGFyYWN0ZXJzIGNvdW50XG4gKlxuICogQHBhcmFtIHN0ciBBbiBvYmplY3QgdGhhdCBjb250YWlucyBzZXJpYWxpemFibGUgdmFsdWVzXG4gKiBAcGFyYW0gbWF4IE1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gdHJ1bmNhdGVkIHN0cmluZyAoMCA9IHVubGltaXRlZClcbiAqIEByZXR1cm5zIHN0cmluZyBFbmNvZGVkXG4gKi9cbmZ1bmN0aW9uIHRydW5jYXRlKHN0ciwgbWF4ID0gMCkge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgbWF4ID09PSAwKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICByZXR1cm4gc3RyLmxlbmd0aCA8PSBtYXggPyBzdHIgOiBgJHtzdHIuc2xpY2UoMCwgbWF4KX0uLi5gO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYmFzaWNhbGx5IGp1c3QgYHRyaW1fbGluZWAgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnkvYmxvYi9tYXN0ZXIvc3JjL3NlbnRyeS9sYW5nL2phdmFzY3JpcHQvcHJvY2Vzc29yLnB5I0w2N1xuICpcbiAqIEBwYXJhbSBzdHIgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgc2VyaWFsaXphYmxlIHZhbHVlc1xuICogQHBhcmFtIG1heCBNYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIHRydW5jYXRlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHN0cmluZyBFbmNvZGVkXG4gKi9cbmZ1bmN0aW9uIHNuaXBMaW5lKGxpbmUsIGNvbG5vKSB7XG4gIGxldCBuZXdMaW5lID0gbGluZTtcbiAgY29uc3QgbGluZUxlbmd0aCA9IG5ld0xpbmUubGVuZ3RoO1xuICBpZiAobGluZUxlbmd0aCA8PSAxNTApIHtcbiAgICByZXR1cm4gbmV3TGluZTtcbiAgfVxuICBpZiAoY29sbm8gPiBsaW5lTGVuZ3RoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgY29sbm8gPSBsaW5lTGVuZ3RoO1xuICB9XG5cbiAgbGV0IHN0YXJ0ID0gTWF0aC5tYXgoY29sbm8gLSA2MCwgMCk7XG4gIGlmIChzdGFydCA8IDUpIHtcbiAgICBzdGFydCA9IDA7XG4gIH1cblxuICBsZXQgZW5kID0gTWF0aC5taW4oc3RhcnQgKyAxNDAsIGxpbmVMZW5ndGgpO1xuICBpZiAoZW5kID4gbGluZUxlbmd0aCAtIDUpIHtcbiAgICBlbmQgPSBsaW5lTGVuZ3RoO1xuICB9XG4gIGlmIChlbmQgPT09IGxpbmVMZW5ndGgpIHtcbiAgICBzdGFydCA9IE1hdGgubWF4KGVuZCAtIDE0MCwgMCk7XG4gIH1cblxuICBuZXdMaW5lID0gbmV3TGluZS5zbGljZShzdGFydCwgZW5kKTtcbiAgaWYgKHN0YXJ0ID4gMCkge1xuICAgIG5ld0xpbmUgPSBgJ3tzbmlwfSAke25ld0xpbmV9YDtcbiAgfVxuICBpZiAoZW5kIDwgbGluZUxlbmd0aCkge1xuICAgIG5ld0xpbmUgKz0gJyB7c25pcH0nO1xuICB9XG5cbiAgcmV0dXJuIG5ld0xpbmU7XG59XG5cbi8qKlxuICogSm9pbiB2YWx1ZXMgaW4gYXJyYXlcbiAqIEBwYXJhbSBpbnB1dCBhcnJheSBvZiB2YWx1ZXMgdG8gYmUgam9pbmVkIHRvZ2V0aGVyXG4gKiBAcGFyYW0gZGVsaW1pdGVyIHN0cmluZyB0byBiZSBwbGFjZWQgaW4tYmV0d2VlbiB2YWx1ZXNcbiAqIEByZXR1cm5zIEpvaW5lZCB2YWx1ZXNcbiAqL1xuZnVuY3Rpb24gc2FmZUpvaW4oaW5wdXQsIGRlbGltaXRlcikge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3Qgb3V0cHV0ID0gW107XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmFsdWUgPSBpbnB1dFtpXTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gZml4IGEgVnVlMy1zcGVjaWZpYyBidWcgdGhhdCBjYXVzZXMgYW4gaW5maW5pdGUgbG9vcCBvZlxuICAgICAgLy8gY29uc29sZSB3YXJuaW5ncy4gVGhpcyBoYXBwZW5zIHdoZW4gYSBWdWUgdGVtcGxhdGUgaXMgcmVuZGVyZWQgd2l0aFxuICAgICAgLy8gYW4gdW5kZWNsYXJlZCB2YXJpYWJsZSwgd2hpY2ggd2UgdHJ5IHRvIHN0cmluZ2lmeSwgdWx0aW1hdGVseSBjYXVzaW5nXG4gICAgICAvLyBWdWUgdG8gaXNzdWUgYW5vdGhlciB3YXJuaW5nIHdoaWNoIHJlcGVhdHMgaW5kZWZpbml0ZWx5LlxuICAgICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L3B1bGwvODk4MVxuICAgICAgaWYgKGlzVnVlVmlld01vZGVsKHZhbHVlKSkge1xuICAgICAgICBvdXRwdXQucHVzaCgnW1Z1ZVZpZXdNb2RlbF0nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC5wdXNoKFN0cmluZyh2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIG91dHB1dC5wdXNoKCdbdmFsdWUgY2Fubm90IGJlIHNlcmlhbGl6ZWRdJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dC5qb2luKGRlbGltaXRlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWx1ZSBtYXRjaGVzIGEgcmVnZXggb3Igc3RyaW5nXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgdG8gdGVzdFxuICogQHBhcmFtIHBhdHRlcm4gRWl0aGVyIGEgcmVnZXggb3IgYSBzdHJpbmcgYWdhaW5zdCB3aGljaCBgdmFsdWVgIHdpbGwgYmUgbWF0Y2hlZFxuICogQHBhcmFtIHJlcXVpcmVFeGFjdFN0cmluZ01hdGNoIElmIHRydWUsIGB2YWx1ZWAgbXVzdCBtYXRjaCBgcGF0dGVybmAgZXhhY3RseS4gSWYgZmFsc2UsIGB2YWx1ZWAgd2lsbCBtYXRjaFxuICogYHBhdHRlcm5gIGlmIGl0IGNvbnRhaW5zIGBwYXR0ZXJuYC4gT25seSBhcHBsaWVzIHRvIHN0cmluZy10eXBlIHBhdHRlcm5zLlxuICovXG5mdW5jdGlvbiBpc01hdGNoaW5nUGF0dGVybihcbiAgdmFsdWUsXG4gIHBhdHRlcm4sXG4gIHJlcXVpcmVFeGFjdFN0cmluZ01hdGNoID0gZmFsc2UsXG4pIHtcbiAgaWYgKCFpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KHZhbHVlKTtcbiAgfVxuICBpZiAoaXNTdHJpbmcocGF0dGVybikpIHtcbiAgICByZXR1cm4gcmVxdWlyZUV4YWN0U3RyaW5nTWF0Y2ggPyB2YWx1ZSA9PT0gcGF0dGVybiA6IHZhbHVlLmluY2x1ZGVzKHBhdHRlcm4pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFRlc3QgdGhlIGdpdmVuIHN0cmluZyBhZ2FpbnN0IGFuIGFycmF5IG9mIHN0cmluZ3MgYW5kIHJlZ2V4ZXMuIEJ5IGRlZmF1bHQsIHN0cmluZyBtYXRjaGluZyBpcyBkb25lIG9uIGFcbiAqIHN1YnN0cmluZy1pbmNsdXNpb24gYmFzaXMgcmF0aGVyIHRoYW4gYSBzdHJpY3QgZXF1YWxpdHkgYmFzaXNcbiAqXG4gKiBAcGFyYW0gdGVzdFN0cmluZyBUaGUgc3RyaW5nIHRvIHRlc3RcbiAqIEBwYXJhbSBwYXR0ZXJucyBUaGUgcGF0dGVybnMgYWdhaW5zdCB3aGljaCB0byB0ZXN0IHRoZSBzdHJpbmdcbiAqIEBwYXJhbSByZXF1aXJlRXhhY3RTdHJpbmdNYXRjaCBJZiB0cnVlLCBgdGVzdFN0cmluZ2AgbXVzdCBtYXRjaCBvbmUgb2YgdGhlIGdpdmVuIHN0cmluZyBwYXR0ZXJucyBleGFjdGx5IGluIG9yZGVyIHRvXG4gKiBjb3VudC4gSWYgZmFsc2UsIGB0ZXN0U3RyaW5nYCB3aWxsIG1hdGNoIGEgc3RyaW5nIHBhdHRlcm4gaWYgaXQgY29udGFpbnMgdGhhdCBwYXR0ZXJuLlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gc3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuKFxuICB0ZXN0U3RyaW5nLFxuICBwYXR0ZXJucyA9IFtdLFxuICByZXF1aXJlRXhhY3RTdHJpbmdNYXRjaCA9IGZhbHNlLFxuKSB7XG4gIHJldHVybiBwYXR0ZXJucy5zb21lKHBhdHRlcm4gPT4gaXNNYXRjaGluZ1BhdHRlcm4odGVzdFN0cmluZywgcGF0dGVybiwgcmVxdWlyZUV4YWN0U3RyaW5nTWF0Y2gpKTtcbn1cblxuZXhwb3J0IHsgaXNNYXRjaGluZ1BhdHRlcm4sIHNhZmVKb2luLCBzbmlwTGluZSwgc3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuLCB0cnVuY2F0ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/string.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/supports.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/supports.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNativeFunction: () => (/* binding */ isNativeFunction),\n/* harmony export */   supportsDOMError: () => (/* binding */ supportsDOMError),\n/* harmony export */   supportsDOMException: () => (/* binding */ supportsDOMException),\n/* harmony export */   supportsErrorEvent: () => (/* binding */ supportsErrorEvent),\n/* harmony export */   supportsFetch: () => (/* binding */ supportsFetch),\n/* harmony export */   supportsHistory: () => (/* binding */ supportsHistory),\n/* harmony export */   supportsNativeFetch: () => (/* binding */ supportsNativeFetch),\n/* harmony export */   supportsReferrerPolicy: () => (/* binding */ supportsReferrerPolicy),\n/* harmony export */   supportsReportingObserver: () => (/* binding */ supportsReportingObserver)\n/* harmony export */ });\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/core/build/esm/debug-build.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n\n\nconst WINDOW = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ ;\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsHistory() {\n  return 'history' in WINDOW && !!WINDOW.history;\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nconst supportsFetch = _isFetchSupported;\n\nfunction _isFetchSupported() {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * isNative checks if the given function is a native implementation\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFunction(func) {\n  return func && /^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nfunction supportsNativeFetch() {\n  if (true) {\n    return true;\n  }\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFunction(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement ) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow?.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFunction(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD &&\n        _logger_js__WEBPACK_IMPORTED_MODULE_2__.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReportingObserver() {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n * @deprecated This is no longer used and will be removed in a future major version.\n */\nfunction supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!_isFetchSupported()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' ,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n\n//# sourceMappingURL=supports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/supports.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SyncPromise: () => (/* binding */ SyncPromise),\n/* harmony export */   rejectedSyncPromise: () => (/* binding */ rejectedSyncPromise),\n/* harmony export */   resolvedSyncPromise: () => (/* binding */ resolvedSyncPromise)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** SyncPromise internal states */\nvar States; (function (States) {\n  /** Pending */\n  const PENDING = 0; States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n  /** Resolved / OK */\n  const RESOLVED = 1; States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n  /** Rejected / Error */\n  const REJECTED = 2; States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {}));\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nfunction resolvedSyncPromise(value) {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nfunction rejectedSyncPromise(reason) {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise {\n\n   constructor(executor) {\n    this._state = States.PENDING;\n    this._handlers = [];\n\n    this._runExecutor(executor);\n  }\n\n  /** @inheritdoc */\n   then(\n    onfulfilled,\n    onrejected,\n  ) {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result );\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** @inheritdoc */\n   catch(\n    onrejected,\n  ) {\n    return this.then(val => val, onrejected);\n  }\n\n  /** @inheritdoc */\n   finally(onfinally) {\n    return new SyncPromise((resolve, reject) => {\n      let val;\n      let isRejected;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val );\n      });\n    });\n  }\n\n  /** Excute the resolve/reject handlers. */\n   _executeHandlers() {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        handler[1](this._value );\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  }\n\n  /** Run the executor for the SyncPromise. */\n   _runExecutor(executor) {\n    const setResult = (state, value) => {\n      if (this._state !== States.PENDING) {\n        return;\n      }\n\n      if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isThenable)(value)) {\n        void (value ).then(resolve, reject);\n        return;\n      }\n\n      this._state = state;\n      this._value = value;\n\n      this._executeHandlers();\n    };\n\n    const resolve = (value) => {\n      setResult(States.RESOLVED, value);\n    };\n\n    const reject = (reason) => {\n      setResult(States.REJECTED, reason);\n    };\n\n    try {\n      executor(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n}\n\n\n//# sourceMappingURL=syncpromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC9zeW5jcHJvbWlzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFDOztBQUVyQzs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLHNCQUFzQjtBQUN0QixDQUFDLHdCQUF3Qjs7QUFFekI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxrREFBVTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFaUU7QUFDakUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3Qvc3luY3Byb21pc2UuanM/ZWExNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1RoZW5hYmxlIH0gZnJvbSAnLi9pcy5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuLyoqIFN5bmNQcm9taXNlIGludGVybmFsIHN0YXRlcyAqL1xudmFyIFN0YXRlczsgKGZ1bmN0aW9uIChTdGF0ZXMpIHtcbiAgLyoqIFBlbmRpbmcgKi9cbiAgY29uc3QgUEVORElORyA9IDA7IFN0YXRlc1tTdGF0ZXNbXCJQRU5ESU5HXCJdID0gUEVORElOR10gPSBcIlBFTkRJTkdcIjtcbiAgLyoqIFJlc29sdmVkIC8gT0sgKi9cbiAgY29uc3QgUkVTT0xWRUQgPSAxOyBTdGF0ZXNbU3RhdGVzW1wiUkVTT0xWRURcIl0gPSBSRVNPTFZFRF0gPSBcIlJFU09MVkVEXCI7XG4gIC8qKiBSZWplY3RlZCAvIEVycm9yICovXG4gIGNvbnN0IFJFSkVDVEVEID0gMjsgU3RhdGVzW1N0YXRlc1tcIlJFSkVDVEVEXCJdID0gUkVKRUNURURdID0gXCJSRUpFQ1RFRFwiO1xufSkoU3RhdGVzIHx8IChTdGF0ZXMgPSB7fSkpO1xuXG4vLyBPdmVybG9hZHMgc28gd2UgY2FuIGNhbGwgcmVzb2x2ZWRTeW5jUHJvbWlzZSB3aXRob3V0IGFyZ3VtZW50cyBhbmQgZ2VuZXJpYyBhcmd1bWVudFxuXG4vKipcbiAqIENyZWF0ZXMgYSByZXNvbHZlZCBzeW5jIHByb21pc2UuXG4gKlxuICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byByZXNvbHZlIHRoZSBwcm9taXNlIHdpdGhcbiAqIEByZXR1cm5zIHRoZSByZXNvbHZlZCBzeW5jIHByb21pc2VcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZWRTeW5jUHJvbWlzZSh2YWx1ZSkge1xuICByZXR1cm4gbmV3IFN5bmNQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVqZWN0ZWQgc3luYyBwcm9taXNlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gcmVqZWN0IHRoZSBwcm9taXNlIHdpdGhcbiAqIEByZXR1cm5zIHRoZSByZWplY3RlZCBzeW5jIHByb21pc2VcbiAqL1xuZnVuY3Rpb24gcmVqZWN0ZWRTeW5jUHJvbWlzZShyZWFzb24pIHtcbiAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgcmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZW5hYmxlIGNsYXNzIHRoYXQgYmVoYXZlcyBsaWtlIGEgUHJvbWlzZSBhbmQgZm9sbG93cyBpdCdzIGludGVyZmFjZVxuICogYnV0IGlzIG5vdCBhc3luYyBpbnRlcm5hbGx5XG4gKi9cbmNsYXNzIFN5bmNQcm9taXNlIHtcblxuICAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9zdGF0ZSA9IFN0YXRlcy5QRU5ESU5HO1xuICAgIHRoaXMuX2hhbmRsZXJzID0gW107XG5cbiAgICB0aGlzLl9ydW5FeGVjdXRvcihleGVjdXRvcik7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIHRoZW4oXG4gICAgb25mdWxmaWxsZWQsXG4gICAgb25yZWplY3RlZCxcbiAgKSB7XG4gICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVycy5wdXNoKFtcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgICAgaWYgKCFvbmZ1bGZpbGxlZCkge1xuICAgICAgICAgICAgLy8gVE9ETzogwq9cXF8o44OEKV8vwq9cbiAgICAgICAgICAgIC8vIFRPRE86IEZJWE1FXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICByZXNvbHZlKG9uZnVsZmlsbGVkKHJlc3VsdCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWFzb24gPT4ge1xuICAgICAgICAgIGlmICghb25yZWplY3RlZCkge1xuICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJlc29sdmUob25yZWplY3RlZChyZWFzb24pKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgICAgdGhpcy5fZXhlY3V0ZUhhbmRsZXJzKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGNhdGNoKFxuICAgIG9ucmVqZWN0ZWQsXG4gICkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsID0+IHZhbCwgb25yZWplY3RlZCk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGZpbmFsbHkob25maW5hbGx5KSB7XG4gICAgcmV0dXJuIG5ldyBTeW5jUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgdmFsO1xuICAgICAgbGV0IGlzUmVqZWN0ZWQ7XG5cbiAgICAgIHJldHVybiB0aGlzLnRoZW4oXG4gICAgICAgIHZhbHVlID0+IHtcbiAgICAgICAgICBpc1JlamVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgdmFsID0gdmFsdWU7XG4gICAgICAgICAgaWYgKG9uZmluYWxseSkge1xuICAgICAgICAgICAgb25maW5hbGx5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWFzb24gPT4ge1xuICAgICAgICAgIGlzUmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbCA9IHJlYXNvbjtcbiAgICAgICAgICBpZiAob25maW5hbGx5KSB7XG4gICAgICAgICAgICBvbmZpbmFsbHkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICApLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoaXNSZWplY3RlZCkge1xuICAgICAgICAgIHJlamVjdCh2YWwpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc29sdmUodmFsICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBFeGN1dGUgdGhlIHJlc29sdmUvcmVqZWN0IGhhbmRsZXJzLiAqL1xuICAgX2V4ZWN1dGVIYW5kbGVycygpIHtcbiAgICBpZiAodGhpcy5fc3RhdGUgPT09IFN0YXRlcy5QRU5ESU5HKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2FjaGVkSGFuZGxlcnMgPSB0aGlzLl9oYW5kbGVycy5zbGljZSgpO1xuICAgIHRoaXMuX2hhbmRsZXJzID0gW107XG5cbiAgICBjYWNoZWRIYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuICAgICAgaWYgKGhhbmRsZXJbMF0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fc3RhdGUgPT09IFN0YXRlcy5SRVNPTFZFRCkge1xuICAgICAgICBoYW5kbGVyWzFdKHRoaXMuX3ZhbHVlICk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gU3RhdGVzLlJFSkVDVEVEKSB7XG4gICAgICAgIGhhbmRsZXJbMl0odGhpcy5fdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVyWzBdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBSdW4gdGhlIGV4ZWN1dG9yIGZvciB0aGUgU3luY1Byb21pc2UuICovXG4gICBfcnVuRXhlY3V0b3IoZXhlY3V0b3IpIHtcbiAgICBjb25zdCBzZXRSZXN1bHQgPSAoc3RhdGUsIHZhbHVlKSA9PiB7XG4gICAgICBpZiAodGhpcy5fc3RhdGUgIT09IFN0YXRlcy5QRU5ESU5HKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICAgIHZvaWQgKHZhbHVlICkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N0YXRlID0gc3RhdGU7XG4gICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuXG4gICAgICB0aGlzLl9leGVjdXRlSGFuZGxlcnMoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzb2x2ZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgc2V0UmVzdWx0KFN0YXRlcy5SRVNPTFZFRCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBjb25zdCByZWplY3QgPSAocmVhc29uKSA9PiB7XG4gICAgICBzZXRSZXN1bHQoU3RhdGVzLlJFSkVDVEVELCByZWFzb24pO1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QoZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IFN5bmNQcm9taXNlLCByZWplY3RlZFN5bmNQcm9taXNlLCByZXNvbHZlZFN5bmNQcm9taXNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeW5jcHJvbWlzZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/syncpromise.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/time.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/time.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserPerformanceTimeOrigin: () => (/* binding */ browserPerformanceTimeOrigin),\n/* harmony export */   dateTimestampInSeconds: () => (/* binding */ dateTimestampInSeconds),\n/* harmony export */   timestampInSeconds: () => (/* binding */ timestampInSeconds)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nfunction dateTimestampInSeconds() {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc() {\n  const { performance } = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ ;\n  if (!performance?.now) {\n    return dateTimestampInSeconds;\n  }\n\n  // Some browser and environments don't have a timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  const approxStartingTimeOrigin = Date.now() - performance.now();\n  const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nconst timestampInSeconds = createUnixTimestampInSecondsFunc();\n\n/**\n * Cached result of getBrowserTimeOrigin.\n */\nlet cachedTimeOrigin;\n\n/**\n * Gets the time origin and the mode used to determine it.\n */\nfunction getBrowserTimeOrigin() {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ ;\n  if (!performance?.now) {\n    return [undefined, 'none'];\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing?.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      return [performance.timeOrigin, 'timeOrigin'];\n    } else {\n      return [navigationStart, 'navigationStart'];\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  return [dateNow, 'dateNow'];\n}\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nfunction browserPerformanceTimeOrigin() {\n  if (!cachedTimeOrigin) {\n    cachedTimeOrigin = getBrowserTimeOrigin();\n  }\n\n  return cachedTimeOrigin[0];\n}\n\n\n//# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/time.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACEPARENT_REGEXP: () => (/* binding */ TRACEPARENT_REGEXP),\n/* harmony export */   extractTraceparentData: () => (/* binding */ extractTraceparentData),\n/* harmony export */   generateSentryTraceHeader: () => (/* binding */ generateSentryTraceHeader),\n/* harmony export */   propagationContextFromHeaders: () => (/* binding */ propagationContextFromHeaders)\n/* harmony export */ });\n/* harmony import */ var _utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/parseSampleRate.js */ \"./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js\");\n/* harmony import */ var _baggage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js\");\n/* harmony import */ var _propagationContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./propagationContext.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n\n\n\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nconst TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nfunction extractTraceparentData(traceparent) {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nfunction propagationContextFromHeaders(\n  sentryTrace,\n  baggage,\n) {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = (0,_baggage_js__WEBPACK_IMPORTED_MODULE_0__.baggageHeaderToDynamicSamplingContext)(baggage);\n\n  if (!traceparentData?.traceId) {\n    return {\n      traceId: (0,_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateTraceId)(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  const sampleRand = getSampleRandFromTraceparentAndDsc(traceparentData, dynamicSamplingContext);\n\n  // The sample_rand on the DSC needs to be generated based on traceparent + baggage.\n  if (dynamicSamplingContext) {\n    dynamicSamplingContext.sample_rand = sampleRand.toString();\n  }\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData;\n\n  return {\n    traceId,\n    parentSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    sampleRand,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nfunction generateSentryTraceHeader(\n  traceId = (0,_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateTraceId)(),\n  spanId = (0,_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateSpanId)(),\n  sampled,\n) {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\n/**\n * Given any combination of an incoming trace, generate a sample rand based on its defined semantics.\n *\n * Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n */\nfunction getSampleRandFromTraceparentAndDsc(\n  traceparentData,\n  dsc,\n) {\n  // When there is an incoming sample rand use it.\n  const parsedSampleRand = (0,_utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_2__.parseSampleRate)(dsc?.sample_rand);\n  if (parsedSampleRand !== undefined) {\n    return parsedSampleRand;\n  }\n\n  // Otherwise, if there is an incoming sampling decision + sample rate, generate a sample rand that would lead to the same sampling decision.\n  const parsedSampleRate = (0,_utils_parseSampleRate_js__WEBPACK_IMPORTED_MODULE_2__.parseSampleRate)(dsc?.sample_rate);\n  if (parsedSampleRate && traceparentData?.parentSampled !== undefined) {\n    return traceparentData.parentSampled\n      ? // Returns a sample rand with positive sampling decision [0, sampleRate)\n        Math.random() * parsedSampleRate\n      : // Returns a sample rand with negative sampling decision [sampleRate, 1)\n        parsedSampleRate + Math.random() * (1 - parsedSampleRate);\n  } else {\n    // If nothing applies, return a random sample rand.\n    return Math.random();\n  }\n}\n\n\n//# sourceMappingURL=tracing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC90cmFjaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBOEQ7QUFDTztBQUNLOztBQUUxRTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsaUJBQWlCLEdBQUc7QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxrRkFBcUM7O0FBRXRFO0FBQ0E7QUFDQSxlQUFlLHVFQUFlO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLHVDQUF1Qzs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx1RUFBZTtBQUMzQixXQUFXLHNFQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUSxHQUFHLE9BQU8sRUFBRSxjQUFjO0FBQzlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDBFQUFlO0FBQzFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQiwwRUFBZTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRWdIO0FBQ2hIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L3RyYWNpbmcuanM/ODVlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZVNhbXBsZVJhdGUgfSBmcm9tICcuLi91dGlscy9wYXJzZVNhbXBsZVJhdGUuanMnO1xuaW1wb3J0IHsgYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dCB9IGZyb20gJy4vYmFnZ2FnZS5qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVRyYWNlSWQsIGdlbmVyYXRlU3BhbklkIH0gZnJvbSAnLi9wcm9wYWdhdGlvbkNvbnRleHQuanMnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHNlbnRyeS1pbnRlcm5hbC9zZGsvbm8tcmVnZXhwLWNvbnN0cnVjdG9yIC0tIFJlZ0V4cCBpcyB1c2VkIGZvciByZWFkYWJpbGl0eSBoZXJlXG5jb25zdCBUUkFDRVBBUkVOVF9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXlsgXFxcXHRdKicgKyAvLyB3aGl0ZXNwYWNlXG4gICAgJyhbMC05YS1mXXszMn0pPycgKyAvLyB0cmFjZV9pZFxuICAgICctPyhbMC05YS1mXXsxNn0pPycgKyAvLyBzcGFuX2lkXG4gICAgJy0/KFswMV0pPycgKyAvLyBzYW1wbGVkXG4gICAgJ1sgXFxcXHRdKiQnLCAvLyB3aGl0ZXNwYWNlXG4pO1xuXG4vKipcbiAqIEV4dHJhY3QgdHJhbnNhY3Rpb24gY29udGV4dCBkYXRhIGZyb20gYSBgc2VudHJ5LXRyYWNlYCBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHRyYWNlcGFyZW50IFRyYWNlcGFyZW50IHN0cmluZ1xuICpcbiAqIEByZXR1cm5zIE9iamVjdCBjb250YWluaW5nIGRhdGEgZnJvbSB0aGUgaGVhZGVyLCBvciB1bmRlZmluZWQgaWYgdHJhY2VwYXJlbnQgc3RyaW5nIGlzIG1hbGZvcm1lZFxuICovXG5mdW5jdGlvbiBleHRyYWN0VHJhY2VwYXJlbnREYXRhKHRyYWNlcGFyZW50KSB7XG4gIGlmICghdHJhY2VwYXJlbnQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgbWF0Y2hlcyA9IHRyYWNlcGFyZW50Lm1hdGNoKFRSQUNFUEFSRU5UX1JFR0VYUCk7XG4gIGlmICghbWF0Y2hlcykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBsZXQgcGFyZW50U2FtcGxlZDtcbiAgaWYgKG1hdGNoZXNbM10gPT09ICcxJykge1xuICAgIHBhcmVudFNhbXBsZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKG1hdGNoZXNbM10gPT09ICcwJykge1xuICAgIHBhcmVudFNhbXBsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHJhY2VJZDogbWF0Y2hlc1sxXSxcbiAgICBwYXJlbnRTYW1wbGVkLFxuICAgIHBhcmVudFNwYW5JZDogbWF0Y2hlc1syXSxcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwcm9wYWdhdGlvbiBjb250ZXh0IGZyb20gaW5jb21pbmcgaGVhZGVycyBvclxuICogY3JlYXRlcyBhIG1pbmltYWwgbmV3IG9uZSBpZiB0aGUgaGVhZGVycyBhcmUgdW5kZWZpbmVkLlxuICovXG5mdW5jdGlvbiBwcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycyhcbiAgc2VudHJ5VHJhY2UsXG4gIGJhZ2dhZ2UsXG4pIHtcbiAgY29uc3QgdHJhY2VwYXJlbnREYXRhID0gZXh0cmFjdFRyYWNlcGFyZW50RGF0YShzZW50cnlUcmFjZSk7XG4gIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSBiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0KGJhZ2dhZ2UpO1xuXG4gIGlmICghdHJhY2VwYXJlbnREYXRhPy50cmFjZUlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYWNlSWQ6IGdlbmVyYXRlVHJhY2VJZCgpLFxuICAgICAgc2FtcGxlUmFuZDogTWF0aC5yYW5kb20oKSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3Qgc2FtcGxlUmFuZCA9IGdldFNhbXBsZVJhbmRGcm9tVHJhY2VwYXJlbnRBbmREc2ModHJhY2VwYXJlbnREYXRhLCBkeW5hbWljU2FtcGxpbmdDb250ZXh0KTtcblxuICAvLyBUaGUgc2FtcGxlX3JhbmQgb24gdGhlIERTQyBuZWVkcyB0byBiZSBnZW5lcmF0ZWQgYmFzZWQgb24gdHJhY2VwYXJlbnQgKyBiYWdnYWdlLlxuICBpZiAoZHluYW1pY1NhbXBsaW5nQ29udGV4dCkge1xuICAgIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQuc2FtcGxlX3JhbmQgPSBzYW1wbGVSYW5kLnRvU3RyaW5nKCk7XG4gIH1cblxuICBjb25zdCB7IHRyYWNlSWQsIHBhcmVudFNwYW5JZCwgcGFyZW50U2FtcGxlZCB9ID0gdHJhY2VwYXJlbnREYXRhO1xuXG4gIHJldHVybiB7XG4gICAgdHJhY2VJZCxcbiAgICBwYXJlbnRTcGFuSWQsXG4gICAgc2FtcGxlZDogcGFyZW50U2FtcGxlZCxcbiAgICBkc2M6IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgfHwge30sIC8vIElmIHdlIGhhdmUgdHJhY2VwYXJlbnQgZGF0YSBidXQgbm8gRFNDIGl0IG1lYW5zIHdlIGFyZSBub3QgaGVhZCBvZiB0cmFjZSBhbmQgd2UgbXVzdCBmcmVlemUgaXRcbiAgICBzYW1wbGVSYW5kLFxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZSBzZW50cnktdHJhY2UgaGVhZGVyIGZyb20gc3BhbiBjb250ZXh0IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcihcbiAgdHJhY2VJZCA9IGdlbmVyYXRlVHJhY2VJZCgpLFxuICBzcGFuSWQgPSBnZW5lcmF0ZVNwYW5JZCgpLFxuICBzYW1wbGVkLFxuKSB7XG4gIGxldCBzYW1wbGVkU3RyaW5nID0gJyc7XG4gIGlmIChzYW1wbGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICBzYW1wbGVkU3RyaW5nID0gc2FtcGxlZCA/ICctMScgOiAnLTAnO1xuICB9XG4gIHJldHVybiBgJHt0cmFjZUlkfS0ke3NwYW5JZH0ke3NhbXBsZWRTdHJpbmd9YDtcbn1cblxuLyoqXG4gKiBHaXZlbiBhbnkgY29tYmluYXRpb24gb2YgYW4gaW5jb21pbmcgdHJhY2UsIGdlbmVyYXRlIGEgc2FtcGxlIHJhbmQgYmFzZWQgb24gaXRzIGRlZmluZWQgc2VtYW50aWNzLlxuICpcbiAqIFJlYWQgbW9yZTogaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL3RlbGVtZXRyeS90cmFjZXMvI3Byb3BhZ2F0ZWQtcmFuZG9tLXZhbHVlXG4gKi9cbmZ1bmN0aW9uIGdldFNhbXBsZVJhbmRGcm9tVHJhY2VwYXJlbnRBbmREc2MoXG4gIHRyYWNlcGFyZW50RGF0YSxcbiAgZHNjLFxuKSB7XG4gIC8vIFdoZW4gdGhlcmUgaXMgYW4gaW5jb21pbmcgc2FtcGxlIHJhbmQgdXNlIGl0LlxuICBjb25zdCBwYXJzZWRTYW1wbGVSYW5kID0gcGFyc2VTYW1wbGVSYXRlKGRzYz8uc2FtcGxlX3JhbmQpO1xuICBpZiAocGFyc2VkU2FtcGxlUmFuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBhcnNlZFNhbXBsZVJhbmQ7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIGlmIHRoZXJlIGlzIGFuIGluY29taW5nIHNhbXBsaW5nIGRlY2lzaW9uICsgc2FtcGxlIHJhdGUsIGdlbmVyYXRlIGEgc2FtcGxlIHJhbmQgdGhhdCB3b3VsZCBsZWFkIHRvIHRoZSBzYW1lIHNhbXBsaW5nIGRlY2lzaW9uLlxuICBjb25zdCBwYXJzZWRTYW1wbGVSYXRlID0gcGFyc2VTYW1wbGVSYXRlKGRzYz8uc2FtcGxlX3JhdGUpO1xuICBpZiAocGFyc2VkU2FtcGxlUmF0ZSAmJiB0cmFjZXBhcmVudERhdGE/LnBhcmVudFNhbXBsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0cmFjZXBhcmVudERhdGEucGFyZW50U2FtcGxlZFxuICAgICAgPyAvLyBSZXR1cm5zIGEgc2FtcGxlIHJhbmQgd2l0aCBwb3NpdGl2ZSBzYW1wbGluZyBkZWNpc2lvbiBbMCwgc2FtcGxlUmF0ZSlcbiAgICAgICAgTWF0aC5yYW5kb20oKSAqIHBhcnNlZFNhbXBsZVJhdGVcbiAgICAgIDogLy8gUmV0dXJucyBhIHNhbXBsZSByYW5kIHdpdGggbmVnYXRpdmUgc2FtcGxpbmcgZGVjaXNpb24gW3NhbXBsZVJhdGUsIDEpXG4gICAgICAgIHBhcnNlZFNhbXBsZVJhdGUgKyBNYXRoLnJhbmRvbSgpICogKDEgLSBwYXJzZWRTYW1wbGVSYXRlKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiBub3RoaW5nIGFwcGxpZXMsIHJldHVybiBhIHJhbmRvbSBzYW1wbGUgcmFuZC5cbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbiAgfVxufVxuXG5leHBvcnQgeyBUUkFDRVBBUkVOVF9SRUdFWFAsIGV4dHJhY3RUcmFjZXBhcmVudERhdGEsIGdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIsIHByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/url.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/url.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHttpSpanDetailsFromUrlObject: () => (/* binding */ getHttpSpanDetailsFromUrlObject),\n/* harmony export */   getSanitizedUrlString: () => (/* binding */ getSanitizedUrlString),\n/* harmony export */   getSanitizedUrlStringFromUrlObject: () => (/* binding */ getSanitizedUrlStringFromUrlObject),\n/* harmony export */   isURLObjectRelative: () => (/* binding */ isURLObjectRelative),\n/* harmony export */   parseStringToURLObject: () => (/* binding */ parseStringToURLObject),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   stripUrlQueryAndFragment: () => (/* binding */ stripUrlQueryAndFragment)\n/* harmony export */ });\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n\n\n// Curious about `thismessage:/`? See: https://www.rfc-editor.org/rfc/rfc2557.html\n//  > When the methods above do not yield an absolute URI, a base URL\n//  > of \"thismessage:/\" MUST be employed. This base URL has been\n//  > defined for the sole purpose of resolving relative references\n//  > within a multipart/related structure when no other base URI is\n//  > specified.\n//\n// We need to provide a base URL to `parseStringToURLObject` because the fetch API gives us a\n// relative URL sometimes.\n//\n// This is the only case where we need to provide a base URL to `parseStringToURLObject`\n// because the relative URL is not valid on its own.\nconst DEFAULT_BASE_URL = 'thismessage:/';\n\n/**\n * Checks if the URL object is relative\n *\n * @param url - The URL object to check\n * @returns True if the URL object is relative, false otherwise\n */\nfunction isURLObjectRelative(url) {\n  return 'isRelative' in url;\n}\n\n/**\n * Parses string to a URL object\n *\n * @param url - The URL to parse\n * @returns The parsed URL object or undefined if the URL is invalid\n */\nfunction parseStringToURLObject(url, urlBase) {\n  const isRelative = url.indexOf('://') <= 0 && url.indexOf('//') !== 0;\n  const base = urlBase ?? (isRelative ? DEFAULT_BASE_URL : undefined);\n  try {\n    // Use `canParse` to short-circuit the URL constructor if it's not a valid URL\n    // This is faster than trying to construct the URL and catching the error\n    // Node 20+, Chrome 120+, Firefox 115+, Safari 17+\n    if ('canParse' in URL && !(URL ).canParse(url, base)) {\n      return undefined;\n    }\n\n    const fullUrlObject = new URL(url, base);\n    if (isRelative) {\n      // Because we used a fake base URL, we need to return a relative URL object.\n      // We cannot return anything about the origin, host, etc. because it will refer to the fake base URL.\n      return {\n        isRelative,\n        pathname: fullUrlObject.pathname,\n        search: fullUrlObject.search,\n        hash: fullUrlObject.hash,\n      };\n    }\n    return fullUrlObject;\n  } catch {\n    // empty body\n  }\n\n  return undefined;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlStringFromUrlObject(url) {\n  if (isURLObjectRelative(url)) {\n    return url.pathname;\n  }\n\n  const newUrl = new URL(url);\n  newUrl.search = '';\n  newUrl.hash = '';\n  if (['80', '443'].includes(newUrl.port)) {\n    newUrl.port = '';\n  }\n  if (newUrl.password) {\n    newUrl.password = '%filtered%';\n  }\n  if (newUrl.username) {\n    newUrl.username = '%filtered%';\n  }\n\n  return newUrl.toString();\n}\n\nfunction getHttpSpanNameFromUrlObject(\n  urlObject,\n  kind,\n  request,\n  routeName,\n) {\n  const method = request?.method?.toUpperCase() ?? 'GET';\n  const route = routeName\n    ? routeName\n    : urlObject\n      ? kind === 'client'\n        ? getSanitizedUrlStringFromUrlObject(urlObject)\n        : urlObject.pathname\n      : '/';\n\n  return `${method} ${route}`;\n}\n\n/**\n * Takes a parsed URL object and returns a set of attributes for the span\n * that represents the HTTP request for that url. This is used for both server\n * and client http spans.\n *\n * Follows https://opentelemetry.io/docs/specs/semconv/http/.\n *\n * @param urlObject - see {@link parseStringToURLObject}\n * @param kind - The type of HTTP operation (server or client)\n * @param spanOrigin - The origin of the span\n * @param request - The request object, see {@link PartialRequest}\n * @param routeName - The name of the route, must be low cardinality\n * @returns The span name and attributes for the HTTP operation\n */\nfunction getHttpSpanDetailsFromUrlObject(\n  urlObject,\n  kind,\n  spanOrigin,\n  request,\n  routeName,\n) {\n  const attributes = {\n    [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n  };\n\n  if (routeName) {\n    // This is based on https://opentelemetry.io/docs/specs/semconv/http/http-spans/#name\n    attributes[kind === 'server' ? 'http.route' : 'url.template'] = routeName;\n    attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n  }\n\n  if (request?.method) {\n    attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD] = request.method.toUpperCase();\n  }\n\n  if (urlObject) {\n    if (urlObject.search) {\n      attributes['url.query'] = urlObject.search;\n    }\n    if (urlObject.hash) {\n      attributes['url.fragment'] = urlObject.hash;\n    }\n    if (urlObject.pathname) {\n      attributes['url.path'] = urlObject.pathname;\n      if (urlObject.pathname === '/') {\n        attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n      }\n    }\n\n    if (!isURLObjectRelative(urlObject)) {\n      attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_URL_FULL] = urlObject.href;\n      if (urlObject.port) {\n        attributes['url.port'] = urlObject.port;\n      }\n      if (urlObject.protocol) {\n        attributes['url.scheme'] = urlObject.protocol;\n      }\n      if (urlObject.hostname) {\n        attributes[kind === 'server' ? 'server.address' : 'url.domain'] = urlObject.hostname;\n      }\n    }\n  }\n\n  return [getHttpSpanNameFromUrlObject(urlObject, kind, request, routeName), attributes];\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nfunction stripUrlQueryAndFragment(urlPath) {\n  return (urlPath.split(/[?#]/, 1) )[0];\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlString(url) {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    host\n      // Always filter out authority\n      ?.replace(/^.*@/, '[filtered]:[filtered]@')\n      // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n      // TODO: Use new URL global if it exists\n      .replace(/(:80)$/, '')\n      .replace(/(:443)$/, '') || '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n\n\n//# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/url.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/vendor/escapeStringForRegex.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/vendor/escapeStringForRegex.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   escapeStringForRegex: () => (/* binding */ escapeStringForRegex)\n/* harmony export */ });\n// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 14+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nfunction escapeStringForRegex(regexString) {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n\n\n//# sourceMappingURL=escapeStringForRegex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC92ZW5kb3IvZXNjYXBlU3RyaW5nRm9yUmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQzs7QUFFZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvdmVuZG9yL2VzY2FwZVN0cmluZ0ZvclJlZ2V4LmpzPzRlODAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9lc2NhcGUtc3RyaW5nLXJlZ2V4cCBidXQgd2l0aCBtb2RpZmljYXRpb25zIHRvOlxuLy8gICBhKSByZWR1Y2UgdGhlIHNpemUgYnkgc2tpcHBpbmcgdGhlIHJ1bnRpbWUgdHlwZSAtIGNoZWNraW5nXG4vLyAgIGIpIGVuc3VyZSBpdCBnZXRzIGRvd24gLSBjb21waWxlZCBmb3Igb2xkIHZlcnNpb25zIG9mIE5vZGUodGhlIHB1Ymxpc2hlZCBwYWNrYWdlIG9ubHkgc3VwcG9ydHMgTm9kZSAxNCspLlxuLy9cbi8vIE1JVCBMaWNlbnNlXG4vL1xuLy8gQ29weXJpZ2h0IChjKSBTaW5kcmUgU29yaHVzIDxzaW5kcmVzb3JodXNAZ21haWwuY29tPiAoaHR0cHM6Ly9zaW5kcmVzb3JodXMuY29tKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZFxuLy8gZG9jdW1lbnRhdGlvbiBmaWxlcyh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvblxuLy8gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZCAvIG9yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kXG4vLyB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2Zcbi8vIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE9cbi8vIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5JTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbi8vIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1Ncbi8vIElOIFRIRSBTT0ZUV0FSRS5cblxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZywgZXNjYXBlIGNoYXJhY3RlcnMgd2hpY2ggaGF2ZSBtZWFuaW5nIGluIHRoZSByZWdleCBncmFtbWFyLCBzdWNoIHRoYXQgdGhlIHJlc3VsdCBpcyBzYWZlIHRvIGZlZWQgdG9cbiAqIGBuZXcgUmVnRXhwKClgLlxuICpcbiAqIEBwYXJhbSByZWdleFN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZVxuICogQHJldHVybnMgQW4gdmVyc2lvbiBvZiB0aGUgc3RyaW5nIHdpdGggYWxsIHNwZWNpYWwgcmVnZXggY2hhcmFjdGVycyBlc2NhcGVkXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZ0ZvclJlZ2V4KHJlZ2V4U3RyaW5nKSB7XG4gIC8vIGVzY2FwZSB0aGUgaHlwaGVuIHNlcGFyYXRlbHkgc28gd2UgY2FuIGFsc28gcmVwbGFjZSBpdCB3aXRoIGEgdW5pY29kZSBsaXRlcmFsIGh5cGhlbiwgdG8gYXZvaWQgdGhlIHByb2JsZW1zXG4gIC8vIGRpc2N1c3NlZCBpbiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2VzY2FwZS1zdHJpbmctcmVnZXhwL2lzc3Vlcy8yMC5cbiAgcmV0dXJuIHJlZ2V4U3RyaW5nLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nLCAnXFxcXCQmJykucmVwbGFjZSgvLS9nLCAnXFxcXHgyZCcpO1xufVxuXG5leHBvcnQgeyBlc2NhcGVTdHJpbmdGb3JSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXNjYXBlU3RyaW5nRm9yUmVnZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/vendor/escapeStringForRegex.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   vercelWaitUntil: () => (/* binding */ vercelWaitUntil)\n/* harmony export */ });\n/* harmony import */ var _worldwide_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worldwide.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n\n\n/**\n * Function that delays closing of a Vercel lambda until the provided promise is resolved.\n *\n * Vendored from https://www.npmjs.com/package/@vercel/functions\n */\nfunction vercelWaitUntil(task) {\n  const vercelRequestContextGlobal =\n    // @ts-expect-error This is not typed\n    _worldwide_js__WEBPACK_IMPORTED_MODULE_0__.GLOBAL_OBJ[Symbol.for('@vercel/request-context')];\n\n  const ctx =\n    vercelRequestContextGlobal?.get && vercelRequestContextGlobal.get() ? vercelRequestContextGlobal.get() : {};\n\n  if (ctx?.waitUntil) {\n    ctx.waitUntil(task);\n  }\n}\n\n\n//# sourceMappingURL=vercelWaitUntil.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC92ZXJjZWxXYWl0VW50aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHFEQUFVOztBQUVkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L3ZlcmNlbFdhaXRVbnRpbC5qcz83OWM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdMT0JBTF9PQkogfSBmcm9tICcuL3dvcmxkd2lkZS5qcyc7XG5cbi8qKlxuICogRnVuY3Rpb24gdGhhdCBkZWxheXMgY2xvc2luZyBvZiBhIFZlcmNlbCBsYW1iZGEgdW50aWwgdGhlIHByb3ZpZGVkIHByb21pc2UgaXMgcmVzb2x2ZWQuXG4gKlxuICogVmVuZG9yZWQgZnJvbSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AdmVyY2VsL2Z1bmN0aW9uc1xuICovXG5mdW5jdGlvbiB2ZXJjZWxXYWl0VW50aWwodGFzaykge1xuICBjb25zdCB2ZXJjZWxSZXF1ZXN0Q29udGV4dEdsb2JhbCA9XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUaGlzIGlzIG5vdCB0eXBlZFxuICAgIEdMT0JBTF9PQkpbU3ltYm9sLmZvcignQHZlcmNlbC9yZXF1ZXN0LWNvbnRleHQnKV07XG5cbiAgY29uc3QgY3R4ID1cbiAgICB2ZXJjZWxSZXF1ZXN0Q29udGV4dEdsb2JhbD8uZ2V0ICYmIHZlcmNlbFJlcXVlc3RDb250ZXh0R2xvYmFsLmdldCgpID8gdmVyY2VsUmVxdWVzdENvbnRleHRHbG9iYWwuZ2V0KCkgOiB7fTtcblxuICBpZiAoY3R4Py53YWl0VW50aWwpIHtcbiAgICBjdHgud2FpdFVudGlsKHRhc2spO1xuICB9XG59XG5cbmV4cG9ydCB7IHZlcmNlbFdhaXRVbnRpbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyY2VsV2FpdFVudGlsLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/version.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/version.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\n// This is a magic string replaced by rollup\n\nconst SDK_VERSION = \"9.24.0\" ;\n\n\n//# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTs7QUFFdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMtaG9pc3QvdmVyc2lvbi5qcz8xOWU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaXMgYSBtYWdpYyBzdHJpbmcgcmVwbGFjZWQgYnkgcm9sbHVwXG5cbmNvbnN0IFNES19WRVJTSU9OID0gXCI5LjI0LjBcIiA7XG5cbmV4cG9ydCB7IFNES19WRVJTSU9OIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/version.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GLOBAL_OBJ: () => (/* binding */ GLOBAL_OBJ)\n/* harmony export */ });\n/** Internal global with common properties and Sentry extensions  */\n\n/** Get's the global object for the current JavaScript runtime */\nconst GLOBAL_OBJ = globalThis ;\n\n\n//# sourceMappingURL=worldwide.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy1ob2lzdC93b3JsZHdpZGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBO0FBQ0E7O0FBRXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvZXNtL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcz85MDc2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBJbnRlcm5hbCBnbG9iYWwgd2l0aCBjb21tb24gcHJvcGVydGllcyBhbmQgU2VudHJ5IGV4dGVuc2lvbnMgICovXG5cbi8qKiBHZXQncyB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgdGhlIGN1cnJlbnQgSmF2YVNjcmlwdCBydW50aW1lICovXG5jb25zdCBHTE9CQUxfT0JKID0gZ2xvYmFsVGhpcyA7XG5cbmV4cG9ydCB7IEdMT0JBTF9PQkogfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmxkd2lkZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyScopeDataToEvent: () => (/* binding */ applyScopeDataToEvent),\n/* harmony export */   mergeAndOverwriteScopeData: () => (/* binding */ mergeAndOverwriteScopeData),\n/* harmony export */   mergeScopeData: () => (/* binding */ mergeScopeData)\n/* harmony export */ });\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _merge_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./merge.js */ \"./node_modules/@sentry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _spanUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n\n\n\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nfunction applyScopeDataToEvent(event, data) {\n  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n\n/** Merge data of two scopes together. */\nfunction mergeScopeData(data, mergeData) {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    transactionName,\n    span,\n  } = mergeData;\n\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n\n  data.sdkProcessingMetadata = (0,_merge_js__WEBPACK_IMPORTED_MODULE_0__.merge)(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);\n\n  if (level) {\n    data.level = level;\n  }\n\n  if (transactionName) {\n    data.transactionName = transactionName;\n  }\n\n  if (span) {\n    data.span = span;\n  }\n\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n\n  data.propagationContext = { ...data.propagationContext, ...propagationContext };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nfunction mergeAndOverwriteScopeData\n\n(data, prop, mergeVal) {\n  data[prop] = (0,_merge_js__WEBPACK_IMPORTED_MODULE_0__.merge)(data[prop], mergeVal, 1);\n}\n\nfunction applyDataToEvent(event, data) {\n  const { extra, tags, user, contexts, level, transactionName } = data;\n\n  if (Object.keys(extra).length) {\n    event.extra = { ...extra, ...event.extra };\n  }\n\n  if (Object.keys(tags).length) {\n    event.tags = { ...tags, ...event.tags };\n  }\n\n  if (Object.keys(user).length) {\n    event.user = { ...user, ...event.user };\n  }\n\n  if (Object.keys(contexts).length) {\n    event.contexts = { ...contexts, ...event.contexts };\n  }\n\n  if (level) {\n    event.level = level;\n  }\n\n  // transaction events get their `transaction` from the root span name\n  if (transactionName && event.type !== 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\nfunction applyBreadcrumbsToEvent(event, breadcrumbs) {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\n\nfunction applySdkMetadataToEvent(event, sdkProcessingMetadata) {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata,\n  };\n}\n\nfunction applySpanToEvent(event, span) {\n  event.contexts = {\n    trace: (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.spanToTraceContext)(span),\n    ...event.contexts,\n  };\n\n  event.sdkProcessingMetadata = {\n    dynamicSamplingContext: (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_2__.getDynamicSamplingContextFromSpan)(span),\n    ...event.sdkProcessingMetadata,\n  };\n\n  const rootSpan = (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.getRootSpan)(span);\n  const transactionName = (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_1__.spanToJSON)(rootSpan).description;\n  if (transactionName && !event.transaction && event.type === 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event, fingerprint) {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint\n    ? Array.isArray(event.fingerprint)\n      ? event.fingerprint\n      : [event.fingerprint]\n    : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (!event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\n\n\n//# sourceMappingURL=applyScopeDataToEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9hcHBseVNjb3BlRGF0YVRvRXZlbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXlGO0FBQ3REO0FBQzBDOztBQUU3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsd0RBQXdEOztBQUVsRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCLGdEQUFLOztBQUVwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLGdEQUFLO0FBQ3BCOztBQUVBO0FBQ0EsVUFBVSxzREFBc0Q7O0FBRWhFO0FBQ0Esb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0EsbUJBQW1CO0FBQ25COztBQUVBO0FBQ0EsbUJBQW1CO0FBQ25COztBQUVBO0FBQ0EsdUJBQXVCO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxpRUFBa0I7QUFDN0I7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QixxR0FBaUM7QUFDN0Q7QUFDQTs7QUFFQSxtQkFBbUIsMERBQVc7QUFDOUIsMEJBQTBCLHlEQUFVO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkU7QUFDN0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvYXBwbHlTY29wZURhdGFUb0V2ZW50LmpzPzVjMTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuIH0gZnJvbSAnLi4vdHJhY2luZy9keW5hbWljU2FtcGxpbmdDb250ZXh0LmpzJztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAnLi9tZXJnZS5qcyc7XG5pbXBvcnQgeyBzcGFuVG9UcmFjZUNvbnRleHQsIGdldFJvb3RTcGFuLCBzcGFuVG9KU09OIH0gZnJvbSAnLi9zcGFuVXRpbHMuanMnO1xuXG4vKipcbiAqIEFwcGxpZXMgZGF0YSBmcm9tIHRoZSBzY29wZSB0byB0aGUgZXZlbnQgYW5kIHJ1bnMgYWxsIGV2ZW50IHByb2Nlc3NvcnMgb24gaXQuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U2NvcGVEYXRhVG9FdmVudChldmVudCwgZGF0YSkge1xuICBjb25zdCB7IGZpbmdlcnByaW50LCBzcGFuLCBicmVhZGNydW1icywgc2RrUHJvY2Vzc2luZ01ldGFkYXRhIH0gPSBkYXRhO1xuXG4gIC8vIEFwcGx5IGdlbmVyYWwgZGF0YVxuICBhcHBseURhdGFUb0V2ZW50KGV2ZW50LCBkYXRhKTtcblxuICAvLyBXZSB3YW50IHRvIHNldCB0aGUgdHJhY2UgY29udGV4dCBmb3Igbm9ybWFsIGV2ZW50cyBvbmx5IGlmIHRoZXJlIGlzbid0IGFscmVhZHlcbiAgLy8gYSB0cmFjZSBjb250ZXh0IG9uIHRoZSBldmVudC4gVGhlcmUgaXMgYSBwcm9kdWN0IGZlYXR1cmUgaW4gcGxhY2Ugd2hlcmUgd2UgbGlua1xuICAvLyBlcnJvcnMgd2l0aCB0cmFuc2FjdGlvbiBhbmQgaXQgcmVsaWVzIG9uIHRoYXQuXG4gIGlmIChzcGFuKSB7XG4gICAgYXBwbHlTcGFuVG9FdmVudChldmVudCwgc3Bhbik7XG4gIH1cblxuICBhcHBseUZpbmdlcnByaW50VG9FdmVudChldmVudCwgZmluZ2VycHJpbnQpO1xuICBhcHBseUJyZWFkY3J1bWJzVG9FdmVudChldmVudCwgYnJlYWRjcnVtYnMpO1xuICBhcHBseVNka01ldGFkYXRhVG9FdmVudChldmVudCwgc2RrUHJvY2Vzc2luZ01ldGFkYXRhKTtcbn1cblxuLyoqIE1lcmdlIGRhdGEgb2YgdHdvIHNjb3BlcyB0b2dldGhlci4gKi9cbmZ1bmN0aW9uIG1lcmdlU2NvcGVEYXRhKGRhdGEsIG1lcmdlRGF0YSkge1xuICBjb25zdCB7XG4gICAgZXh0cmEsXG4gICAgdGFncyxcbiAgICB1c2VyLFxuICAgIGNvbnRleHRzLFxuICAgIGxldmVsLFxuICAgIHNka1Byb2Nlc3NpbmdNZXRhZGF0YSxcbiAgICBicmVhZGNydW1icyxcbiAgICBmaW5nZXJwcmludCxcbiAgICBldmVudFByb2Nlc3NvcnMsXG4gICAgYXR0YWNobWVudHMsXG4gICAgcHJvcGFnYXRpb25Db250ZXh0LFxuICAgIHRyYW5zYWN0aW9uTmFtZSxcbiAgICBzcGFuLFxuICB9ID0gbWVyZ2VEYXRhO1xuXG4gIG1lcmdlQW5kT3ZlcndyaXRlU2NvcGVEYXRhKGRhdGEsICdleHRyYScsIGV4dHJhKTtcbiAgbWVyZ2VBbmRPdmVyd3JpdGVTY29wZURhdGEoZGF0YSwgJ3RhZ3MnLCB0YWdzKTtcbiAgbWVyZ2VBbmRPdmVyd3JpdGVTY29wZURhdGEoZGF0YSwgJ3VzZXInLCB1c2VyKTtcbiAgbWVyZ2VBbmRPdmVyd3JpdGVTY29wZURhdGEoZGF0YSwgJ2NvbnRleHRzJywgY29udGV4dHMpO1xuXG4gIGRhdGEuc2RrUHJvY2Vzc2luZ01ldGFkYXRhID0gbWVyZ2UoZGF0YS5zZGtQcm9jZXNzaW5nTWV0YWRhdGEsIHNka1Byb2Nlc3NpbmdNZXRhZGF0YSwgMik7XG5cbiAgaWYgKGxldmVsKSB7XG4gICAgZGF0YS5sZXZlbCA9IGxldmVsO1xuICB9XG5cbiAgaWYgKHRyYW5zYWN0aW9uTmFtZSkge1xuICAgIGRhdGEudHJhbnNhY3Rpb25OYW1lID0gdHJhbnNhY3Rpb25OYW1lO1xuICB9XG5cbiAgaWYgKHNwYW4pIHtcbiAgICBkYXRhLnNwYW4gPSBzcGFuO1xuICB9XG5cbiAgaWYgKGJyZWFkY3J1bWJzLmxlbmd0aCkge1xuICAgIGRhdGEuYnJlYWRjcnVtYnMgPSBbLi4uZGF0YS5icmVhZGNydW1icywgLi4uYnJlYWRjcnVtYnNdO1xuICB9XG5cbiAgaWYgKGZpbmdlcnByaW50Lmxlbmd0aCkge1xuICAgIGRhdGEuZmluZ2VycHJpbnQgPSBbLi4uZGF0YS5maW5nZXJwcmludCwgLi4uZmluZ2VycHJpbnRdO1xuICB9XG5cbiAgaWYgKGV2ZW50UHJvY2Vzc29ycy5sZW5ndGgpIHtcbiAgICBkYXRhLmV2ZW50UHJvY2Vzc29ycyA9IFsuLi5kYXRhLmV2ZW50UHJvY2Vzc29ycywgLi4uZXZlbnRQcm9jZXNzb3JzXTtcbiAgfVxuXG4gIGlmIChhdHRhY2htZW50cy5sZW5ndGgpIHtcbiAgICBkYXRhLmF0dGFjaG1lbnRzID0gWy4uLmRhdGEuYXR0YWNobWVudHMsIC4uLmF0dGFjaG1lbnRzXTtcbiAgfVxuXG4gIGRhdGEucHJvcGFnYXRpb25Db250ZXh0ID0geyAuLi5kYXRhLnByb3BhZ2F0aW9uQ29udGV4dCwgLi4ucHJvcGFnYXRpb25Db250ZXh0IH07XG59XG5cbi8qKlxuICogTWVyZ2VzIGNlcnRhaW4gc2NvcGUgZGF0YS4gVW5kZWZpbmVkIHZhbHVlcyB3aWxsIG92ZXJ3cml0ZSBhbnkgZXhpc3RpbmcgdmFsdWVzLlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQW5kT3ZlcndyaXRlU2NvcGVEYXRhXG5cbihkYXRhLCBwcm9wLCBtZXJnZVZhbCkge1xuICBkYXRhW3Byb3BdID0gbWVyZ2UoZGF0YVtwcm9wXSwgbWVyZ2VWYWwsIDEpO1xufVxuXG5mdW5jdGlvbiBhcHBseURhdGFUb0V2ZW50KGV2ZW50LCBkYXRhKSB7XG4gIGNvbnN0IHsgZXh0cmEsIHRhZ3MsIHVzZXIsIGNvbnRleHRzLCBsZXZlbCwgdHJhbnNhY3Rpb25OYW1lIH0gPSBkYXRhO1xuXG4gIGlmIChPYmplY3Qua2V5cyhleHRyYSkubGVuZ3RoKSB7XG4gICAgZXZlbnQuZXh0cmEgPSB7IC4uLmV4dHJhLCAuLi5ldmVudC5leHRyYSB9O1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKHRhZ3MpLmxlbmd0aCkge1xuICAgIGV2ZW50LnRhZ3MgPSB7IC4uLnRhZ3MsIC4uLmV2ZW50LnRhZ3MgfTtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyh1c2VyKS5sZW5ndGgpIHtcbiAgICBldmVudC51c2VyID0geyAuLi51c2VyLCAuLi5ldmVudC51c2VyIH07XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMoY29udGV4dHMpLmxlbmd0aCkge1xuICAgIGV2ZW50LmNvbnRleHRzID0geyAuLi5jb250ZXh0cywgLi4uZXZlbnQuY29udGV4dHMgfTtcbiAgfVxuXG4gIGlmIChsZXZlbCkge1xuICAgIGV2ZW50LmxldmVsID0gbGV2ZWw7XG4gIH1cblxuICAvLyB0cmFuc2FjdGlvbiBldmVudHMgZ2V0IHRoZWlyIGB0cmFuc2FjdGlvbmAgZnJvbSB0aGUgcm9vdCBzcGFuIG5hbWVcbiAgaWYgKHRyYW5zYWN0aW9uTmFtZSAmJiBldmVudC50eXBlICE9PSAndHJhbnNhY3Rpb24nKSB7XG4gICAgZXZlbnQudHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbk5hbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlCcmVhZGNydW1ic1RvRXZlbnQoZXZlbnQsIGJyZWFkY3J1bWJzKSB7XG4gIGNvbnN0IG1lcmdlZEJyZWFkY3J1bWJzID0gWy4uLihldmVudC5icmVhZGNydW1icyB8fCBbXSksIC4uLmJyZWFkY3J1bWJzXTtcbiAgZXZlbnQuYnJlYWRjcnVtYnMgPSBtZXJnZWRCcmVhZGNydW1icy5sZW5ndGggPyBtZXJnZWRCcmVhZGNydW1icyA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gYXBwbHlTZGtNZXRhZGF0YVRvRXZlbnQoZXZlbnQsIHNka1Byb2Nlc3NpbmdNZXRhZGF0YSkge1xuICBldmVudC5zZGtQcm9jZXNzaW5nTWV0YWRhdGEgPSB7XG4gICAgLi4uZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhLFxuICAgIC4uLnNka1Byb2Nlc3NpbmdNZXRhZGF0YSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXBwbHlTcGFuVG9FdmVudChldmVudCwgc3Bhbikge1xuICBldmVudC5jb250ZXh0cyA9IHtcbiAgICB0cmFjZTogc3BhblRvVHJhY2VDb250ZXh0KHNwYW4pLFxuICAgIC4uLmV2ZW50LmNvbnRleHRzLFxuICB9O1xuXG4gIGV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YSA9IHtcbiAgICBkeW5hbWljU2FtcGxpbmdDb250ZXh0OiBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4oc3BhbiksXG4gICAgLi4uZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhLFxuICB9O1xuXG4gIGNvbnN0IHJvb3RTcGFuID0gZ2V0Um9vdFNwYW4oc3Bhbik7XG4gIGNvbnN0IHRyYW5zYWN0aW9uTmFtZSA9IHNwYW5Ub0pTT04ocm9vdFNwYW4pLmRlc2NyaXB0aW9uO1xuICBpZiAodHJhbnNhY3Rpb25OYW1lICYmICFldmVudC50cmFuc2FjdGlvbiAmJiBldmVudC50eXBlID09PSAndHJhbnNhY3Rpb24nKSB7XG4gICAgZXZlbnQudHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbk5hbWU7XG4gIH1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIGZpbmdlcnByaW50IGZyb20gdGhlIHNjb3BlIHRvIHRoZSBldmVudCBpZiB0aGVyZSdzIG9uZSxcbiAqIHVzZXMgbWVzc2FnZSBpZiB0aGVyZSdzIG9uZSBpbnN0ZWFkIG9yIGdldCByaWQgb2YgZW1wdHkgZmluZ2VycHJpbnRcbiAqL1xuZnVuY3Rpb24gYXBwbHlGaW5nZXJwcmludFRvRXZlbnQoZXZlbnQsIGZpbmdlcnByaW50KSB7XG4gIC8vIE1ha2Ugc3VyZSBpdCdzIGFuIGFycmF5IGZpcnN0IGFuZCB3ZSBhY3R1YWxseSBoYXZlIHNvbWV0aGluZyBpbiBwbGFjZVxuICBldmVudC5maW5nZXJwcmludCA9IGV2ZW50LmZpbmdlcnByaW50XG4gICAgPyBBcnJheS5pc0FycmF5KGV2ZW50LmZpbmdlcnByaW50KVxuICAgICAgPyBldmVudC5maW5nZXJwcmludFxuICAgICAgOiBbZXZlbnQuZmluZ2VycHJpbnRdXG4gICAgOiBbXTtcblxuICAvLyBJZiB3ZSBoYXZlIHNvbWV0aGluZyBvbiB0aGUgc2NvcGUsIHRoZW4gbWVyZ2UgaXQgd2l0aCBldmVudFxuICBpZiAoZmluZ2VycHJpbnQpIHtcbiAgICBldmVudC5maW5nZXJwcmludCA9IGV2ZW50LmZpbmdlcnByaW50LmNvbmNhdChmaW5nZXJwcmludCk7XG4gIH1cblxuICAvLyBJZiB3ZSBoYXZlIG5vIGRhdGEgYXQgYWxsLCByZW1vdmUgZW1wdHkgYXJyYXkgZGVmYXVsdFxuICBpZiAoIWV2ZW50LmZpbmdlcnByaW50Lmxlbmd0aCkge1xuICAgIGRlbGV0ZSBldmVudC5maW5nZXJwcmludDtcbiAgfVxufVxuXG5leHBvcnQgeyBhcHBseVNjb3BlRGF0YVRvRXZlbnQsIG1lcmdlQW5kT3ZlcndyaXRlU2NvcGVEYXRhLCBtZXJnZVNjb3BlRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbHlTY29wZURhdGFUb0V2ZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/cookie.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/cookie.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseCookie: () => (/* binding */ parseCookie)\n/* harmony export */ });\n/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Parses a cookie string\n */\nfunction parseCookie(str) {\n  const obj = {};\n  let index = 0;\n\n  while (index < str.length) {\n    const eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n\n    let endIdx = str.indexOf(';', index);\n\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n\n    const key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n\n      try {\n        obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;\n      } catch (e) {\n        obj[key] = val;\n      }\n    }\n\n    index = endIdx + 1;\n  }\n\n  return obj;\n}\n\n\n//# sourceMappingURL=cookie.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9jb29raWUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCOztBQUUvQjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvY29va2llLmpzPzNhNjciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgY29waWVkIGZyb20gdGhlICdjb29raWVgIG1vZHVsZSBhdCB2MC41LjAgYW5kIHdhcyBzaW1wbGlmaWVkIGZvciBvdXIgdXNlIGNhc2UuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanNodHRwL2Nvb2tpZS9ibG9iL2EwYzg0MTQ3YWFiNjI2NmJkYjM5OTZjZjQwNjJlOTM5MDdjMGIwZmMvaW5kZXguanNcbiAqIEl0IGhhZCB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6XG4gKlxuICogKFRoZSBNSVQgTGljZW5zZSlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hbiA8c2h0eWxtYW5AZ21haWwuY29tPlxuICogQ29weXJpZ2h0IChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uIDxkb3VnQHNvbWV0aGluZ2RvdWcuY29tPlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuICogSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTllcbiAqIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4gKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuICogU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuLyoqXG4gKiBQYXJzZXMgYSBjb29raWUgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ29va2llKHN0cikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgbGV0IGluZGV4ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgY29uc3QgZXFJZHggPSBzdHIuaW5kZXhPZignPScsIGluZGV4KTtcblxuICAgIC8vIG5vIG1vcmUgY29va2llIHBhaXJzXG4gICAgaWYgKGVxSWR4ID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGV0IGVuZElkeCA9IHN0ci5pbmRleE9mKCc7JywgaW5kZXgpO1xuXG4gICAgaWYgKGVuZElkeCA9PT0gLTEpIHtcbiAgICAgIGVuZElkeCA9IHN0ci5sZW5ndGg7XG4gICAgfSBlbHNlIGlmIChlbmRJZHggPCBlcUlkeCkge1xuICAgICAgLy8gYmFja3RyYWNrIG9uIHByaW9yIHNlbWljb2xvblxuICAgICAgaW5kZXggPSBzdHIubGFzdEluZGV4T2YoJzsnLCBlcUlkeCAtIDEpICsgMTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IHN0ci5zbGljZShpbmRleCwgZXFJZHgpLnRyaW0oKTtcblxuICAgIC8vIG9ubHkgYXNzaWduIG9uY2VcbiAgICBpZiAodW5kZWZpbmVkID09PSBvYmpba2V5XSkge1xuICAgICAgbGV0IHZhbCA9IHN0ci5zbGljZShlcUlkeCArIDEsIGVuZElkeCkudHJpbSgpO1xuXG4gICAgICAvLyBxdW90ZWQgdmFsdWVzXG4gICAgICBpZiAodmFsLmNoYXJDb2RlQXQoMCkgPT09IDB4MjIpIHtcbiAgICAgICAgdmFsID0gdmFsLnNsaWNlKDEsIC0xKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWwuaW5kZXhPZignJScpICE9PSAtMSA/IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpIDogdmFsO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleCA9IGVuZElkeCArIDE7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgeyBwYXJzZUNvb2tpZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29va2llLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/cookie.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/eventUtils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/eventUtils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPossibleEventMessages: () => (/* binding */ getPossibleEventMessages)\n/* harmony export */ });\n/**\n * Get a list of possible event messages from a Sentry event.\n */\nfunction getPossibleEventMessages(event) {\n  const possibleMessages = [];\n\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    const lastException = event.exception.values[event.exception.values.length - 1];\n    if (lastException?.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  } catch (e) {\n    // ignore errors here\n  }\n\n  return possibleMessages;\n}\n\n\n//# sourceMappingURL=eventUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9ldmVudFV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsbUJBQW1CLElBQUksb0JBQW9CO0FBQzVFO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9ldmVudFV0aWxzLmpzP2E3MjgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXQgYSBsaXN0IG9mIHBvc3NpYmxlIGV2ZW50IG1lc3NhZ2VzIGZyb20gYSBTZW50cnkgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyhldmVudCkge1xuICBjb25zdCBwb3NzaWJsZU1lc3NhZ2VzID0gW107XG5cbiAgaWYgKGV2ZW50Lm1lc3NhZ2UpIHtcbiAgICBwb3NzaWJsZU1lc3NhZ2VzLnB1c2goZXZlbnQubWVzc2FnZSk7XG4gIH1cblxuICB0cnkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVHJ5IGNhdGNoaW5nIHRvIHNhdmUgYnVuZGxlIHNpemVcbiAgICBjb25zdCBsYXN0RXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uLnZhbHVlc1tldmVudC5leGNlcHRpb24udmFsdWVzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0RXhjZXB0aW9uPy52YWx1ZSkge1xuICAgICAgcG9zc2libGVNZXNzYWdlcy5wdXNoKGxhc3RFeGNlcHRpb24udmFsdWUpO1xuICAgICAgaWYgKGxhc3RFeGNlcHRpb24udHlwZSkge1xuICAgICAgICBwb3NzaWJsZU1lc3NhZ2VzLnB1c2goYCR7bGFzdEV4Y2VwdGlvbi50eXBlfTogJHtsYXN0RXhjZXB0aW9uLnZhbHVlfWApO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlnbm9yZSBlcnJvcnMgaGVyZVxuICB9XG5cbiAgcmV0dXJuIHBvc3NpYmxlTWVzc2FnZXM7XG59XG5cbmV4cG9ydCB7IGdldFBvc3NpYmxlRXZlbnRNZXNzYWdlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRVdGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/eventUtils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleCallbackErrors: () => (/* binding */ handleCallbackErrors)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/is.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nfunction handleCallbackErrors\n\n(\n  fn,\n  onError,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onFinally = () => {},\n) {\n  let maybePromiseResult;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection(\n  value,\n  onError,\n  onFinally,\n) {\n  if ((0,_utils_hoist_is_js__WEBPACK_IMPORTED_MODULE_0__.isThenable)(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(\n      res => {\n        onFinally();\n        return res;\n      },\n      e => {\n        onError(e);\n        onFinally();\n        throw e;\n      },\n    );\n  }\n\n  onFinally();\n  return value;\n}\n\n\n//# sourceMappingURL=handleCallbackErrors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9oYW5kbGVDYWxsYmFja0Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRDs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sOERBQVU7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvaGFuZGxlQ2FsbGJhY2tFcnJvcnMuanM/MmM4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1RoZW5hYmxlIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvaXMuanMnO1xuXG4vKipcbiAqIFdyYXAgYSBjYWxsYmFjayBmdW5jdGlvbiB3aXRoIGVycm9yIGhhbmRsaW5nLlxuICogSWYgYW4gZXJyb3IgaXMgdGhyb3duLCBpdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgYG9uRXJyb3JgIGNhbGxiYWNrIGFuZCByZS10aHJvd24uXG4gKlxuICogSWYgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gaXMgYSBwcm9taXNlLCBpdCB3aWxsIGJlIGhhbmRsZWQgd2l0aCBgbWF5YmVIYW5kbGVQcm9taXNlUmVqZWN0aW9uYC5cbiAqXG4gKiBJZiBhbiBgb25GaW5hbGx5YCBjYWxsYmFjayBpcyBwcm92aWRlZCwgdGhpcyB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBjYWxsYmFjayBoYXMgZmluaXNoZWRcbiAqIC0gc28gaWYgaXQgcmV0dXJucyBhIHByb21pc2UsIG9uY2UgdGhlIHByb21pc2UgcmVzb2x2ZWQvcmVqZWN0ZWQsXG4gKiBlbHNlIG9uY2UgdGhlIGNhbGxiYWNrIGhhcyBmaW5pc2hlZCBleGVjdXRpbmcuXG4gKiBUaGUgYG9uRmluYWxseWAgY2FsbGJhY2sgd2lsbCBfYWx3YXlzXyBiZSBjYWxsZWQsIG5vIG1hdHRlciBpZiBhbiBlcnJvciB3YXMgdGhyb3duIG9yIG5vdC5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlQ2FsbGJhY2tFcnJvcnNcblxuKFxuICBmbixcbiAgb25FcnJvcixcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICBvbkZpbmFsbHkgPSAoKSA9PiB7fSxcbikge1xuICBsZXQgbWF5YmVQcm9taXNlUmVzdWx0O1xuICB0cnkge1xuICAgIG1heWJlUHJvbWlzZVJlc3VsdCA9IGZuKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvbkVycm9yKGUpO1xuICAgIG9uRmluYWxseSgpO1xuICAgIHRocm93IGU7XG4gIH1cblxuICByZXR1cm4gbWF5YmVIYW5kbGVQcm9taXNlUmVqZWN0aW9uKG1heWJlUHJvbWlzZVJlc3VsdCwgb25FcnJvciwgb25GaW5hbGx5KTtcbn1cblxuLyoqXG4gKiBNYXliZSBoYW5kbGUgYSBwcm9taXNlIHJlamVjdGlvbi5cbiAqIFRoaXMgZXhwZWN0cyB0byBiZSBnaXZlbiBhIHZhbHVlIHRoYXQgX21heV8gYmUgYSBwcm9taXNlLCBvciBhbnkgb3RoZXIgdmFsdWUuXG4gKiBJZiBpdCBpcyBhIHByb21pc2UsIGFuZCBpdCByZWplY3RzLCBpdCB3aWxsIGNhbGwgdGhlIGBvbkVycm9yYCBjYWxsYmFjay5cbiAqIE90aGVyIHRoYW4gdGhpcywgaXQgd2lsbCBnZW5lcmFsbHkgcmV0dXJuIHRoZSBnaXZlbiB2YWx1ZSBhcy1pcy5cbiAqL1xuZnVuY3Rpb24gbWF5YmVIYW5kbGVQcm9taXNlUmVqZWN0aW9uKFxuICB2YWx1ZSxcbiAgb25FcnJvcixcbiAgb25GaW5hbGx5LFxuKSB7XG4gIGlmIChpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSB0aGUgaXNUaGVuYWJsZSBjaGVjayByZXR1cm5zIHRoZSBcIndyb25nXCIgdHlwZSBoZXJlXG4gICAgcmV0dXJuIHZhbHVlLnRoZW4oXG4gICAgICByZXMgPT4ge1xuICAgICAgICBvbkZpbmFsbHkoKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0sXG4gICAgICBlID0+IHtcbiAgICAgICAgb25FcnJvcihlKTtcbiAgICAgICAgb25GaW5hbGx5KCk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBvbkZpbmFsbHkoKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgeyBoYW5kbGVDYWxsYmFja0Vycm9ycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZGxlQ2FsbGJhY2tFcnJvcnMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hasSpansEnabled: () => (/* binding */ hasSpansEnabled),\n/* harmony export */   hasTracingEnabled: () => (/* binding */ hasTracingEnabled)\n/* harmony export */ });\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n\n\n// Treeshakable guard to remove all code related to tracing\n\n/**\n * Determines if span recording is currently enabled.\n *\n * Spans are recorded when at least one of `tracesSampleRate` and `tracesSampler`\n * is defined in the SDK config. This function does not make any assumption about\n * sampling decisions, it only checks if the SDK is configured to record spans.\n *\n * Important: This function only determines if span recording is enabled. Trace\n * continuation and propagation is separately controlled and not covered by this function.\n * If this function returns `false`, traces can still be propagated (which is what\n * we refer to by \"Tracing without Performance\")\n * @see https://develop.sentry.dev/sdk/telemetry/traces/tracing-without-performance/\n *\n * @param maybeOptions An SDK options object to be passed to this function.\n * If this option is not provided, the function will use the current client's options.\n */\nfunction hasSpansEnabled(\n  maybeOptions,\n) {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const options = maybeOptions || (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)()?.getOptions();\n  return (\n    !!options &&\n    // Note: This check is `!= null`, meaning \"nullish\". `0` is not \"nullish\", `undefined` and `null` are. (This comment was brought to you by 15 minutes of questioning life)\n    (options.tracesSampleRate != null || !!options.tracesSampler)\n  );\n}\n\n/**\n * @see JSDoc of `hasSpansEnabled`\n * @deprecated Use `hasSpansEnabled` instead, which is a more accurately named version of this function.\n * This function will be removed in the next major version of the SDK.\n */\n// TODO(v10): Remove this export\nconst hasTracingEnabled = hasSpansEnabled;\n\n\n//# sourceMappingURL=hasSpansEnabled.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9oYXNTcGFuc0VuYWJsZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdEOztBQUVoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0MsNERBQVM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU4QztBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9oYXNTcGFuc0VuYWJsZWQuanM/YWJjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDbGllbnQgfSBmcm9tICcuLi9jdXJyZW50U2NvcGVzLmpzJztcblxuLy8gVHJlZXNoYWthYmxlIGd1YXJkIHRvIHJlbW92ZSBhbGwgY29kZSByZWxhdGVkIHRvIHRyYWNpbmdcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHNwYW4gcmVjb3JkaW5nIGlzIGN1cnJlbnRseSBlbmFibGVkLlxuICpcbiAqIFNwYW5zIGFyZSByZWNvcmRlZCB3aGVuIGF0IGxlYXN0IG9uZSBvZiBgdHJhY2VzU2FtcGxlUmF0ZWAgYW5kIGB0cmFjZXNTYW1wbGVyYFxuICogaXMgZGVmaW5lZCBpbiB0aGUgU0RLIGNvbmZpZy4gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBtYWtlIGFueSBhc3N1bXB0aW9uIGFib3V0XG4gKiBzYW1wbGluZyBkZWNpc2lvbnMsIGl0IG9ubHkgY2hlY2tzIGlmIHRoZSBTREsgaXMgY29uZmlndXJlZCB0byByZWNvcmQgc3BhbnMuXG4gKlxuICogSW1wb3J0YW50OiBUaGlzIGZ1bmN0aW9uIG9ubHkgZGV0ZXJtaW5lcyBpZiBzcGFuIHJlY29yZGluZyBpcyBlbmFibGVkLiBUcmFjZVxuICogY29udGludWF0aW9uIGFuZCBwcm9wYWdhdGlvbiBpcyBzZXBhcmF0ZWx5IGNvbnRyb2xsZWQgYW5kIG5vdCBjb3ZlcmVkIGJ5IHRoaXMgZnVuY3Rpb24uXG4gKiBJZiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgYGZhbHNlYCwgdHJhY2VzIGNhbiBzdGlsbCBiZSBwcm9wYWdhdGVkICh3aGljaCBpcyB3aGF0XG4gKiB3ZSByZWZlciB0byBieSBcIlRyYWNpbmcgd2l0aG91dCBQZXJmb3JtYW5jZVwiKVxuICogQHNlZSBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvdGVsZW1ldHJ5L3RyYWNlcy90cmFjaW5nLXdpdGhvdXQtcGVyZm9ybWFuY2UvXG4gKlxuICogQHBhcmFtIG1heWJlT3B0aW9ucyBBbiBTREsgb3B0aW9ucyBvYmplY3QgdG8gYmUgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24uXG4gKiBJZiB0aGlzIG9wdGlvbiBpcyBub3QgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiB3aWxsIHVzZSB0aGUgY3VycmVudCBjbGllbnQncyBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBoYXNTcGFuc0VuYWJsZWQoXG4gIG1heWJlT3B0aW9ucyxcbikge1xuICBpZiAodHlwZW9mIF9fU0VOVFJZX1RSQUNJTkdfXyA9PT0gJ2Jvb2xlYW4nICYmICFfX1NFTlRSWV9UUkFDSU5HX18pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBvcHRpb25zID0gbWF5YmVPcHRpb25zIHx8IGdldENsaWVudCgpPy5nZXRPcHRpb25zKCk7XG4gIHJldHVybiAoXG4gICAgISFvcHRpb25zICYmXG4gICAgLy8gTm90ZTogVGhpcyBjaGVjayBpcyBgIT0gbnVsbGAsIG1lYW5pbmcgXCJudWxsaXNoXCIuIGAwYCBpcyBub3QgXCJudWxsaXNoXCIsIGB1bmRlZmluZWRgIGFuZCBgbnVsbGAgYXJlLiAoVGhpcyBjb21tZW50IHdhcyBicm91Z2h0IHRvIHlvdSBieSAxNSBtaW51dGVzIG9mIHF1ZXN0aW9uaW5nIGxpZmUpXG4gICAgKG9wdGlvbnMudHJhY2VzU2FtcGxlUmF0ZSAhPSBudWxsIHx8ICEhb3B0aW9ucy50cmFjZXNTYW1wbGVyKVxuICApO1xufVxuXG4vKipcbiAqIEBzZWUgSlNEb2Mgb2YgYGhhc1NwYW5zRW5hYmxlZGBcbiAqIEBkZXByZWNhdGVkIFVzZSBgaGFzU3BhbnNFbmFibGVkYCBpbnN0ZWFkLCB3aGljaCBpcyBhIG1vcmUgYWNjdXJhdGVseSBuYW1lZCB2ZXJzaW9uIG9mIHRoaXMgZnVuY3Rpb24uXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIHRoZSBTREsuXG4gKi9cbi8vIFRPRE8odjEwKTogUmVtb3ZlIHRoaXMgZXhwb3J0XG5jb25zdCBoYXNUcmFjaW5nRW5hYmxlZCA9IGhhc1NwYW5zRW5hYmxlZDtcblxuZXhwb3J0IHsgaGFzU3BhbnNFbmFibGVkLCBoYXNUcmFjaW5nRW5hYmxlZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzU3BhbnNFbmFibGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/isSentryRequestUrl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/isSentryRequestUrl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSentryRequestUrl: () => (/* binding */ isSentryRequestUrl)\n/* harmony export */ });\n/**\n * Checks whether given url points to Sentry server\n *\n * @param url url to verify\n */\nfunction isSentryRequestUrl(url, client) {\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n  return checkDsn(url, dsn) || checkTunnel(url, tunnel);\n}\n\nfunction checkTunnel(url, tunnel) {\n  if (!tunnel) {\n    return false;\n  }\n\n  return removeTrailingSlash(url) === removeTrailingSlash(tunnel);\n}\n\nfunction checkDsn(url, dsn) {\n  return dsn ? url.includes(dsn.host) : false;\n}\n\nfunction removeTrailingSlash(str) {\n  return str[str.length - 1] === '/' ? str.slice(0, -1) : str;\n}\n\n\n//# sourceMappingURL=isSentryRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9pc1NlbnRyeVJlcXVlc3RVcmwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFOEI7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvaXNTZW50cnlSZXF1ZXN0VXJsLmpzPzkzODgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB1cmwgcG9pbnRzIHRvIFNlbnRyeSBzZXJ2ZXJcbiAqXG4gKiBAcGFyYW0gdXJsIHVybCB0byB2ZXJpZnlcbiAqL1xuZnVuY3Rpb24gaXNTZW50cnlSZXF1ZXN0VXJsKHVybCwgY2xpZW50KSB7XG4gIGNvbnN0IGRzbiA9IGNsaWVudD8uZ2V0RHNuKCk7XG4gIGNvbnN0IHR1bm5lbCA9IGNsaWVudD8uZ2V0T3B0aW9ucygpLnR1bm5lbDtcbiAgcmV0dXJuIGNoZWNrRHNuKHVybCwgZHNuKSB8fCBjaGVja1R1bm5lbCh1cmwsIHR1bm5lbCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrVHVubmVsKHVybCwgdHVubmVsKSB7XG4gIGlmICghdHVubmVsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHJlbW92ZVRyYWlsaW5nU2xhc2godXJsKSA9PT0gcmVtb3ZlVHJhaWxpbmdTbGFzaCh0dW5uZWwpO1xufVxuXG5mdW5jdGlvbiBjaGVja0Rzbih1cmwsIGRzbikge1xuICByZXR1cm4gZHNuID8gdXJsLmluY2x1ZGVzKGRzbi5ob3N0KSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFpbGluZ1NsYXNoKHN0cikge1xuICByZXR1cm4gc3RyW3N0ci5sZW5ndGggLSAxXSA9PT0gJy8nID8gc3RyLnNsaWNlKDAsIC0xKSA6IHN0cjtcbn1cblxuZXhwb3J0IHsgaXNTZW50cnlSZXF1ZXN0VXJsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NlbnRyeVJlcXVlc3RVcmwuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/isSentryRequestUrl.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/merge.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/merge.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   merge: () => (/* binding */ merge)\n/* harmony export */ });\n/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */\nfunction merge(initialObj, mergeObj, levels = 2) {\n  // If the merge value is not an object, or we have no merge levels left,\n  // we just set the value to the merge value\n  if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {\n    return mergeObj;\n  }\n\n  // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n  if (initialObj && Object.keys(mergeObj).length === 0) {\n    return initialObj;\n  }\n\n  // Clone object\n  const output = { ...initialObj };\n\n  // Merge values into output, resursively\n  for (const key in mergeObj) {\n    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n      output[key] = merge(output[key], mergeObj[key], levels - 1);\n    }\n  }\n\n  return output;\n}\n\n\n//# sourceMappingURL=merge.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9tZXJnZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUI7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9tZXJnZS5qcz8yZTUxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2hhbGxvdyBtZXJnZSB0d28gb2JqZWN0cy5cbiAqIERvZXMgbm90IG11dGF0ZSB0aGUgcGFzc2VkIGluIG9iamVjdHMuXG4gKiBVbmRlZmluZWQvZW1wdHkgdmFsdWVzIGluIHRoZSBtZXJnZSBvYmplY3Qgd2lsbCBvdmVyd3JpdGUgZXhpc3RpbmcgdmFsdWVzLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoaXMgbWVyZ2VzIDIgbGV2ZWxzIGRlZXAuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKGluaXRpYWxPYmosIG1lcmdlT2JqLCBsZXZlbHMgPSAyKSB7XG4gIC8vIElmIHRoZSBtZXJnZSB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0LCBvciB3ZSBoYXZlIG5vIG1lcmdlIGxldmVscyBsZWZ0LFxuICAvLyB3ZSBqdXN0IHNldCB0aGUgdmFsdWUgdG8gdGhlIG1lcmdlIHZhbHVlXG4gIGlmICghbWVyZ2VPYmogfHwgdHlwZW9mIG1lcmdlT2JqICE9PSAnb2JqZWN0JyB8fCBsZXZlbHMgPD0gMCkge1xuICAgIHJldHVybiBtZXJnZU9iajtcbiAgfVxuXG4gIC8vIElmIHRoZSBtZXJnZSBvYmplY3QgaXMgYW4gZW1wdHkgb2JqZWN0LCBhbmQgdGhlIGluaXRpYWwgb2JqZWN0IGlzIG5vdCB1bmRlZmluZWQsIHdlIHJldHVybiB0aGUgaW5pdGlhbCBvYmplY3RcbiAgaWYgKGluaXRpYWxPYmogJiYgT2JqZWN0LmtleXMobWVyZ2VPYmopLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBpbml0aWFsT2JqO1xuICB9XG5cbiAgLy8gQ2xvbmUgb2JqZWN0XG4gIGNvbnN0IG91dHB1dCA9IHsgLi4uaW5pdGlhbE9iaiB9O1xuXG4gIC8vIE1lcmdlIHZhbHVlcyBpbnRvIG91dHB1dCwgcmVzdXJzaXZlbHlcbiAgZm9yIChjb25zdCBrZXkgaW4gbWVyZ2VPYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lcmdlT2JqLCBrZXkpKSB7XG4gICAgICBvdXRwdXRba2V5XSA9IG1lcmdlKG91dHB1dFtrZXldLCBtZXJnZU9ialtrZXldLCBsZXZlbHMgLSAxKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgeyBtZXJnZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/merge.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/meta.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/meta.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTraceMetaTags: () => (/* binding */ getTraceMetaTags)\n/* harmony export */ });\n/* harmony import */ var _traceData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./traceData.js */ \"./node_modules/@sentry/core/build/esm/utils/traceData.js\");\n\n\n/**\n * Returns a string of meta tags that represent the current trace data.\n *\n * You can use this to propagate a trace from your server-side rendered Html to the browser.\n * This function returns up to two meta tags, `sentry-trace` and `baggage`, depending on the\n * current trace data state.\n *\n * @example\n * Usage example:\n *\n * ```js\n * function renderHtml() {\n *   return `\n *     <head>\n *       ${getTraceMetaTags()}\n *     </head>\n *   `;\n * }\n * ```\n *\n */\nfunction getTraceMetaTags() {\n  return Object.entries((0,_traceData_js__WEBPACK_IMPORTED_MODULE_0__.getTraceData)())\n    .map(([key, value]) => `<meta name=\"${key}\" content=\"${value}\"/>`)\n    .join('\\n');\n}\n\n\n//# sourceMappingURL=meta.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9tZXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDJEQUFZO0FBQ3BDLDBDQUEwQyxJQUFJLGFBQWEsTUFBTTtBQUNqRTtBQUNBOztBQUU0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9tZXRhLmpzP2Y4NzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VHJhY2VEYXRhIH0gZnJvbSAnLi90cmFjZURhdGEuanMnO1xuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgb2YgbWV0YSB0YWdzIHRoYXQgcmVwcmVzZW50IHRoZSBjdXJyZW50IHRyYWNlIGRhdGEuXG4gKlxuICogWW91IGNhbiB1c2UgdGhpcyB0byBwcm9wYWdhdGUgYSB0cmFjZSBmcm9tIHlvdXIgc2VydmVyLXNpZGUgcmVuZGVyZWQgSHRtbCB0byB0aGUgYnJvd3Nlci5cbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB1cCB0byB0d28gbWV0YSB0YWdzLCBgc2VudHJ5LXRyYWNlYCBhbmQgYGJhZ2dhZ2VgLCBkZXBlbmRpbmcgb24gdGhlXG4gKiBjdXJyZW50IHRyYWNlIGRhdGEgc3RhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIFVzYWdlIGV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGZ1bmN0aW9uIHJlbmRlckh0bWwoKSB7XG4gKiAgIHJldHVybiBgXG4gKiAgICAgPGhlYWQ+XG4gKiAgICAgICAke2dldFRyYWNlTWV0YVRhZ3MoKX1cbiAqICAgICA8L2hlYWQ+XG4gKiAgIGA7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKi9cbmZ1bmN0aW9uIGdldFRyYWNlTWV0YVRhZ3MoKSB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhnZXRUcmFjZURhdGEoKSlcbiAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IGA8bWV0YSBuYW1lPVwiJHtrZXl9XCIgY29udGVudD1cIiR7dmFsdWV9XCIvPmApXG4gICAgLmpvaW4oJ1xcbicpO1xufVxuXG5leHBvcnQgeyBnZXRUcmFjZU1ldGFUYWdzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/meta.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/parameterize.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/parameterize.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fmt: () => (/* binding */ fmt),\n/* harmony export */   parameterize: () => (/* binding */ parameterize)\n/* harmony export */ });\n/**\n * Tagged template function which returns parameterized representation of the message\n * For example: parameterize`This is a log statement with ${x} and ${y} params`, would return:\n * \"__sentry_template_string__\": 'This is a log statement with %s and %s params',\n * \"__sentry_template_values__\": ['first', 'second']\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n *\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nfunction parameterize(strings, ...values) {\n  const formatted = new String(String.raw(strings, ...values)) ;\n  formatted.__sentry_template_string__ = strings.join('\\x00').replace(/%/g, '%%').replace(/\\0/g, '%s');\n  formatted.__sentry_template_values__ = values;\n  return formatted;\n}\n\n/**\n * Tagged template function which returns parameterized representation of the message.\n *\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n * @returns A `ParameterizedString` object that can be passed into `captureMessage` or Sentry.logger.X methods.\n */\nconst fmt = parameterize;\n\n\n//# sourceMappingURL=parameterize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9wYXJhbWV0ZXJpemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0EsNERBQTRELEdBQUcsTUFBTSxHQUFHO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFNkI7QUFDN0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvcGFyYW1ldGVyaXplLmpzP2FhNDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUYWdnZWQgdGVtcGxhdGUgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBwYXJhbWV0ZXJpemVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtZXNzYWdlXG4gKiBGb3IgZXhhbXBsZTogcGFyYW1ldGVyaXplYFRoaXMgaXMgYSBsb2cgc3RhdGVtZW50IHdpdGggJHt4fSBhbmQgJHt5fSBwYXJhbXNgLCB3b3VsZCByZXR1cm46XG4gKiBcIl9fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fXCI6ICdUaGlzIGlzIGEgbG9nIHN0YXRlbWVudCB3aXRoICVzIGFuZCAlcyBwYXJhbXMnLFxuICogXCJfX3NlbnRyeV90ZW1wbGF0ZV92YWx1ZXNfX1wiOiBbJ2ZpcnN0JywgJ3NlY29uZCddXG4gKlxuICogQHBhcmFtIHN0cmluZ3MgQW4gYXJyYXkgb2Ygc3RyaW5nIHZhbHVlcyBzcGxpdHRlZCBiZXR3ZWVuIGV4cHJlc3Npb25zXG4gKiBAcGFyYW0gdmFsdWVzIEV4cHJlc3Npb25zIGV4dHJhY3RlZCBmcm9tIHRlbXBsYXRlIHN0cmluZ1xuICpcbiAqIEByZXR1cm5zIEEgYFBhcmFtZXRlcml6ZWRTdHJpbmdgIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgaW50byBgY2FwdHVyZU1lc3NhZ2VgIG9yIFNlbnRyeS5sb2dnZXIuWCBtZXRob2RzLlxuICovXG5mdW5jdGlvbiBwYXJhbWV0ZXJpemUoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IG5ldyBTdHJpbmcoU3RyaW5nLnJhdyhzdHJpbmdzLCAuLi52YWx1ZXMpKSA7XG4gIGZvcm1hdHRlZC5fX3NlbnRyeV90ZW1wbGF0ZV9zdHJpbmdfXyA9IHN0cmluZ3Muam9pbignXFx4MDAnKS5yZXBsYWNlKC8lL2csICclJScpLnJlcGxhY2UoL1xcMC9nLCAnJXMnKTtcbiAgZm9ybWF0dGVkLl9fc2VudHJ5X3RlbXBsYXRlX3ZhbHVlc19fID0gdmFsdWVzO1xuICByZXR1cm4gZm9ybWF0dGVkO1xufVxuXG4vKipcbiAqIFRhZ2dlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHBhcmFtZXRlcml6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHN0cmluZ3MgQW4gYXJyYXkgb2Ygc3RyaW5nIHZhbHVlcyBzcGxpdHRlZCBiZXR3ZWVuIGV4cHJlc3Npb25zXG4gKiBAcGFyYW0gdmFsdWVzIEV4cHJlc3Npb25zIGV4dHJhY3RlZCBmcm9tIHRlbXBsYXRlIHN0cmluZ1xuICogQHJldHVybnMgQSBgUGFyYW1ldGVyaXplZFN0cmluZ2Agb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCBpbnRvIGBjYXB0dXJlTWVzc2FnZWAgb3IgU2VudHJ5LmxvZ2dlci5YIG1ldGhvZHMuXG4gKi9cbmNvbnN0IGZtdCA9IHBhcmFtZXRlcml6ZTtcblxuZXhwb3J0IHsgZm10LCBwYXJhbWV0ZXJpemUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcmFtZXRlcml6ZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/parameterize.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseSampleRate: () => (/* binding */ parseSampleRate)\n/* harmony export */ });\n/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nfunction parseSampleRate(sampleRate) {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    return undefined;\n  }\n\n  return rate;\n}\n\n\n//# sourceMappingURL=parseSampleRate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9wYXJzZVNhbXBsZVJhdGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvcGFyc2VTYW1wbGVSYXRlLmpzP2JjOTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQYXJzZSBhIHNhbXBsZSByYXRlIGZyb20gYSBnaXZlbiB2YWx1ZS5cbiAqIFRoaXMgd2lsbCBlaXRoZXIgcmV0dXJuIGEgYm9vbGVhbiBvciBudW1iZXIgc2FtcGxlIHJhdGUsIGlmIHRoZSBzYW1wbGUgcmF0ZSBpcyB2YWxpZCAoYmV0d2VlbiAwIGFuZCAxKS5cbiAqIElmIGEgc3RyaW5nIGlzIHBhc3NlZCwgd2UgdHJ5IHRvIGNvbnZlcnQgaXQgdG8gYSBudW1iZXIuXG4gKlxuICogQW55IGludmFsaWQgc2FtcGxlIHJhdGUgd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU2FtcGxlUmF0ZShzYW1wbGVSYXRlKSB7XG4gIGlmICh0eXBlb2Ygc2FtcGxlUmF0ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIE51bWJlcihzYW1wbGVSYXRlKTtcbiAgfVxuXG4gIGNvbnN0IHJhdGUgPSB0eXBlb2Ygc2FtcGxlUmF0ZSA9PT0gJ3N0cmluZycgPyBwYXJzZUZsb2F0KHNhbXBsZVJhdGUpIDogc2FtcGxlUmF0ZTtcbiAgaWYgKHR5cGVvZiByYXRlICE9PSAnbnVtYmVyJyB8fCBpc05hTihyYXRlKSB8fCByYXRlIDwgMCB8fCByYXRlID4gMSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gcmF0ZTtcbn1cblxuZXhwb3J0IHsgcGFyc2VTYW1wbGVSYXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZVNhbXBsZVJhdGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/prepareEvent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/prepareEvent.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyClientOptions: () => (/* binding */ applyClientOptions),\n/* harmony export */   applyDebugIds: () => (/* binding */ applyDebugIds),\n/* harmony export */   applyDebugMeta: () => (/* binding */ applyDebugMeta),\n/* harmony export */   parseEventHintOrCaptureContext: () => (/* binding */ parseEventHintOrCaptureContext),\n/* harmony export */   prepareEvent: () => (/* binding */ prepareEvent)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@sentry/core/build/esm/constants.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../eventProcessors.js */ \"./node_modules/@sentry/core/build/esm/eventProcessors.js\");\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../scope.js */ \"./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _utils_hoist_debug_ids_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils-hoist/debug-ids.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/debug-ids.js\");\n/* harmony import */ var _utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/misc.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/misc.js\");\n/* harmony import */ var _utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils-hoist/normalize.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/normalize.js\");\n/* harmony import */ var _utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils-hoist/string.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./applyScopeDataToEvent.js */ \"./node_modules/@sentry/core/build/esm/utils/applyScopeDataToEvent.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nfunction prepareEvent(\n  options,\n  event,\n  hint,\n  scope,\n  client,\n  isolationScope,\n) {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1000 } = options;\n  const prepared = {\n    ...event,\n    event_id: event.event_id || hint.event_id || (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_0__.uuid4)(),\n    timestamp: event.timestamp || (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_1__.dateTimestampInSeconds)(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  if (client) {\n    client.emit('applyFrameMetadata', event);\n  }\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n\n  if (hint.mechanism) {\n    (0,_utils_hoist_misc_js__WEBPACK_IMPORTED_MODULE_0__.addExceptionMechanism)(prepared, hint.mechanism);\n  }\n\n  const clientEventProcessors = client ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Scope.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_2__.getGlobalScope)().getScopeData();\n\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    (0,_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.mergeScopeData)(data, isolationData);\n  }\n\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    (0,_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.mergeScopeData)(data, finalScopeData);\n  }\n\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n\n  (0,_applyScopeDataToEvent_js__WEBPACK_IMPORTED_MODULE_3__.applyScopeDataToEvent)(prepared, data);\n\n  const eventProcessors = [\n    ...clientEventProcessors,\n    // Run scope event processors _after_ all other processors\n    ...data.eventProcessors,\n  ];\n\n  const result = (0,_eventProcessors_js__WEBPACK_IMPORTED_MODULE_4__.notifyEventProcessors)(eventProcessors, prepared, hint);\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n * Enhances event using the client configuration.\n * It takes care of all \"static\" values like environment, release and `dist`,\n * as well as truncating overly long values.\n *\n * Only exported for tests.\n *\n * @param event event instance to be enhanced\n */\nfunction applyClientOptions(event, options) {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  // empty strings do not make sense for environment, release, and dist\n  // so we handle them the same as if they were not provided\n  event.environment = event.environment || environment || _constants_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_ENVIRONMENT;\n\n  if (!event.release && release) {\n    event.release = release;\n  }\n\n  if (!event.dist && dist) {\n    event.dist = dist;\n  }\n\n  const request = event.request;\n  if (request?.url) {\n    request.url = (0,_utils_hoist_string_js__WEBPACK_IMPORTED_MODULE_6__.truncate)(request.url, maxValueLength);\n  }\n}\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nfunction applyDebugIds(event, stackParser) {\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = (0,_utils_hoist_debug_ids_js__WEBPACK_IMPORTED_MODULE_7__.getFilenameToDebugIdMap)(stackParser);\n\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.filename) {\n        frame.debug_id = filenameDebugIdMap[frame.filename];\n      }\n    });\n  });\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nfunction applyDebugMeta(event) {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap = {};\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.debug_id) {\n        if (frame.abs_path) {\n          filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n        } else if (frame.filename) {\n          filenameDebugIdMap[frame.filename] = frame.debug_id;\n        }\n        delete frame.debug_id;\n      }\n    });\n  });\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id,\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event, integrationNames) {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event, depth, maxBreadth) {\n  if (!event) {\n    return null;\n  }\n\n  const normalized = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts?.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      return {\n        ...span,\n        ...(span.data && {\n          data: (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(span.data, depth, maxBreadth),\n        }),\n      };\n    });\n  }\n\n  // event.contexts.flags (FeatureFlagContext) stores context for our feature\n  // flag integrations. It has a greater nesting depth than our other typed\n  // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n  // to skip this in case of conflicting, user-provided context.\n  if (event.contexts?.flags && normalized.contexts) {\n    normalized.contexts.flags = (0,_utils_hoist_normalize_js__WEBPACK_IMPORTED_MODULE_8__.normalize)(event.contexts.flags, 3, maxBreadth);\n  }\n\n  return normalized;\n}\n\nfunction getFinalScope(scope, captureContext) {\n  if (!captureContext) {\n    return scope;\n  }\n\n  const finalScope = scope ? scope.clone() : new _scope_js__WEBPACK_IMPORTED_MODULE_9__.Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nfunction parseEventHintOrCaptureContext(\n  hint,\n) {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return { captureContext: hint };\n  }\n\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint,\n    };\n  }\n\n  return hint;\n}\n\nfunction hintIsScopeOrFunction(hint) {\n  return hint instanceof _scope_js__WEBPACK_IMPORTED_MODULE_9__.Scope || typeof hint === 'function';\n}\n\nconst captureContextKeys = [\n  'user',\n  'level',\n  'extra',\n  'contexts',\n  'tags',\n  'fingerprint',\n  'propagationContext',\n] ;\n\nfunction hintIsScopeContext(hint) {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key ));\n}\n\n\n//# sourceMappingURL=prepareEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/prepareEvent.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/request.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/request.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractQueryParamsFromUrl: () => (/* binding */ extractQueryParamsFromUrl),\n/* harmony export */   headersToDict: () => (/* binding */ headersToDict),\n/* harmony export */   httpRequestToRequestData: () => (/* binding */ httpRequestToRequestData),\n/* harmony export */   winterCGHeadersToDict: () => (/* binding */ winterCGHeadersToDict),\n/* harmony export */   winterCGRequestToRequestData: () => (/* binding */ winterCGRequestToRequestData)\n/* harmony export */ });\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */\nfunction winterCGHeadersToDict(winterCGHeaders) {\n  const headers = {};\n  try {\n    winterCGHeaders.forEach((value, key) => {\n      if (typeof value === 'string') {\n        // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Convert common request headers to a simple dictionary.\n */\nfunction headersToDict(reqHeaders) {\n  const headers = Object.create(null);\n\n  try {\n    Object.entries(reqHeaders).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */\nfunction winterCGRequestToRequestData(req) {\n  const headers = winterCGHeadersToDict(req.headers);\n\n  return {\n    method: req.method,\n    url: req.url,\n    query_string: extractQueryParamsFromUrl(req.url),\n    headers,\n    // TODO: Can we extract body data from the request?\n  };\n}\n\n/**\n * Convert a HTTP request object to RequestEventData to be passed as normalizedRequest.\n * Instead of allowing `PolymorphicRequest` to be passed,\n * we want to be more specific and generally require a http.IncomingMessage-like object.\n */\nfunction httpRequestToRequestData(request\n\n) {\n  const headers = request.headers || {};\n  const host = typeof headers.host === 'string' ? headers.host : undefined;\n  const protocol = request.protocol || (request.socket?.encrypted ? 'https' : 'http');\n  const url = request.url || '';\n\n  const absoluteUrl = getAbsoluteUrl({\n    url,\n    host,\n    protocol,\n  });\n\n  // This is non-standard, but may be sometimes set\n  // It may be overwritten later by our own body handling\n  const data = (request ).body || undefined;\n\n  // This is non-standard, but may be set on e.g. Next.js or Express requests\n  const cookies = (request ).cookies;\n\n  return {\n    url: absoluteUrl,\n    method: request.method,\n    query_string: extractQueryParamsFromUrl(url),\n    headers: headersToDict(headers),\n    cookies,\n    data,\n  };\n}\n\nfunction getAbsoluteUrl({\n  url,\n  protocol,\n  host,\n}\n\n) {\n  if (url?.startsWith('http')) {\n    return url;\n  }\n\n  if (url && host) {\n    return `${protocol}://${host}${url}`;\n  }\n\n  return undefined;\n}\n\n/** Extract the query params from an URL. */\nfunction extractQueryParamsFromUrl(url) {\n  // url is path and query string\n  if (!url) {\n    return;\n  }\n\n  try {\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname as the base. Since the point here is just to grab the query string, it doesn't matter what we use.\n    const queryParams = new URL(url, 'http://s.io').search.slice(1);\n    return queryParams.length ? queryParams : undefined;\n  } catch {\n    return undefined;\n  }\n}\n\n\n//# sourceMappingURL=request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsU0FBUyxLQUFLLEtBQUssRUFBRSxJQUFJO0FBQ3ZDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVtSTtBQUNuSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9yZXF1ZXN0LmpzPzkwNDIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUcmFuc2Zvcm1zIGEgYEhlYWRlcnNgIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIGBXZWIgRmV0Y2ggQVBJYCAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hlYWRlcnMpIGludG8gYSBzaW1wbGUga2V5LXZhbHVlIGRpY3QuXG4gKiBUaGUgaGVhZGVyIGtleXMgd2lsbCBiZSBsb3dlciBjYXNlOiBlLmcuIEEgXCJDb250ZW50LVR5cGVcIiBoZWFkZXIgd2lsbCBiZSBzdG9yZWQgYXMgXCJjb250ZW50LXR5cGVcIi5cbiAqL1xuZnVuY3Rpb24gd2ludGVyQ0dIZWFkZXJzVG9EaWN0KHdpbnRlckNHSGVhZGVycykge1xuICBjb25zdCBoZWFkZXJzID0ge307XG4gIHRyeSB7XG4gICAgd2ludGVyQ0dIZWFkZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIFdlIGNoZWNrIHRoYXQgdmFsdWUgaXMgYSBzdHJpbmcgZXZlbiB0aG91Z2ggaXQgbWlnaHQgYmUgcmVkdW5kYW50IHRvIG1ha2Ugc3VyZSBwcm90b3R5cGUgcG9sbHV0aW9uIGlzIG5vdCBwb3NzaWJsZS5cbiAgICAgICAgaGVhZGVyc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2gge1xuICAgIC8vIGp1c3QgcmV0dXJuIHRoZSBlbXB0eSBoZWFkZXJzXG4gIH1cblxuICByZXR1cm4gaGVhZGVycztcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGNvbW1vbiByZXF1ZXN0IGhlYWRlcnMgdG8gYSBzaW1wbGUgZGljdGlvbmFyeS5cbiAqL1xuZnVuY3Rpb24gaGVhZGVyc1RvRGljdChyZXFIZWFkZXJzKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHRyeSB7XG4gICAgT2JqZWN0LmVudHJpZXMocmVxSGVhZGVycykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCB7XG4gICAgLy8ganVzdCByZXR1cm4gdGhlIGVtcHR5IGhlYWRlcnNcbiAgfVxuXG4gIHJldHVybiBoZWFkZXJzO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgYFJlcXVlc3RgIG9iamVjdCB0aGF0IGltcGxlbWVudHMgdGhlIGBXZWIgRmV0Y2ggQVBJYCAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hlYWRlcnMpIGludG8gdGhlIGZvcm1hdCB0aGF0IHRoZSBgUmVxdWVzdERhdGFgIGludGVncmF0aW9uIHVuZGVyc3RhbmRzLlxuICovXG5mdW5jdGlvbiB3aW50ZXJDR1JlcXVlc3RUb1JlcXVlc3REYXRhKHJlcSkge1xuICBjb25zdCBoZWFkZXJzID0gd2ludGVyQ0dIZWFkZXJzVG9EaWN0KHJlcS5oZWFkZXJzKTtcblxuICByZXR1cm4ge1xuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICB1cmw6IHJlcS51cmwsXG4gICAgcXVlcnlfc3RyaW5nOiBleHRyYWN0UXVlcnlQYXJhbXNGcm9tVXJsKHJlcS51cmwpLFxuICAgIGhlYWRlcnMsXG4gICAgLy8gVE9ETzogQ2FuIHdlIGV4dHJhY3QgYm9keSBkYXRhIGZyb20gdGhlIHJlcXVlc3Q/XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydCBhIEhUVFAgcmVxdWVzdCBvYmplY3QgdG8gUmVxdWVzdEV2ZW50RGF0YSB0byBiZSBwYXNzZWQgYXMgbm9ybWFsaXplZFJlcXVlc3QuXG4gKiBJbnN0ZWFkIG9mIGFsbG93aW5nIGBQb2x5bW9ycGhpY1JlcXVlc3RgIHRvIGJlIHBhc3NlZCxcbiAqIHdlIHdhbnQgdG8gYmUgbW9yZSBzcGVjaWZpYyBhbmQgZ2VuZXJhbGx5IHJlcXVpcmUgYSBodHRwLkluY29taW5nTWVzc2FnZS1saWtlIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhKHJlcXVlc3RcblxuKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSByZXF1ZXN0LmhlYWRlcnMgfHwge307XG4gIGNvbnN0IGhvc3QgPSB0eXBlb2YgaGVhZGVycy5ob3N0ID09PSAnc3RyaW5nJyA/IGhlYWRlcnMuaG9zdCA6IHVuZGVmaW5lZDtcbiAgY29uc3QgcHJvdG9jb2wgPSByZXF1ZXN0LnByb3RvY29sIHx8IChyZXF1ZXN0LnNvY2tldD8uZW5jcnlwdGVkID8gJ2h0dHBzJyA6ICdodHRwJyk7XG4gIGNvbnN0IHVybCA9IHJlcXVlc3QudXJsIHx8ICcnO1xuXG4gIGNvbnN0IGFic29sdXRlVXJsID0gZ2V0QWJzb2x1dGVVcmwoe1xuICAgIHVybCxcbiAgICBob3N0LFxuICAgIHByb3RvY29sLFxuICB9KTtcblxuICAvLyBUaGlzIGlzIG5vbi1zdGFuZGFyZCwgYnV0IG1heSBiZSBzb21ldGltZXMgc2V0XG4gIC8vIEl0IG1heSBiZSBvdmVyd3JpdHRlbiBsYXRlciBieSBvdXIgb3duIGJvZHkgaGFuZGxpbmdcbiAgY29uc3QgZGF0YSA9IChyZXF1ZXN0ICkuYm9keSB8fCB1bmRlZmluZWQ7XG5cbiAgLy8gVGhpcyBpcyBub24tc3RhbmRhcmQsIGJ1dCBtYXkgYmUgc2V0IG9uIGUuZy4gTmV4dC5qcyBvciBFeHByZXNzIHJlcXVlc3RzXG4gIGNvbnN0IGNvb2tpZXMgPSAocmVxdWVzdCApLmNvb2tpZXM7XG5cbiAgcmV0dXJuIHtcbiAgICB1cmw6IGFic29sdXRlVXJsLFxuICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgcXVlcnlfc3RyaW5nOiBleHRyYWN0UXVlcnlQYXJhbXNGcm9tVXJsKHVybCksXG4gICAgaGVhZGVyczogaGVhZGVyc1RvRGljdChoZWFkZXJzKSxcbiAgICBjb29raWVzLFxuICAgIGRhdGEsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEFic29sdXRlVXJsKHtcbiAgdXJsLFxuICBwcm90b2NvbCxcbiAgaG9zdCxcbn1cblxuKSB7XG4gIGlmICh1cmw/LnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICBpZiAodXJsICYmIGhvc3QpIHtcbiAgICByZXR1cm4gYCR7cHJvdG9jb2x9Oi8vJHtob3N0fSR7dXJsfWA7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKiogRXh0cmFjdCB0aGUgcXVlcnkgcGFyYW1zIGZyb20gYW4gVVJMLiAqL1xuZnVuY3Rpb24gZXh0cmFjdFF1ZXJ5UGFyYW1zRnJvbVVybCh1cmwpIHtcbiAgLy8gdXJsIGlzIHBhdGggYW5kIHF1ZXJ5IHN0cmluZ1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gVGhlIGBVUkxgIGNvbnN0cnVjdG9yIGNhbid0IGhhbmRsZSBpbnRlcm5hbCBVUkxzIG9mIHRoZSBmb3JtIGAvc29tZS9wYXRoL2hlcmVgLCBzbyBzdGljayBhIGR1bW15IHByb3RvY29sIGFuZFxuICAgIC8vIGhvc3RuYW1lIGFzIHRoZSBiYXNlLiBTaW5jZSB0aGUgcG9pbnQgaGVyZSBpcyBqdXN0IHRvIGdyYWIgdGhlIHF1ZXJ5IHN0cmluZywgaXQgZG9lc24ndCBtYXR0ZXIgd2hhdCB3ZSB1c2UuXG4gICAgY29uc3QgcXVlcnlQYXJhbXMgPSBuZXcgVVJMKHVybCwgJ2h0dHA6Ly9zLmlvJykuc2VhcmNoLnNsaWNlKDEpO1xuICAgIHJldHVybiBxdWVyeVBhcmFtcy5sZW5ndGggPyBxdWVyeVBhcmFtcyA6IHVuZGVmaW5lZDtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgeyBleHRyYWN0UXVlcnlQYXJhbXNGcm9tVXJsLCBoZWFkZXJzVG9EaWN0LCBodHRwUmVxdWVzdFRvUmVxdWVzdERhdGEsIHdpbnRlckNHSGVhZGVyc1RvRGljdCwgd2ludGVyQ0dSZXF1ZXN0VG9SZXF1ZXN0RGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/request.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applySdkMetadata: () => (/* binding */ applySdkMetadata)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/version.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/version.js\");\n\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nfunction applySdkMetadata(options, name, names = [name], source = 'npm') {\n  const metadata = options._metadata || {};\n\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION,\n      })),\n      version: _utils_hoist_version_js__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION,\n    };\n  }\n\n  options._metadata = metadata;\n}\n\n\n//# sourceMappingURL=sdkMetadata.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9zZGtNZXRhZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsS0FBSztBQUN0QztBQUNBLGlCQUFpQixPQUFPLFdBQVcsS0FBSztBQUN4QyxpQkFBaUIsZ0VBQVc7QUFDNUIsT0FBTztBQUNQLGVBQWUsZ0VBQVc7QUFDMUI7QUFDQTs7QUFFQTtBQUNBOztBQUU0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9zZGtNZXRhZGF0YS5qcz9iOTYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSAnLi4vdXRpbHMtaG9pc3QvdmVyc2lvbi5qcyc7XG5cbi8qKlxuICogQSBidWlsZGVyIGZvciB0aGUgU0RLIG1ldGFkYXRhIGluIHRoZSBvcHRpb25zIGZvciB0aGUgU0RLIGluaXRpYWxpemF0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgaWRlbnRpY2FsIHRvIGBidWlsZE1ldGFkYXRhYCBpbiBSZW1peCBhbmQgTmV4dEpTIGFuZCBTdmVsdGVLaXQuXG4gKiBXZSBkb24ndCBleHRyYWN0IGl0IGZvciBidW5kbGUgc2l6ZSByZWFzb25zLlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L3B1bGwvNzQwNFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L3B1bGwvNDE5NlxuICpcbiAqIElmIHlvdSBtYWtlIGNoYW5nZXMgdG8gdGhpcyBmdW5jdGlvbiBjb25zaWRlciB1cGRhdGluZyB0aGUgb3RoZXJzIGFzIHdlbGwuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgU0RLIG9wdGlvbnMgb2JqZWN0IHRoYXQgZ2V0cyBtdXRhdGVkXG4gKiBAcGFyYW0gbmFtZXMgbGlzdCBvZiBwYWNrYWdlIG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U2RrTWV0YWRhdGEob3B0aW9ucywgbmFtZSwgbmFtZXMgPSBbbmFtZV0sIHNvdXJjZSA9ICducG0nKSB7XG4gIGNvbnN0IG1ldGFkYXRhID0gb3B0aW9ucy5fbWV0YWRhdGEgfHwge307XG5cbiAgaWYgKCFtZXRhZGF0YS5zZGspIHtcbiAgICBtZXRhZGF0YS5zZGsgPSB7XG4gICAgICBuYW1lOiBgc2VudHJ5LmphdmFzY3JpcHQuJHtuYW1lfWAsXG4gICAgICBwYWNrYWdlczogbmFtZXMubWFwKG5hbWUgPT4gKHtcbiAgICAgICAgbmFtZTogYCR7c291cmNlfTpAc2VudHJ5LyR7bmFtZX1gLFxuICAgICAgICB2ZXJzaW9uOiBTREtfVkVSU0lPTixcbiAgICAgIH0pKSxcbiAgICAgIHZlcnNpb246IFNES19WRVJTSU9OLFxuICAgIH07XG4gIH1cblxuICBvcHRpb25zLl9tZXRhZGF0YSA9IG1ldGFkYXRhO1xufVxuXG5leHBvcnQgeyBhcHBseVNka01ldGFkYXRhIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZGtNZXRhZGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/spanOnScope.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/spanOnScope.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _getSpanForScope: () => (/* binding */ _getSpanForScope),\n/* harmony export */   _setSpanForScope: () => (/* binding */ _setSpanForScope)\n/* harmony export */ });\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n\n\nconst SCOPE_SPAN_FIELD = '_sentrySpan';\n\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _setSpanForScope(scope, span) {\n  if (span) {\n    (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_0__.addNonEnumerableProperty)(scope , SCOPE_SPAN_FIELD, span);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete (scope )[SCOPE_SPAN_FIELD];\n  }\n}\n\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _getSpanForScope(scope) {\n  return scope[SCOPE_SPAN_FIELD];\n}\n\n\n//# sourceMappingURL=spanOnScope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy9zcGFuT25TY29wZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0U7O0FBRXBFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksZ0ZBQXdCO0FBQzVCLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFOEM7QUFDOUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvc3Bhbk9uU2NvcGUuanM/ODY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkgfSBmcm9tICcuLi91dGlscy1ob2lzdC9vYmplY3QuanMnO1xuXG5jb25zdCBTQ09QRV9TUEFOX0ZJRUxEID0gJ19zZW50cnlTcGFuJztcblxuLyoqXG4gKiBTZXQgdGhlIGFjdGl2ZSBzcGFuIGZvciBhIGdpdmVuIHNjb3BlLlxuICogTk9URTogVGhpcyBzaG91bGQgTk9UIGJlIHVzZWQgZGlyZWN0bHksIGJ1dCBpcyBvbmx5IHVzZWQgaW50ZXJuYWxseSBieSB0aGUgdHJhY2UgbWV0aG9kcy5cbiAqL1xuZnVuY3Rpb24gX3NldFNwYW5Gb3JTY29wZShzY29wZSwgc3Bhbikge1xuICBpZiAoc3Bhbikge1xuICAgIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShzY29wZSAsIFNDT1BFX1NQQU5fRklFTEQsIHNwYW4pO1xuICB9IGVsc2Uge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICBkZWxldGUgKHNjb3BlIClbU0NPUEVfU1BBTl9GSUVMRF07XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGFjdGl2ZSBzcGFuIGZvciBhIGdpdmVuIHNjb3BlLlxuICogTk9URTogVGhpcyBzaG91bGQgTk9UIGJlIHVzZWQgZGlyZWN0bHksIGJ1dCBpcyBvbmx5IHVzZWQgaW50ZXJuYWxseSBieSB0aGUgdHJhY2UgbWV0aG9kcy5cbiAqL1xuZnVuY3Rpb24gX2dldFNwYW5Gb3JTY29wZShzY29wZSkge1xuICByZXR1cm4gc2NvcGVbU0NPUEVfU1BBTl9GSUVMRF07XG59XG5cbmV4cG9ydCB7IF9nZXRTcGFuRm9yU2NvcGUsIF9zZXRTcGFuRm9yU2NvcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW5PblNjb3BlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/spanOnScope.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/spanUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/spanUtils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACE_FLAG_NONE: () => (/* binding */ TRACE_FLAG_NONE),\n/* harmony export */   TRACE_FLAG_SAMPLED: () => (/* binding */ TRACE_FLAG_SAMPLED),\n/* harmony export */   addChildSpanToSpan: () => (/* binding */ addChildSpanToSpan),\n/* harmony export */   convertSpanLinksForEnvelope: () => (/* binding */ convertSpanLinksForEnvelope),\n/* harmony export */   getActiveSpan: () => (/* binding */ getActiveSpan),\n/* harmony export */   getRootSpan: () => (/* binding */ getRootSpan),\n/* harmony export */   getSpanDescendants: () => (/* binding */ getSpanDescendants),\n/* harmony export */   getStatusMessage: () => (/* binding */ getStatusMessage),\n/* harmony export */   removeChildSpanFromSpan: () => (/* binding */ removeChildSpanFromSpan),\n/* harmony export */   showSpanDropWarning: () => (/* binding */ showSpanDropWarning),\n/* harmony export */   spanIsSampled: () => (/* binding */ spanIsSampled),\n/* harmony export */   spanTimeInputToSeconds: () => (/* binding */ spanTimeInputToSeconds),\n/* harmony export */   spanToJSON: () => (/* binding */ spanToJSON),\n/* harmony export */   spanToTraceContext: () => (/* binding */ spanToTraceContext),\n/* harmony export */   spanToTraceHeader: () => (/* binding */ spanToTraceHeader),\n/* harmony export */   spanToTransactionTraceContext: () => (/* binding */ spanToTransactionTraceContext),\n/* harmony export */   updateSpanName: () => (/* binding */ updateSpanName)\n/* harmony export */ });\n/* harmony import */ var _asyncContext_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../asyncContext/index.js */ \"./node_modules/@sentry/core/build/esm/asyncContext/index.js\");\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../carrier.js */ \"./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tracing/spanstatus.js */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _tracing_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tracing/utils.js */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils-hoist/object.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js\");\n/* harmony import */ var _utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils-hoist/time.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/time.js\");\n/* harmony import */ var _utils_hoist_tracing_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\");\n/* harmony import */ var _spanOnScope_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./spanOnScope.js */ \"./node_modules/@sentry/core/build/esm/utils/spanOnScope.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n// These are aligned with OpenTelemetry trace flags\nconst TRACE_FLAG_NONE = 0x0;\nconst TRACE_FLAG_SAMPLED = 0x1;\n\nlet hasShownSpanDropWarning = false;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */\nfunction spanToTransactionTraceContext(span) {\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n  const { data, op, parent_span_id, status, origin, links } = spanToJSON(span);\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data,\n    op,\n    status,\n    origin,\n    links,\n  };\n}\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */\nfunction spanToTraceContext(span) {\n  const { spanId, traceId: trace_id, isRemote } = span.spanContext();\n\n  // If the span is remote, we use a random/virtual span as span_id to the trace context,\n  // and the remote span as parent_span_id\n  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n  const scope = (0,_tracing_utils_js__WEBPACK_IMPORTED_MODULE_0__.getCapturedScopesOnSpan)(span).scope;\n\n  const span_id = isRemote ? scope?.getPropagationContext().propagationSpanId || (0,_utils_hoist_propagationContext_js__WEBPACK_IMPORTED_MODULE_1__.generateSpanId)() : spanId;\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n  };\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nfunction spanToTraceHeader(span) {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return (0,_utils_hoist_tracing_js__WEBPACK_IMPORTED_MODULE_2__.generateSentryTraceHeader)(traceId, spanId, sampled);\n}\n\n/**\n *  Converts the span links array to a flattened version to be sent within an envelope.\n *\n *  If the links array is empty, it returns `undefined` so the empty value can be dropped before it's sent.\n */\nfunction convertSpanLinksForEnvelope(links) {\n  if (links && links.length > 0) {\n    return links.map(({ context: { spanId, traceId, traceFlags, ...restContext }, attributes }) => ({\n      span_id: spanId,\n      trace_id: traceId,\n      sampled: traceFlags === TRACE_FLAG_SAMPLED,\n      attributes,\n      ...restContext,\n    }));\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Convert a span time input into a timestamp in seconds.\n */\nfunction spanTimeInputToSeconds(input) {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n\n  return (0,_utils_hoist_time_js__WEBPACK_IMPORTED_MODULE_3__.timestampInSeconds)();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n */\n// Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nfunction spanToJSON(span) {\n  if (spanIsSentrySpan(span)) {\n    return span.getSpanJSON();\n  }\n\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n\n  // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n  if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n    const { attributes, startTime, name, endTime, status, links } = span;\n\n    // In preparation for the next major of OpenTelemetry, we want to support\n    // looking up the parent span id according to the new API\n    // In OTel v1, the parent span id is accessed as `parentSpanId`\n    // In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n    const parentSpanId =\n      'parentSpanId' in span\n        ? span.parentSpanId\n        : 'parentSpanContext' in span\n          ? (span.parentSpanContext )?.spanId\n          : undefined;\n\n    return {\n      span_id,\n      trace_id,\n      data: attributes,\n      description: name,\n      parent_span_id: parentSpanId,\n      start_timestamp: spanTimeInputToSeconds(startTime),\n      // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n      timestamp: spanTimeInputToSeconds(endTime) || undefined,\n      status: getStatusMessage(status),\n      op: attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      origin: attributes[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ,\n      links: convertSpanLinksForEnvelope(links),\n    };\n  }\n\n  // Finally, at least we have `spanContext()`....\n  // This should not actually happen in reality, but we need to handle it for type safety.\n  return {\n    span_id,\n    trace_id,\n    start_timestamp: 0,\n    data: {},\n  };\n}\n\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span) {\n  const castSpan = span ;\n  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n\n/** Exported only for tests. */\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSentrySpan(span) {\n  return typeof (span ).getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nfunction spanIsSampled(span) {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const { traceFlags } = span.spanContext();\n  return traceFlags === TRACE_FLAG_SAMPLED;\n}\n\n/** Get the status message to use for a JSON representation of a span. */\nfunction getStatusMessage(status) {\n  if (!status || status.code === _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_5__.SPAN_STATUS_UNSET) {\n    return undefined;\n  }\n\n  if (status.code === _tracing_spanstatus_js__WEBPACK_IMPORTED_MODULE_5__.SPAN_STATUS_OK) {\n    return 'ok';\n  }\n\n  return status.message || 'unknown_error';\n}\n\nconst CHILD_SPANS_FIELD = '_sentryChildSpans';\nconst ROOT_SPAN_FIELD = '_sentryRootSpan';\n\n/**\n * Adds an opaque child span reference to a span.\n */\nfunction addChildSpanToSpan(span, childSpan) {\n  // We store the root span reference on the child span\n  // We need this for `getRootSpan()` to work\n  const rootSpan = span[ROOT_SPAN_FIELD] || span;\n  (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_6__.addNonEnumerableProperty)(childSpan , ROOT_SPAN_FIELD, rootSpan);\n\n  // We store a list of child spans on the parent span\n  // We need this for `getSpanDescendants()` to work\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].add(childSpan);\n  } else {\n    (0,_utils_hoist_object_js__WEBPACK_IMPORTED_MODULE_6__.addNonEnumerableProperty)(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n  }\n}\n\n/** This is only used internally by Idle Spans. */\nfunction removeChildSpanFromSpan(span, childSpan) {\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].delete(childSpan);\n  }\n}\n\n/**\n * Returns an array of the given span and all of its descendants.\n */\nfunction getSpanDescendants(span) {\n  const resultSet = new Set();\n\n  function addSpanChildren(span) {\n    // This exit condition is required to not infinitely loop in case of a circular dependency.\n    if (resultSet.has(span)) {\n      return;\n      // We want to ignore unsampled spans (e.g. non recording spans)\n    } else if (spanIsSampled(span)) {\n      resultSet.add(span);\n      const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n      for (const childSpan of childSpans) {\n        addSpanChildren(childSpan);\n      }\n    }\n  }\n\n  addSpanChildren(span);\n\n  return Array.from(resultSet);\n}\n\n/**\n * Returns the root span of a given span.\n */\nfunction getRootSpan(span) {\n  return span[ROOT_SPAN_FIELD] || span;\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_7__.getMainCarrier)();\n  const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_8__.getAsyncContextStrategy)(carrier);\n  if (acs.getActiveSpan) {\n    return acs.getActiveSpan();\n  }\n\n  return (0,_spanOnScope_js__WEBPACK_IMPORTED_MODULE_9__._getSpanForScope)((0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_10__.getCurrentScope)());\n}\n\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n */\nfunction showSpanDropWarning() {\n  if (!hasShownSpanDropWarning) {\n    (0,_utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_11__.consoleSandbox)(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] Returning null from `beforeSendSpan` is disallowed. To drop certain spans, configure the respective integrations directly.',\n      );\n    });\n    hasShownSpanDropWarning = true;\n  }\n}\n\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */\nfunction updateSpanName(span, name) {\n  span.updateName(name);\n  span.setAttributes({\n    [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n    [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name,\n  });\n}\n\n\n//# sourceMappingURL=spanUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/spanUtils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/traceData.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/traceData.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTraceData: () => (/* binding */ getTraceData)\n/* harmony export */ });\n/* harmony import */ var _asyncContext_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../asyncContext/index.js */ \"./node_modules/@sentry/core/build/esm/asyncContext/index.js\");\n/* harmony import */ var _carrier_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../carrier.js */ \"./node_modules/@sentry/core/build/esm/carrier.js\");\n/* harmony import */ var _currentScopes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../currentScopes.js */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _exports_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../exports.js */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils-hoist/logger.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _spanUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./spanUtils.js */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _utils_hoist_tracing_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\");\n/* harmony import */ var _utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils-hoist/baggage.js */ \"./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Extracts trace propagation data from the current span or from the client's scope (via transaction or propagation\n * context) and serializes it to `sentry-trace` and `baggage` values to strings. These values can be used to propagate\n * a trace via our tracing Http headers or Html `<meta>` tags.\n *\n * This function also applies some validation to the generated sentry-trace and baggage values to ensure that\n * only valid strings are returned.\n *\n * @returns an object with the tracing data values. The object keys are the name of the tracing key to be used as header\n * or meta tag name.\n */\nfunction getTraceData(options = {}) {\n  const client = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getClient)();\n  if (!(0,_exports_js__WEBPACK_IMPORTED_MODULE_1__.isEnabled)() || !client) {\n    return {};\n  }\n\n  const carrier = (0,_carrier_js__WEBPACK_IMPORTED_MODULE_2__.getMainCarrier)();\n  const acs = (0,_asyncContext_index_js__WEBPACK_IMPORTED_MODULE_3__.getAsyncContextStrategy)(carrier);\n  if (acs.getTraceData) {\n    return acs.getTraceData(options);\n  }\n\n  const scope = (0,_currentScopes_js__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n  const span = options.span || (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.getActiveSpan)();\n  const sentryTrace = span ? (0,_spanUtils_js__WEBPACK_IMPORTED_MODULE_4__.spanToTraceHeader)(span) : scopeToTraceHeader(scope);\n  const dsc = span ? (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_5__.getDynamicSamplingContextFromSpan)(span) : (0,_tracing_dynamicSamplingContext_js__WEBPACK_IMPORTED_MODULE_5__.getDynamicSamplingContextFromScope)(client, scope);\n  const baggage = (0,_utils_hoist_baggage_js__WEBPACK_IMPORTED_MODULE_6__.dynamicSamplingContextToSentryBaggageHeader)(dsc);\n\n  const isValidSentryTraceHeader = _utils_hoist_tracing_js__WEBPACK_IMPORTED_MODULE_7__.TRACEPARENT_REGEXP.test(sentryTrace);\n  if (!isValidSentryTraceHeader) {\n    _utils_hoist_logger_js__WEBPACK_IMPORTED_MODULE_8__.logger.warn('Invalid sentry-trace data. Cannot generate trace data');\n    return {};\n  }\n\n  return {\n    'sentry-trace': sentryTrace,\n    baggage,\n  };\n}\n\n/**\n * Get a sentry-trace header value for the given scope.\n */\nfunction scopeToTraceHeader(scope) {\n  const { traceId, sampled, propagationSpanId } = scope.getPropagationContext();\n  return (0,_utils_hoist_tracing_js__WEBPACK_IMPORTED_MODULE_7__.generateSentryTraceHeader)(traceId, propagationSpanId, sampled);\n}\n\n\n//# sourceMappingURL=traceData.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy90cmFjZURhdGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFtRTtBQUNwQjtBQUNrQjtBQUN2QjtBQUNaO0FBQ0g7QUFDdUI7QUFDZ0I7QUFDbEM7QUFDNkY7QUFDbkM7QUFDRjs7QUFFeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxpQkFBaUIsNERBQVM7QUFDMUIsT0FBTyxzREFBUztBQUNoQjtBQUNBOztBQUVBLGtCQUFrQiwyREFBYztBQUNoQyxjQUFjLCtFQUF1QjtBQUNyQztBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLGtFQUFlO0FBQy9CLCtCQUErQiw0REFBYTtBQUM1Qyw2QkFBNkIsZ0VBQWlCO0FBQzlDLHFCQUFxQixxR0FBaUMsU0FBUyxzR0FBa0M7QUFDakcsa0JBQWtCLG9HQUEyQzs7QUFFN0QsbUNBQW1DLHVFQUFrQjtBQUNyRDtBQUNBLElBQUksMERBQU07QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHNDQUFzQztBQUNoRCxTQUFTLGtGQUF5QjtBQUNsQzs7QUFFd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvdHJhY2VEYXRhLmpzPzJmYTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kgfSBmcm9tICcuLi9hc3luY0NvbnRleHQvaW5kZXguanMnO1xuaW1wb3J0IHsgZ2V0TWFpbkNhcnJpZXIgfSBmcm9tICcuLi9jYXJyaWVyLmpzJztcbmltcG9ydCB7IGdldENsaWVudCwgZ2V0Q3VycmVudFNjb3BlIH0gZnJvbSAnLi4vY3VycmVudFNjb3Blcy5qcyc7XG5pbXBvcnQgeyBpc0VuYWJsZWQgfSBmcm9tICcuLi9leHBvcnRzLmpzJztcbmltcG9ydCAnLi4vdHJhY2luZy9lcnJvcnMuanMnO1xuaW1wb3J0ICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnO1xuaW1wb3J0IHsgZ2V0QWN0aXZlU3Bhbiwgc3BhblRvVHJhY2VIZWFkZXIgfSBmcm9tICcuL3NwYW5VdGlscy5qcyc7XG5pbXBvcnQgJy4uL3V0aWxzLWhvaXN0L3RpbWUuanMnO1xuaW1wb3J0IHsgZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuLCBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNjb3BlIH0gZnJvbSAnLi4vdHJhY2luZy9keW5hbWljU2FtcGxpbmdDb250ZXh0LmpzJztcbmltcG9ydCB7IFRSQUNFUEFSRU5UX1JFR0VYUCwgZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlciB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L3RyYWNpbmcuanMnO1xuaW1wb3J0IHsgZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlciB9IGZyb20gJy4uL3V0aWxzLWhvaXN0L2JhZ2dhZ2UuanMnO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRyYWNlIHByb3BhZ2F0aW9uIGRhdGEgZnJvbSB0aGUgY3VycmVudCBzcGFuIG9yIGZyb20gdGhlIGNsaWVudCdzIHNjb3BlICh2aWEgdHJhbnNhY3Rpb24gb3IgcHJvcGFnYXRpb25cbiAqIGNvbnRleHQpIGFuZCBzZXJpYWxpemVzIGl0IHRvIGBzZW50cnktdHJhY2VgIGFuZCBgYmFnZ2FnZWAgdmFsdWVzIHRvIHN0cmluZ3MuIFRoZXNlIHZhbHVlcyBjYW4gYmUgdXNlZCB0byBwcm9wYWdhdGVcbiAqIGEgdHJhY2UgdmlhIG91ciB0cmFjaW5nIEh0dHAgaGVhZGVycyBvciBIdG1sIGA8bWV0YT5gIHRhZ3MuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhbHNvIGFwcGxpZXMgc29tZSB2YWxpZGF0aW9uIHRvIHRoZSBnZW5lcmF0ZWQgc2VudHJ5LXRyYWNlIGFuZCBiYWdnYWdlIHZhbHVlcyB0byBlbnN1cmUgdGhhdFxuICogb25seSB2YWxpZCBzdHJpbmdzIGFyZSByZXR1cm5lZC5cbiAqXG4gKiBAcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHJhY2luZyBkYXRhIHZhbHVlcy4gVGhlIG9iamVjdCBrZXlzIGFyZSB0aGUgbmFtZSBvZiB0aGUgdHJhY2luZyBrZXkgdG8gYmUgdXNlZCBhcyBoZWFkZXJcbiAqIG9yIG1ldGEgdGFnIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGdldFRyYWNlRGF0YShvcHRpb25zID0ge30pIHtcbiAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gIGlmICghaXNFbmFibGVkKCkgfHwgIWNsaWVudCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGNhcnJpZXIgPSBnZXRNYWluQ2FycmllcigpO1xuICBjb25zdCBhY3MgPSBnZXRBc3luY0NvbnRleHRTdHJhdGVneShjYXJyaWVyKTtcbiAgaWYgKGFjcy5nZXRUcmFjZURhdGEpIHtcbiAgICByZXR1cm4gYWNzLmdldFRyYWNlRGF0YShvcHRpb25zKTtcbiAgfVxuXG4gIGNvbnN0IHNjb3BlID0gZ2V0Q3VycmVudFNjb3BlKCk7XG4gIGNvbnN0IHNwYW4gPSBvcHRpb25zLnNwYW4gfHwgZ2V0QWN0aXZlU3BhbigpO1xuICBjb25zdCBzZW50cnlUcmFjZSA9IHNwYW4gPyBzcGFuVG9UcmFjZUhlYWRlcihzcGFuKSA6IHNjb3BlVG9UcmFjZUhlYWRlcihzY29wZSk7XG4gIGNvbnN0IGRzYyA9IHNwYW4gPyBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4oc3BhbikgOiBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNjb3BlKGNsaWVudCwgc2NvcGUpO1xuICBjb25zdCBiYWdnYWdlID0gZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlcihkc2MpO1xuXG4gIGNvbnN0IGlzVmFsaWRTZW50cnlUcmFjZUhlYWRlciA9IFRSQUNFUEFSRU5UX1JFR0VYUC50ZXN0KHNlbnRyeVRyYWNlKTtcbiAgaWYgKCFpc1ZhbGlkU2VudHJ5VHJhY2VIZWFkZXIpIHtcbiAgICBsb2dnZXIud2FybignSW52YWxpZCBzZW50cnktdHJhY2UgZGF0YS4gQ2Fubm90IGdlbmVyYXRlIHRyYWNlIGRhdGEnKTtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICByZXR1cm4ge1xuICAgICdzZW50cnktdHJhY2UnOiBzZW50cnlUcmFjZSxcbiAgICBiYWdnYWdlLFxuICB9O1xufVxuXG4vKipcbiAqIEdldCBhIHNlbnRyeS10cmFjZSBoZWFkZXIgdmFsdWUgZm9yIHRoZSBnaXZlbiBzY29wZS5cbiAqL1xuZnVuY3Rpb24gc2NvcGVUb1RyYWNlSGVhZGVyKHNjb3BlKSB7XG4gIGNvbnN0IHsgdHJhY2VJZCwgc2FtcGxlZCwgcHJvcGFnYXRpb25TcGFuSWQgfSA9IHNjb3BlLmdldFByb3BhZ2F0aW9uQ29udGV4dCgpO1xuICByZXR1cm4gZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcih0cmFjZUlkLCBwcm9wYWdhdGlvblNwYW5JZCwgc2FtcGxlZCk7XG59XG5cbmV4cG9ydCB7IGdldFRyYWNlRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2VEYXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/traceData.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/utils/transactionEvent.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/utils/transactionEvent.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertSpanJsonToTransactionEvent: () => (/* binding */ convertSpanJsonToTransactionEvent),\n/* harmony export */   convertTransactionEventToSpanJson: () => (/* binding */ convertTransactionEventToSpanJson)\n/* harmony export */ });\n/* harmony import */ var _semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../semanticAttributes.js */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n\n\n/**\n * Converts a transaction event to a span JSON object.\n */\nfunction convertTransactionEventToSpanJson(event) {\n  const { trace_id, parent_span_id, span_id, status, origin, data, op } = event.contexts?.trace ?? {};\n\n  return {\n    data: data ?? {},\n    description: event.transaction,\n    op,\n    parent_span_id,\n    span_id: span_id ?? '',\n    start_timestamp: event.start_timestamp ?? 0,\n    status,\n    timestamp: event.timestamp,\n    trace_id: trace_id ?? '',\n    origin,\n    profile_id: data?.[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_PROFILE_ID] ,\n    exclusive_time: data?.[_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] ,\n    measurements: event.measurements,\n    is_segment: true,\n  };\n}\n\n/**\n * Converts a span JSON object to a transaction event.\n */\nfunction convertSpanJsonToTransactionEvent(span) {\n  return {\n    type: 'transaction',\n    timestamp: span.timestamp,\n    start_timestamp: span.start_timestamp,\n    transaction: span.description,\n    contexts: {\n      trace: {\n        trace_id: span.trace_id,\n        span_id: span.span_id,\n        parent_span_id: span.parent_span_id,\n        op: span.op,\n        status: span.status,\n        origin: span.origin,\n        data: {\n          ...span.data,\n          ...(span.profile_id && { [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_PROFILE_ID]: span.profile_id }),\n          ...(span.exclusive_time && { [_semanticAttributes_js__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: span.exclusive_time }),\n        },\n      },\n    },\n    measurements: span.measurements,\n  };\n}\n\n\n//# sourceMappingURL=transactionEvent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2VzbS91dGlscy90cmFuc2FjdGlvbkV2ZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0Rzs7QUFFNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDhEQUE4RDs7QUFFeEU7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlGQUE2QjtBQUNwRCwyQkFBMkIscUZBQWlDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLENBQUMsaUZBQTZCLG9CQUFvQjtBQUNyRix1Q0FBdUMsQ0FBQyxxRkFBaUMsd0JBQXdCO0FBQ2pHLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFZ0Y7QUFDaEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9lc20vdXRpbHMvdHJhbnNhY3Rpb25FdmVudC5qcz9lZDdiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNFTUFOVElDX0FUVFJJQlVURV9FWENMVVNJVkVfVElNRSwgU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQgfSBmcm9tICcuLi9zZW1hbnRpY0F0dHJpYnV0ZXMuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgdHJhbnNhY3Rpb24gZXZlbnQgdG8gYSBzcGFuIEpTT04gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjb252ZXJ0VHJhbnNhY3Rpb25FdmVudFRvU3Bhbkpzb24oZXZlbnQpIHtcbiAgY29uc3QgeyB0cmFjZV9pZCwgcGFyZW50X3NwYW5faWQsIHNwYW5faWQsIHN0YXR1cywgb3JpZ2luLCBkYXRhLCBvcCB9ID0gZXZlbnQuY29udGV4dHM/LnRyYWNlID8/IHt9O1xuXG4gIHJldHVybiB7XG4gICAgZGF0YTogZGF0YSA/PyB7fSxcbiAgICBkZXNjcmlwdGlvbjogZXZlbnQudHJhbnNhY3Rpb24sXG4gICAgb3AsXG4gICAgcGFyZW50X3NwYW5faWQsXG4gICAgc3Bhbl9pZDogc3Bhbl9pZCA/PyAnJyxcbiAgICBzdGFydF90aW1lc3RhbXA6IGV2ZW50LnN0YXJ0X3RpbWVzdGFtcCA/PyAwLFxuICAgIHN0YXR1cyxcbiAgICB0aW1lc3RhbXA6IGV2ZW50LnRpbWVzdGFtcCxcbiAgICB0cmFjZV9pZDogdHJhY2VfaWQgPz8gJycsXG4gICAgb3JpZ2luLFxuICAgIHByb2ZpbGVfaWQ6IGRhdGE/LltTRU1BTlRJQ19BVFRSSUJVVEVfUFJPRklMRV9JRF0gLFxuICAgIGV4Y2x1c2l2ZV90aW1lOiBkYXRhPy5bU0VNQU5USUNfQVRUUklCVVRFX0VYQ0xVU0lWRV9USU1FXSAsXG4gICAgbWVhc3VyZW1lbnRzOiBldmVudC5tZWFzdXJlbWVudHMsXG4gICAgaXNfc2VnbWVudDogdHJ1ZSxcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHNwYW4gSlNPTiBvYmplY3QgdG8gYSB0cmFuc2FjdGlvbiBldmVudC5cbiAqL1xuZnVuY3Rpb24gY29udmVydFNwYW5Kc29uVG9UcmFuc2FjdGlvbkV2ZW50KHNwYW4pIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAndHJhbnNhY3Rpb24nLFxuICAgIHRpbWVzdGFtcDogc3Bhbi50aW1lc3RhbXAsXG4gICAgc3RhcnRfdGltZXN0YW1wOiBzcGFuLnN0YXJ0X3RpbWVzdGFtcCxcbiAgICB0cmFuc2FjdGlvbjogc3Bhbi5kZXNjcmlwdGlvbixcbiAgICBjb250ZXh0czoge1xuICAgICAgdHJhY2U6IHtcbiAgICAgICAgdHJhY2VfaWQ6IHNwYW4udHJhY2VfaWQsXG4gICAgICAgIHNwYW5faWQ6IHNwYW4uc3Bhbl9pZCxcbiAgICAgICAgcGFyZW50X3NwYW5faWQ6IHNwYW4ucGFyZW50X3NwYW5faWQsXG4gICAgICAgIG9wOiBzcGFuLm9wLFxuICAgICAgICBzdGF0dXM6IHNwYW4uc3RhdHVzLFxuICAgICAgICBvcmlnaW46IHNwYW4ub3JpZ2luLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgLi4uc3Bhbi5kYXRhLFxuICAgICAgICAgIC4uLihzcGFuLnByb2ZpbGVfaWQgJiYgeyBbU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSURdOiBzcGFuLnByb2ZpbGVfaWQgfSksXG4gICAgICAgICAgLi4uKHNwYW4uZXhjbHVzaXZlX3RpbWUgJiYgeyBbU0VNQU5USUNfQVRUUklCVVRFX0VYQ0xVU0lWRV9USU1FXTogc3Bhbi5leGNsdXNpdmVfdGltZSB9KSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBtZWFzdXJlbWVudHM6IHNwYW4ubWVhc3VyZW1lbnRzLFxuICB9O1xufVxuXG5leHBvcnQgeyBjb252ZXJ0U3Bhbkpzb25Ub1RyYW5zYWN0aW9uRXZlbnQsIGNvbnZlcnRUcmFuc2FjdGlvbkV2ZW50VG9TcGFuSnNvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNhY3Rpb25FdmVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/utils/transactionEvent.js\n");

/***/ }),

/***/ "./node_modules/@sentry/core/build/esm/vendor/getIpAddress.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/esm/vendor/getIpAddress.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getClientIPAddress: () => (/* binding */ getClientIPAddress),\n/* harmony export */   ipHeaderNames: () => (/* binding */ ipHeaderNames)\n/* harmony export */ });\n// Vendored / modified from @sergiodxa/remix-utils\n\n// https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts\n// MIT License\n\n// Copyright (c) 2021 Sergio Xalambrí\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// The headers to check, in priority order\nconst ipHeaderNames = [\n  'X-Client-IP',\n  'X-Forwarded-For',\n  'Fly-Client-IP',\n  'CF-Connecting-IP',\n  'Fastly-Client-Ip',\n  'True-Client-Ip',\n  'X-Real-IP',\n  'X-Cluster-Client-IP',\n  'X-Forwarded',\n  'Forwarded-For',\n  'Forwarded',\n  'X-Vercel-Forwarded-For',\n];\n\n/**\n * Get the IP address of the client sending a request.\n *\n * It receives a Request headers object and use it to get the\n * IP address from one of the following headers in order.\n *\n * If the IP address is valid, it will be returned. Otherwise, null will be\n * returned.\n *\n * If the header values contains more than one IP address, the first valid one\n * will be returned.\n */\nfunction getClientIPAddress(headers) {\n  // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header\n  // can take\n  const headerValues = ipHeaderNames.map((headerName) => {\n    const rawValue = headers[headerName];\n    const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;\n\n    if (headerName === 'Forwarded') {\n      return parseForwardedHeader(value);\n    }\n\n    return value?.split(',').map((v) => v.trim());\n  });\n\n  // Flatten the array and filter out any falsy entries\n  const flattenedHeaderValues = headerValues.reduce((acc, val) => {\n    if (!val) {\n      return acc;\n    }\n\n    return acc.concat(val);\n  }, []);\n\n  // Find the first value which is a valid IP address, if any\n  const ipAddress = flattenedHeaderValues.find(ip => ip !== null && isIP(ip));\n\n  return ipAddress || null;\n}\n\nfunction parseForwardedHeader(value) {\n  if (!value) {\n    return null;\n  }\n\n  for (const part of value.split(';')) {\n    if (part.startsWith('for=')) {\n      return part.slice(4);\n    }\n  }\n\n  return null;\n}\n\n//\n/**\n * Custom method instead of importing this from `net` package, as this only exists in node\n * Accepts:\n * 127.0.0.1\n * 192.168.1.1\n * 192.168.1.255\n * 255.255.255.255\n * 10.1.1.1\n * 0.0.0.0\n * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5\n *\n * Rejects:\n * 1.1.1.01\n * 30.168.1.255.1\n * 127.1\n * 192.168.1.256\n * -1.2.3.4\n * 1.1.1.1.\n * 3...3\n * 192.168.1.099\n */\nfunction isIP(str) {\n  const regex =\n    /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;\n  return regex.test(str);\n}\n\n\n//# sourceMappingURL=getIpAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/core/build/esm/vendor/getIpAddress.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/captureRequestError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/captureRequestError.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureRequestError: () => (/* binding */ captureRequestError)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/request.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/responseEnd.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js\");\n\n\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nfunction captureRequestError(error, request, errorContext) {\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.withScope)(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.headersToDict)(request.headers),\n        method: request.method,\n      } ,\n    });\n\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType,\n    });\n\n    scope.setTransactionName(errorContext.routePath);\n\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.captureException)(error, {\n      mechanism: {\n        handled: false,\n      },\n    });\n\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.vercelWaitUntil)((0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_4__.flushSafelyWithTimeout)());\n  });\n}\n\n\n//# sourceMappingURL=captureRequestError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9jYXB0dXJlUmVxdWVzdEVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEyRjtBQUMzQjs7QUFFaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLHVEQUFTO0FBQ1g7QUFDQTtBQUNBLGlCQUFpQiwyREFBYTtBQUM5QjtBQUNBLFFBQVE7QUFDUixLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBLElBQUksOERBQWdCO0FBQ3BCO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTCxJQUFJLDZEQUFlLENBQUMsNkVBQXNCO0FBQzFDLEdBQUc7QUFDSDs7QUFFK0I7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9jb21tb24vY2FwdHVyZVJlcXVlc3RFcnJvci5qcz8wZWMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdpdGhTY29wZSwgaGVhZGVyc1RvRGljdCwgY2FwdHVyZUV4Y2VwdGlvbiwgdmVyY2VsV2FpdFVudGlsIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGZsdXNoU2FmZWx5V2l0aFRpbWVvdXQgfSBmcm9tICcuL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJztcblxuLyoqXG4gKiBSZXBvcnRzIGVycm9ycyBwYXNzZWQgdG8gdGhlIHRoZSBOZXh0LmpzIGBvblJlcXVlc3RFcnJvcmAgaW5zdHJ1bWVudGF0aW9uIGhvb2suXG4gKi9cbmZ1bmN0aW9uIGNhcHR1cmVSZXF1ZXN0RXJyb3IoZXJyb3IsIHJlcXVlc3QsIGVycm9yQ29udGV4dCkge1xuICB3aXRoU2NvcGUoc2NvcGUgPT4ge1xuICAgIHNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICBub3JtYWxpemVkUmVxdWVzdDoge1xuICAgICAgICBoZWFkZXJzOiBoZWFkZXJzVG9EaWN0KHJlcXVlc3QuaGVhZGVycyksXG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICB9ICxcbiAgICB9KTtcblxuICAgIHNjb3BlLnNldENvbnRleHQoJ25leHRqcycsIHtcbiAgICAgIHJlcXVlc3RfcGF0aDogcmVxdWVzdC5wYXRoLFxuICAgICAgcm91dGVyX2tpbmQ6IGVycm9yQ29udGV4dC5yb3V0ZXJLaW5kLFxuICAgICAgcm91dGVyX3BhdGg6IGVycm9yQ29udGV4dC5yb3V0ZVBhdGgsXG4gICAgICByb3V0ZV90eXBlOiBlcnJvckNvbnRleHQucm91dGVUeXBlLFxuICAgIH0pO1xuXG4gICAgc2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKGVycm9yQ29udGV4dC5yb3V0ZVBhdGgpO1xuXG4gICAgY2FwdHVyZUV4Y2VwdGlvbihlcnJvciwge1xuICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHZlcmNlbFdhaXRVbnRpbChmbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgY2FwdHVyZVJlcXVlc3RFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FwdHVyZVJlcXVlc3RFcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/captureRequestError.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/debug-build.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/debug-build.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEBUG_BUILD: () => (/* binding */ DEBUG_BUILD)\n/* harmony export */ });\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\n\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUF1QyxJQUFJLEtBQWdCOztBQUV6RDtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9kZWJ1Zy1idWlsZC5qcz83OTY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydCB7IERFQlVHX0JVSUxEIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/debug-build.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/nextNavigationErrorUtils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/nextNavigationErrorUtils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNotFoundNavigationError: () => (/* binding */ isNotFoundNavigationError),\n/* harmony export */   isRedirectNavigationError: () => (/* binding */ isRedirectNavigationError)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/is.js\");\n\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */\nfunction isNotFoundNavigationError(subject) {\n  return (\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.isError)(subject) &&\n    ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(\n      (subject ).digest ,\n    )\n  );\n}\n\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */\nfunction isRedirectNavigationError(subject) {\n  return (\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.isError)(subject) &&\n    typeof (subject ).digest === 'string' &&\n    (subject ).digest.startsWith('NEXT_REDIRECT;') // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n  );\n}\n\n\n//# sourceMappingURL=nextNavigationErrorUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHFEQUFPO0FBQ1gsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkscURBQU87QUFDWDtBQUNBLGdEQUFnRCxrREFBa0Q7QUFDbEc7QUFDQTs7QUFFZ0U7QUFDaEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9jb21tb24vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzP2JjZjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNFcnJvciB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGlucHV0IGlzIGEgTmV4dC5qcyBub3QtZm91bmQgZXJyb3IuXG4gKiBodHRwczovL2JldGEubmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2Uvbm90Zm91bmQjbm90Zm91bmRcbiAqL1xuZnVuY3Rpb24gaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvcihzdWJqZWN0KSB7XG4gIHJldHVybiAoXG4gICAgaXNFcnJvcihzdWJqZWN0KSAmJlxuICAgIFsnTkVYVF9OT1RfRk9VTkQnLCAnTkVYVF9IVFRQX0VSUk9SX0ZBTExCQUNLOzQwNCddLmluY2x1ZGVzKFxuICAgICAgKHN1YmplY3QgKS5kaWdlc3QgLFxuICAgIClcbiAgKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgaW5wdXQgaXMgYSBOZXh0LmpzIHJlZGlyZWN0IGVycm9yLlxuICogaHR0cHM6Ly9iZXRhLm5leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL3JlZGlyZWN0I3JlZGlyZWN0XG4gKi9cbmZ1bmN0aW9uIGlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3Ioc3ViamVjdCkge1xuICByZXR1cm4gKFxuICAgIGlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICB0eXBlb2YgKHN1YmplY3QgKS5kaWdlc3QgPT09ICdzdHJpbmcnICYmXG4gICAgKHN1YmplY3QgKS5kaWdlc3Quc3RhcnRzV2l0aCgnTkVYVF9SRURJUkVDVDsnKSAvLyBhIHJlZGlyZWN0IGRpZ2VzdCBsb29rcyBsaWtlIFwiTkVYVF9SRURJUkVDVDtbcmVkaXJlY3QgcGF0aF1cIlxuICApO1xufVxuXG5leHBvcnQgeyBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yLCBpc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXh0TmF2aWdhdGlvbkVycm9yVXRpbHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/nextNavigationErrorUtils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/_error.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/_error.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureUnderscoreErrorException: () => (/* binding */ captureUnderscoreErrorException)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/request.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/responseEnd.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js\");\n\n\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const { req, res, err } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = res?.statusCode || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.withScope)(scope => {\n    if (req) {\n      const normalizedRequest = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.httpRequestToRequestData)(req);\n      scope.setSDKProcessingMetadata({ normalizedRequest });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.captureException)(err || `_error.js called with falsy error (${err})`, {\n      mechanism: {\n        type: 'instrument',\n        handled: false,\n        data: {\n          function: '_error.getInitialProps',\n        },\n      },\n    });\n  });\n\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.vercelWaitUntil)((0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_4__.flushSafelyWithTimeout)());\n}\n\n\n//# sourceMappingURL=_error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL19lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBc0c7QUFDckM7O0FBRWpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZ0JBQWdCOztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEVBQUUsdURBQVM7QUFDWDtBQUNBLGdDQUFnQyxzRUFBd0I7QUFDeEQsdUNBQXVDLG1CQUFtQjtBQUMxRDs7QUFFQTtBQUNBO0FBQ0EsSUFBSSw4REFBZ0IsOENBQThDLElBQUk7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7O0FBRUgsRUFBRSw2REFBZSxDQUFDLDZFQUFzQjtBQUN4Qzs7QUFFMkM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi9fZXJyb3IuanM/ODE0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3aXRoU2NvcGUsIGh0dHBSZXF1ZXN0VG9SZXF1ZXN0RGF0YSwgY2FwdHVyZUV4Y2VwdGlvbiwgdmVyY2VsV2FpdFVudGlsIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGZsdXNoU2FmZWx5V2l0aFRpbWVvdXQgfSBmcm9tICcuLi91dGlscy9yZXNwb25zZUVuZC5qcyc7XG5cbi8qKlxuICogQ2FwdHVyZSB0aGUgZXhjZXB0aW9uIHBhc3NlZCBieSBuZXh0anMgdG8gdGhlIGBfZXJyb3JgIHBhZ2UsIGFkZGluZyBjb250ZXh0IGRhdGEgYXMgYXBwcm9wcmlhdGUuXG4gKlxuICogQHBhcmFtIGNvbnRleHRPclByb3BzIFRoZSBkYXRhIHBhc3NlZCB0byBlaXRoZXIgYGdldEluaXRpYWxQcm9wc2Agb3IgYHJlbmRlcmAgYnkgbmV4dGpzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24oY29udGV4dE9yUHJvcHMpIHtcbiAgY29uc3QgeyByZXEsIHJlcywgZXJyIH0gPSBjb250ZXh0T3JQcm9wcztcblxuICAvLyA0MDRzIChhbmQgb3RoZXIgNDAwLXkgZnJpZW5kcykgY2FuIHRyaWdnZXIgYF9lcnJvcmAsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIHNlbmQgdGhlbSB0byBTZW50cnlcbiAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlcz8uc3RhdHVzQ29kZSB8fCBjb250ZXh0T3JQcm9wcy5zdGF0dXNDb2RlO1xuICBpZiAoc3RhdHVzQ29kZSAmJiBzdGF0dXNDb2RlIDwgNTAwKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgLy8gSW4gcHJldmlvdXMgdmVyc2lvbnMgb2YgdGhlIHN1Z2dlc3RlZCBgX2Vycm9yLmpzYCBwYWdlIGluIHdoaWNoIHRoaXMgZnVuY3Rpb24gaXMgbWVhbnQgdG8gYmUgdXNlZCwgdGhlcmUgd2FzIGFcbiAgLy8gd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2lzc3Vlcy84NTkyIHdoaWNoIGludm9sdmVkIGFuIGV4dHJhIGNhbGwgdG8gdGhpcyBmdW5jdGlvbiwgaW4gdGhlXG4gIC8vIGN1c3RvbSBlcnJvciBjb21wb25lbnQncyBgcmVuZGVyYCBtZXRob2QsIGp1c3QgaW4gY2FzZSBpdCBoYWRuJ3QgYmVlbiBjYWxsZWQgYnkgYGdldEluaXRpYWxQcm9wc2AuIE5vdyB0aGF0IHRoYXRcbiAgLy8gaXNzdWUgaGFzIGJlZW4gZml4ZWQsIHRoZSBzZWNvbmQgY2FsbCBpcyB1bm5lY2Vzc2FyeSwgYnV0IHNpbmNlIGl0IGxpdmVzIGluIHVzZXIgY29kZSByYXRoZXIgdGhhbiBvdXIgY29kZSwgdXNlcnNcbiAgLy8gaGF2ZSB0byBiZSB0aGUgb25lcyB0byBnZXQgcmlkIG9mIGl0LCBhbmQgZ3VhcmFuZXRlZWRseSwgbm90IGFsbCBvZiB0aGVtIHdpbGwuIFNvLCByYXRoZXIgdGhhbiBjYXB0dXJlIHRoZSBlcnJvclxuICAvLyB0d2ljZSwgd2UganVzdCBiYWlsIGlmIHdlIHNlbnNlIHdlJ3JlIGluIHRoYXQgbm93LWV4dHJhbmVvdXMgc2Vjb25kIGNhbGwuIChXZSBjYW4gdGVsbCB3aGljaCBmdW5jdGlvbiB3ZSdyZSBpblxuICAvLyBiZWNhdXNlIE5leHRqcyBwYXNzZXMgYHBhdGhuYW1lYCB0byBgZ2V0SW5pdGlhbFByb3BzYCBidXQgbm90IHRvIGByZW5kZXJgLilcbiAgaWYgKCFjb250ZXh0T3JQcm9wcy5wYXRobmFtZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIHdpdGhTY29wZShzY29wZSA9PiB7XG4gICAgaWYgKHJlcSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFJlcXVlc3QgPSBodHRwUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxKTtcbiAgICAgIHNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7IG5vcm1hbGl6ZWRSZXF1ZXN0IH0pO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXJkLXBhcnR5IGxpYnJhcmllcyAob3IgdXNlcnMgdGhlbXNlbHZlcykgdGhyb3cgc29tZXRoaW5nIGZhbHN5LCB3ZSB3YW50IHRvIGNhcHR1cmUgaXQgYXMgYSBtZXNzYWdlICh3aGljaFxuICAgIC8vIGlzIHdoYXQgcGFzc2luZyBhIHN0cmluZyB0byBgY2FwdHVyZUV4Y2VwdGlvbmAgd2lsbCB3aW5kIHVwIGRvaW5nKVxuICAgIGNhcHR1cmVFeGNlcHRpb24oZXJyIHx8IGBfZXJyb3IuanMgY2FsbGVkIHdpdGggZmFsc3kgZXJyb3IgKCR7ZXJyfSlgLCB7XG4gICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGZ1bmN0aW9uOiAnX2Vycm9yLmdldEluaXRpYWxQcm9wcycsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICB2ZXJjZWxXYWl0VW50aWwoZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbn1cblxuZXhwb3J0IHsgY2FwdHVyZVVuZGVyc2NvcmVFcnJvckV4Y2VwdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2Vycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/_error.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapApiHandlerWithSentryVercelCrons: () => (/* binding */ wrapApiHandlerWithSentryVercelCrons)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n\n\n/**\n * Wraps a function with Sentry crons instrumentation by automatically sending check-ins for the given Vercel crons config.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapApiHandlerWithSentryVercelCrons(\n  handler,\n  vercelCronsConfig,\n) {\n  return new Proxy(handler, {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    apply: (originalFunction, thisArg, args) => {\n      if (!args?.[0]) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const [req] = args ;\n\n      let maybePromiseResult;\n      const cronsKey = 'nextUrl' in req ? req.nextUrl.pathname : req.url;\n      const userAgentHeader = 'nextUrl' in req ? req.headers.get('user-agent') : req.headers['user-agent'];\n\n      if (\n        !vercelCronsConfig || // do nothing if vercel crons config is missing\n        !userAgentHeader?.includes('vercel-cron') // do nothing if endpoint is not called from vercel crons\n      ) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const vercelCron = vercelCronsConfig.find(vercelCron => vercelCron.path === cronsKey);\n\n      if (!vercelCron?.path || !vercelCron.schedule) {\n        return originalFunction.apply(thisArg, args);\n      }\n\n      const monitorSlug = vercelCron.path;\n\n      const checkInId = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.captureCheckIn)(\n        {\n          monitorSlug,\n          status: 'in_progress',\n        },\n        {\n          maxRuntime: 60 * 12, // (minutes) so 12 hours - just a very high arbitrary number since we don't know the actual duration of the users cron job\n          schedule: {\n            type: 'crontab',\n            value: vercelCron.schedule,\n          },\n        },\n      );\n\n      const startTime = Date.now() / 1000;\n\n      const handleErrorCase = () => {\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.captureCheckIn)({\n          checkInId,\n          monitorSlug,\n          status: 'error',\n          duration: Date.now() / 1000 - startTime,\n        });\n      };\n\n      try {\n        maybePromiseResult = originalFunction.apply(thisArg, args);\n      } catch (e) {\n        handleErrorCase();\n        throw e;\n      }\n\n      if (typeof maybePromiseResult === 'object' && maybePromiseResult !== null && 'then' in maybePromiseResult) {\n        Promise.resolve(maybePromiseResult).then(\n          () => {\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.captureCheckIn)({\n              checkInId,\n              monitorSlug,\n              status: 'ok',\n              duration: Date.now() / 1000 - startTime,\n            });\n          },\n          () => {\n            handleErrorCase();\n          },\n        );\n\n        // It is very important that we return the original promise here, because Next.js attaches various properties\n        // to that promise and will throw if they are not on the returned value.\n        return maybePromiseResult;\n      } else {\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.captureCheckIn)({\n          checkInId,\n          monitorSlug,\n          status: 'ok',\n          duration: Date.now() / 1000 - startTime,\n        });\n        return maybePromiseResult;\n      }\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapApiHandlerWithSentryVercelCrons.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLHdCQUF3Qiw0REFBYztBQUN0QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQSxRQUFRLDREQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNERBQWM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLFFBQVEsNERBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRStDO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9lc20vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnMuanM/MjYwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYXB0dXJlQ2hlY2tJbiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5cbi8qKlxuICogV3JhcHMgYSBmdW5jdGlvbiB3aXRoIFNlbnRyeSBjcm9ucyBpbnN0cnVtZW50YXRpb24gYnkgYXV0b21hdGljYWxseSBzZW5kaW5nIGNoZWNrLWlucyBmb3IgdGhlIGdpdmVuIFZlcmNlbCBjcm9ucyBjb25maWcuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnlWZXJjZWxDcm9ucyhcbiAgaGFuZGxlcixcbiAgdmVyY2VsQ3JvbnNDb25maWcsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShoYW5kbGVyLCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBhcHBseTogKG9yaWdpbmFsRnVuY3Rpb24sIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmICghYXJncz8uWzBdKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbcmVxXSA9IGFyZ3MgO1xuXG4gICAgICBsZXQgbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgY29uc3QgY3JvbnNLZXkgPSAnbmV4dFVybCcgaW4gcmVxID8gcmVxLm5leHRVcmwucGF0aG5hbWUgOiByZXEudXJsO1xuICAgICAgY29uc3QgdXNlckFnZW50SGVhZGVyID0gJ25leHRVcmwnIGluIHJlcSA/IHJlcS5oZWFkZXJzLmdldCgndXNlci1hZ2VudCcpIDogcmVxLmhlYWRlcnNbJ3VzZXItYWdlbnQnXTtcblxuICAgICAgaWYgKFxuICAgICAgICAhdmVyY2VsQ3JvbnNDb25maWcgfHwgLy8gZG8gbm90aGluZyBpZiB2ZXJjZWwgY3JvbnMgY29uZmlnIGlzIG1pc3NpbmdcbiAgICAgICAgIXVzZXJBZ2VudEhlYWRlcj8uaW5jbHVkZXMoJ3ZlcmNlbC1jcm9uJykgLy8gZG8gbm90aGluZyBpZiBlbmRwb2ludCBpcyBub3QgY2FsbGVkIGZyb20gdmVyY2VsIGNyb25zXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZlcmNlbENyb24gPSB2ZXJjZWxDcm9uc0NvbmZpZy5maW5kKHZlcmNlbENyb24gPT4gdmVyY2VsQ3Jvbi5wYXRoID09PSBjcm9uc0tleSk7XG5cbiAgICAgIGlmICghdmVyY2VsQ3Jvbj8ucGF0aCB8fCAhdmVyY2VsQ3Jvbi5zY2hlZHVsZSkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSB2ZXJjZWxDcm9uLnBhdGg7XG5cbiAgICAgIGNvbnN0IGNoZWNrSW5JZCA9IGNhcHR1cmVDaGVja0luKFxuICAgICAgICB7XG4gICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbWF4UnVudGltZTogNjAgKiAxMiwgLy8gKG1pbnV0ZXMpIHNvIDEyIGhvdXJzIC0ganVzdCBhIHZlcnkgaGlnaCBhcmJpdHJhcnkgbnVtYmVyIHNpbmNlIHdlIGRvbid0IGtub3cgdGhlIGFjdHVhbCBkdXJhdGlvbiBvZiB0aGUgdXNlcnMgY3JvbiBqb2JcbiAgICAgICAgICBzY2hlZHVsZToge1xuICAgICAgICAgICAgdHlwZTogJ2Nyb250YWInLFxuICAgICAgICAgICAgdmFsdWU6IHZlcmNlbENyb24uc2NoZWR1bGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCkgLyAxMDAwO1xuXG4gICAgICBjb25zdCBoYW5kbGVFcnJvckNhc2UgPSAoKSA9PiB7XG4gICAgICAgIGNhcHR1cmVDaGVja0luKHtcbiAgICAgICAgICBjaGVja0luSWQsXG4gICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgIGR1cmF0aW9uOiBEYXRlLm5vdygpIC8gMTAwMCAtIHN0YXJ0VGltZSxcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICB0cnkge1xuICAgICAgICBtYXliZVByb21pc2VSZXN1bHQgPSBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvckNhc2UoKTtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBtYXliZVByb21pc2VSZXN1bHQgPT09ICdvYmplY3QnICYmIG1heWJlUHJvbWlzZVJlc3VsdCAhPT0gbnVsbCAmJiAndGhlbicgaW4gbWF5YmVQcm9taXNlUmVzdWx0KSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZShtYXliZVByb21pc2VSZXN1bHQpLnRoZW4oXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgY2FwdHVyZUNoZWNrSW4oe1xuICAgICAgICAgICAgICBjaGVja0luSWQsXG4gICAgICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgICAgICBzdGF0dXM6ICdvaycsXG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBEYXRlLm5vdygpIC8gMTAwMCAtIHN0YXJ0VGltZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlRXJyb3JDYXNlKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBJdCBpcyB2ZXJ5IGltcG9ydGFudCB0aGF0IHdlIHJldHVybiB0aGUgb3JpZ2luYWwgcHJvbWlzZSBoZXJlLCBiZWNhdXNlIE5leHQuanMgYXR0YWNoZXMgdmFyaW91cyBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIHRvIHRoYXQgcHJvbWlzZSBhbmQgd2lsbCB0aHJvdyBpZiB0aGV5IGFyZSBub3Qgb24gdGhlIHJldHVybmVkIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlUmVzdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZUNoZWNrSW4oe1xuICAgICAgICAgIGNoZWNrSW5JZCxcbiAgICAgICAgICBtb25pdG9yU2x1ZyxcbiAgICAgICAgICBzdGF0dXM6ICdvaycsXG4gICAgICAgICAgZHVyYXRpb246IERhdGUubm93KCkgLyAxMDAwIC0gc3RhcnRUaW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZVJlc3VsdDtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0IHsgd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5VmVyY2VsQ3JvbnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeVZlcmNlbENyb25zLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapAppGetInitialPropsWithSentry: () => (/* binding */ wrapAppGetInitialPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isBuild.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/wrapperUtils.js\");\n\n\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapAppGetInitialPropsWithSentry(origAppGetInitialProps) {\n  return new Proxy(origAppGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context.ctx;\n\n      const errorWrappedAppGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withErrorInstrumentation)(wrappingTarget);\n\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withTracedServerSideDataFetcher)(errorWrappedAppGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_app',\n          requestedRouteName: context.ctx.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: appGetInitialProps,\n          sentryTrace,\n          baggage,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof appGetInitialProps === 'object' && appGetInitialProps !== null) {\n          // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n          // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n          // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n          // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n          if (!(appGetInitialProps ).pageProps) {\n            (appGetInitialProps ).pageProps = {};\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (appGetInitialProps ).pageProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (appGetInitialProps ).pageProps._sentryBaggage = baggage;\n          }\n        }\n\n        return appGetInitialProps;\n      } else {\n        return errorWrappedAppGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapAppGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUN1RDs7QUFFckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMERBQU87QUFDakI7QUFDQTs7QUFFQTtBQUNBLGNBQWMsV0FBVzs7QUFFekIsNkNBQTZDLGdGQUF3Qjs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx1RkFBK0I7QUFDckU7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFNEM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcz9jYmQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQnVpbGQgfSBmcm9tICcuLi91dGlscy9pc0J1aWxkLmpzJztcbmltcG9ydCB7IHdpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIsIHdpdGhFcnJvckluc3RydW1lbnRhdGlvbiB9IGZyb20gJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb24gaW5cbiAqIGEgY3VzdG9tIGFwcCAoXCJfYXBwLmpzXCIpLlxuICpcbiAqIEBwYXJhbSBvcmlnQXBwR2V0SW5pdGlhbFByb3BzIFRoZSB1c2VyJ3MgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkob3JpZ0FwcEdldEluaXRpYWxQcm9wcykge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdBcHBHZXRJbml0aWFsUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQuY3R4O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMgPSB3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuXG4gICAgICAvLyBHZW5lcmFsbHkgd2UgY2FuIGFzc3VtZSB0aGF0IGByZXFgIGFuZCBgcmVzYCBhcmUgYWx3YXlzIGRlZmluZWQgb24gdGhlIHNlcnZlcjpcbiAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvZGF0YS1mZXRjaGluZy9nZXQtaW5pdGlhbC1wcm9wcyNjb250ZXh0LW9iamVjdFxuICAgICAgLy8gVGhpcyBkb2VzIG5vdCBzZWVtIHRvIGJlIHRoZSBjYXNlIGluIGRldiBtb2RlLiBCZWNhdXNlIHdlIGhhdmUgbm8gY2xlYW4gd2F5IG9mIGFzc29jaWF0aW5nIHRoZSB0aGUgZGF0YSBmZXRjaGVyXG4gICAgICAvLyBzcGFuIHdpdGggZWFjaCBvdGhlciB3aGVuIHRoZXJlIGFyZSBubyByZXEgb3IgcmVzIG9iamVjdHMsIHdlIHNpbXBseSBkbyBub3QgdHJhY2UgdGhlbSBhdCBhbGwgaGVyZS5cbiAgICAgIGlmIChyZXEgJiYgcmVzKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkQXBwR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiAnL19hcHAnLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5jdHgucGF0aG5hbWUsXG4gICAgICAgICAgZGF0YUZldGNoaW5nTWV0aG9kTmFtZTogJ2dldEluaXRpYWxQcm9wcycsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBkYXRhOiBhcHBHZXRJbml0aWFsUHJvcHMsXG4gICAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICAgICAgYmFnZ2FnZSxcbiAgICAgICAgfVxuXG4gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcHBHZXRJbml0aWFsUHJvcHMgPT09ICdvYmplY3QnICYmIGFwcEdldEluaXRpYWxQcm9wcyAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFBlciBkZWZpbml0aW9uLCBgcGFnZVByb3BzYCBpcyBub3Qgb3B0aW9uYWwsIGhvd2V2ZXIgYW4gaW5jcmVhc2VkIGFtb3VudCBvZiB1c2VycyBkb2Vzbid0IHNlZW0gdG8gY2FsbFxuICAgICAgICAgIC8vIGBBcHAuZ2V0SW5pdGlhbFByb3BzKGFwcENvbnRleHQpYCBpbiB0aGVpciBjdXN0b20gYF9hcHBgIHBhZ2VzIHdoaWNoIGlzIHJlcXVpcmVkIGFzIHBlclxuICAgICAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FkdmFuY2VkLWZlYXR1cmVzL2N1c3RvbS1hcHAgLSByZXN1bHRpbmcgaW4gbWlzc2luZyBgcGFnZVByb3BzYC5cbiAgICAgICAgICAvLyBGb3IgdGhpcyByZWFzb24sIHdlIGp1c3QgaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGBwYWdlUHJvcHNgIGRvZXNuJ3QgZXhpc3QgZXhwbGljaXRseS5cbiAgICAgICAgICBpZiAoIShhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMpIHtcbiAgICAgICAgICAgIChhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMgPSB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgICAoYXBwR2V0SW5pdGlhbFByb3BzICkucGFnZVByb3BzLl9zZW50cnlUcmFjZURhdGEgPSBzZW50cnlUcmFjZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKGJhZ2dhZ2UpIHtcbiAgICAgICAgICAgIChhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcHBHZXRJbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkQXBwR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgeyB3cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapDocumentGetInitialPropsWithSentry: () => (/* binding */ wrapDocumentGetInitialPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isBuild.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/wrapperUtils.js\");\n\n\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapDocumentGetInitialPropsWithSentry(\n  origDocumentGetInitialProps,\n) {\n  return new Proxy(origDocumentGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withErrorInstrumentation)(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withTracedServerSideDataFetcher)(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_document',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const { data } = await tracedGetInitialProps.apply(thisArg, args);\n        return data;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapDocumentGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ3VEOztBQUVyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMERBQU87QUFDakI7QUFDQTs7QUFFQTtBQUNBLGNBQWMsV0FBVzs7QUFFekIsMENBQTBDLGdGQUF3QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHVGQUErQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVULGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVpRDtBQUNqRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanM/NmIwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0J1aWxkIH0gZnJvbSAnLi4vdXRpbHMvaXNCdWlsZC5qcyc7XG5pbXBvcnQgeyB3aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyLCB3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24gfSBmcm9tICcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uIGluXG4gKiBhIGN1c3RvbSBkb2N1bWVudCAoXCJfZG9jdW1lbnQuanNcIikuXG4gKlxuICogQHBhcmFtIG9yaWdEb2N1bWVudEdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdEb2N1bWVudEdldEluaXRpYWxQcm9wcyxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdEb2N1bWVudEdldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzID0gd2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMpIHtcbiAgICAgICAgY29uc3QgdHJhY2VkR2V0SW5pdGlhbFByb3BzID0gd2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6ICcvX2RvY3VtZW50JyxcbiAgICAgICAgICByZXF1ZXN0ZWRSb3V0ZU5hbWU6IGNvbnRleHQucGF0aG5hbWUsXG4gICAgICAgICAgZGF0YUZldGNoaW5nTWV0aG9kTmFtZTogJ2dldEluaXRpYWxQcm9wcycsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgdHJhY2VkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydCB7IHdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapErrorGetInitialPropsWithSentry: () => (/* binding */ wrapErrorGetInitialPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isBuild.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/wrapperUtils.js\");\n\n\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapErrorGetInitialPropsWithSentry(\n  origErrorGetInitialProps,\n) {\n  return new Proxy(origErrorGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withErrorInstrumentation)(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withTracedServerSideDataFetcher)(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_error',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: errorGetInitialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = await tracedGetInitialProps.apply(thisArg, args);\n\n        if (typeof errorGetInitialProps === 'object' && errorGetInitialProps !== null) {\n          if (sentryTrace) {\n            // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n            (errorGetInitialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (errorGetInitialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return errorGetInitialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapErrorGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQ3VEOztBQUVyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMERBQU87QUFDakI7QUFDQTs7QUFFQTtBQUNBLGNBQWMsV0FBVzs7QUFFekIsMENBQTBDLGdGQUF3QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHVGQUErQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUU4QztBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanM/ZmRlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0J1aWxkIH0gZnJvbSAnLi4vdXRpbHMvaXNCdWlsZC5qcyc7XG5pbXBvcnQgeyB3aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyLCB3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24gfSBmcm9tICcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uIGluXG4gKiBhIGN1c3RvbSBlcnJvciBwYWdlIChcIl9lcnJvci5qc1wiKS5cbiAqXG4gKiBAcGFyYW0gb3JpZ0Vycm9yR2V0SW5pdGlhbFByb3BzIFRoZSB1c2VyJ3MgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeShcbiAgb3JpZ0Vycm9yR2V0SW5pdGlhbFByb3BzLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0Vycm9yR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMgPSB3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogJy9fZXJyb3InLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGRhdGE6IGVycm9yR2V0SW5pdGlhbFByb3BzLFxuICAgICAgICAgIGJhZ2dhZ2UsXG4gICAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICAgIH1cblxuID0gYXdhaXQgdHJhY2VkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZXJyb3JHZXRJbml0aWFsUHJvcHMgPT09ICdvYmplY3QnICYmIGVycm9yR2V0SW5pdGlhbFByb3BzICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgICAoZXJyb3JHZXRJbml0aWFsUHJvcHMgKS5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgICAoZXJyb3JHZXRJbml0aWFsUHJvcHMgKS5fc2VudHJ5QmFnZ2FnZSA9IGJhZ2dhZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVycm9yR2V0SW5pdGlhbFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0IHsgd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapGetInitialPropsWithSentry: () => (/* binding */ wrapGetInitialPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isBuild.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/wrapperUtils.js\");\n\n\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetInitialPropsWithSentry(origGetInitialProps) {\n  return new Proxy(origGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withErrorInstrumentation)(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withTracedServerSideDataFetcher)(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: context.pathname,\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps',\n        });\n\n        const {\n          data: initialProps,\n          baggage,\n          sentryTrace,\n        }\n\n = (await tracedGetInitialProps.apply(thisArg, args)) ?? {}; // Next.js allows undefined to be returned from a getInitialPropsFunction.\n\n        if (typeof initialProps === 'object' && initialProps !== null) {\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            (initialProps )._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            (initialProps )._sentryBaggage = baggage;\n          }\n        }\n\n        return initialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapGetInitialPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUN1RDs7QUFFckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDBEQUFPO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFdBQVc7O0FBRXpCLDBDQUEwQyxnRkFBd0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx1RkFBK0I7QUFDckU7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZEQUE2RDs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUV5QztBQUN6QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzP2Y3N2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNCdWlsZCB9IGZyb20gJy4uL3V0aWxzL2lzQnVpbGQuanMnO1xuaW1wb3J0IHsgd2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlciwgd2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uIH0gZnJvbSAnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSBvcmlnR2V0SW5pdGlhbFByb3BzIFRoZSB1c2VyJ3MgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkob3JpZ0dldEluaXRpYWxQcm9wcykge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdHZXRJbml0aWFsUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyA9IHdpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICAvLyBHZW5lcmFsbHkgd2UgY2FuIGFzc3VtZSB0aGF0IGByZXFgIGFuZCBgcmVzYCBhcmUgYWx3YXlzIGRlZmluZWQgb24gdGhlIHNlcnZlcjpcbiAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvZGF0YS1mZXRjaGluZy9nZXQtaW5pdGlhbC1wcm9wcyNjb250ZXh0LW9iamVjdFxuICAgICAgLy8gVGhpcyBkb2VzIG5vdCBzZWVtIHRvIGJlIHRoZSBjYXNlIGluIGRldiBtb2RlLiBCZWNhdXNlIHdlIGhhdmUgbm8gY2xlYW4gd2F5IG9mIGFzc29jaWF0aW5nIHRoZSB0aGUgZGF0YSBmZXRjaGVyXG4gICAgICAvLyBzcGFuIHdpdGggZWFjaCBvdGhlciB3aGVuIHRoZXJlIGFyZSBubyByZXEgb3IgcmVzIG9iamVjdHMsIHdlIHNpbXBseSBkbyBub3QgdHJhY2UgdGhlbSBhdCBhbGwgaGVyZS5cbiAgICAgIGlmIChyZXEgJiYgcmVzKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGRhdGE6IGluaXRpYWxQcm9wcyxcbiAgICAgICAgICBiYWdnYWdlLFxuICAgICAgICAgIHNlbnRyeVRyYWNlLFxuICAgICAgICB9XG5cbiA9IChhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncykpID8/IHt9OyAvLyBOZXh0LmpzIGFsbG93cyB1bmRlZmluZWQgdG8gYmUgcmV0dXJuZWQgZnJvbSBhIGdldEluaXRpYWxQcm9wc0Z1bmN0aW9uLlxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbFByb3BzID09PSAnb2JqZWN0JyAmJiBpbml0aWFsUHJvcHMgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgICAoaW5pdGlhbFByb3BzICkuX3NlbnRyeVRyYWNlRGF0YSA9IHNlbnRyeVRyYWNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoYmFnZ2FnZSkge1xuICAgICAgICAgICAgKGluaXRpYWxQcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5pdGlhbFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0IHsgd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapGetServerSidePropsWithSentry: () => (/* binding */ wrapGetServerSidePropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isBuild.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/wrapperUtils.js\");\n\n\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetServerSidePropsWithSentry(\n  origGetServerSideProps,\n  parameterizedRoute,\n) {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetServerSideProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withErrorInstrumentation)(wrappingTarget);\n      const tracedGetServerSideProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withTracedServerSideDataFetcher)(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps',\n      });\n\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace,\n      }\n\n = await (tracedGetServerSideProps.apply(thisArg, args) );\n\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          (serverSideProps.props )._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          (serverSideProps.props )._sentryBaggage = baggage;\n        }\n      }\n\n      return serverSideProps;\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapGetServerSidePropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUN1RDs7QUFFckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDBEQUFPO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFdBQVc7O0FBRXpCLDZDQUE2QyxnRkFBd0I7QUFDckUsdUNBQXVDLHVGQUErQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFNEM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcz9kZDZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQnVpbGQgfSBmcm9tICcuLi91dGlscy9pc0J1aWxkLmpzJztcbmltcG9ydCB7IHdpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIsIHdpdGhFcnJvckluc3RydW1lbnRhdGlvbiB9IGZyb20gJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldFNlcnZlclNpZGVQcm9wc2AgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3JpZ0dldFNlcnZlclNpZGVQcm9wcyBUaGUgdXNlcidzIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnR2V0U2VydmVyU2lkZVByb3BzLFxuICBwYXJhbWV0ZXJpemVkUm91dGUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0U2VydmVyU2lkZVByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRTZXJ2ZXJTaWRlUHJvcHMgPSB3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgY29uc3QgdHJhY2VkR2V0U2VydmVyU2lkZVByb3BzID0gd2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRTZXJ2ZXJTaWRlUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiBwYXJhbWV0ZXJpemVkUm91dGUsXG4gICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogcGFyYW1ldGVyaXplZFJvdXRlLFxuICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0U2VydmVyU2lkZVByb3BzJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGRhdGE6IHNlcnZlclNpZGVQcm9wcyxcbiAgICAgICAgYmFnZ2FnZSxcbiAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICB9XG5cbiA9IGF3YWl0ICh0cmFjZWRHZXRTZXJ2ZXJTaWRlUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncykgKTtcblxuICAgICAgaWYgKHR5cGVvZiBzZXJ2ZXJTaWRlUHJvcHMgPT09ICdvYmplY3QnICYmIHNlcnZlclNpZGVQcm9wcyAhPT0gbnVsbCAmJiAncHJvcHMnIGluIHNlcnZlclNpZGVQcm9wcykge1xuICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgIGlmIChzZW50cnlUcmFjZSkge1xuICAgICAgICAgIChzZXJ2ZXJTaWRlUHJvcHMucHJvcHMgKS5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgKHNlcnZlclNpZGVQcm9wcy5wcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VydmVyU2lkZVByb3BzO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgeyB3cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapGetStaticPropsWithSentry: () => (/* binding */ wrapGetStaticPropsWithSentry)\n/* harmony export */ });\n/* harmony import */ var _utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/isBuild.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js\");\n/* harmony import */ var _utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/wrapperUtils.js\");\n\n\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetStaticPropsWithSentry(\n  origGetStaticPropsa,\n  _parameterizedRoute,\n) {\n  return new Proxy(origGetStaticPropsa, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if ((0,_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_0__.isBuild)()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const errorWrappedGetStaticProps = (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.withErrorInstrumentation)(wrappingTarget);\n      return (0,_utils_wrapperUtils_js__WEBPACK_IMPORTED_MODULE_1__.callDataFetcherTraced)(errorWrappedGetStaticProps, args);\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapGetStaticPropsWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQzZDOztBQUUzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMERBQU87QUFDakI7QUFDQTs7QUFFQSx5Q0FBeUMsZ0ZBQXdCO0FBQ2pFLGFBQWEsNkVBQXFCO0FBQ2xDLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRXdDO0FBQ3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9lc20vY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeS5qcz81YWNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQnVpbGQgfSBmcm9tICcuLi91dGlscy9pc0J1aWxkLmpzJztcbmltcG9ydCB7IGNhbGxEYXRhRmV0Y2hlclRyYWNlZCwgd2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uIH0gZnJvbSAnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0U3RhdGljUHJvcHNgIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIG9yaWdHZXRTdGF0aWNQcm9wcyBUaGUgdXNlcidzIGBnZXRTdGF0aWNQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeShcbiAgb3JpZ0dldFN0YXRpY1Byb3BzYSxcbiAgX3BhcmFtZXRlcml6ZWRSb3V0ZSxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdHZXRTdGF0aWNQcm9wc2EsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0U3RhdGljUHJvcHMgPSB3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgcmV0dXJuIGNhbGxEYXRhRmV0Y2hlclRyYWNlZChlcnJvcldyYXBwZWRHZXRTdGF0aWNQcm9wcywgYXJncyk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydCB7IHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapPageComponentWithSentry.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapPageComponentWithSentry.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapPageComponentWithSentry: () => (/* binding */ wrapPageComponentWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n\n\nfunction isReactClassComponent(target) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return typeof target === 'function' && target?.prototype?.isReactComponent;\n}\n\n/**\n * Wraps a page component with Sentry error instrumentation.\n */\nfunction wrapPageComponentWithSentry(pageComponent) {\n  if (isReactClassComponent(pageComponent)) {\n    return class SentryWrappedPageComponent extends pageComponent {\n       render(...args) {\n        return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.withIsolationScope)(() => {\n          const scope = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData =\n            typeof this.props === 'object' &&\n            this.props !== null &&\n            '_sentryTraceData' in this.props &&\n            typeof this.props._sentryTraceData === 'string'\n              ? this.props._sentryTraceData\n              : undefined;\n\n          if (sentryTraceData) {\n            const traceparentData = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.extractTraceparentData)(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return super.render(...args);\n          } catch (e) {\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.captureException)(e, {\n              mechanism: {\n                handled: false,\n              },\n            });\n            throw e;\n          }\n        });\n      }\n    };\n  } else if (typeof pageComponent === 'function') {\n    return new Proxy(pageComponent, {\n      apply(target, thisArg, argArray) {\n        return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.withIsolationScope)(() => {\n          const scope = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = argArray?.[0]?._sentryTraceData;\n\n          if (sentryTraceData) {\n            const traceparentData = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.extractTraceparentData)(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: traceparentData?.parentSpanId,\n              trace_id: traceparentData?.traceId,\n            });\n          }\n\n          try {\n            return target.apply(thisArg, argArray);\n          } catch (e) {\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.captureException)(e, {\n              mechanism: {\n                handled: false,\n              },\n            });\n            throw e;\n          }\n        });\n      },\n    });\n  } else {\n    return pageComponent;\n  }\n}\n\n\n//# sourceMappingURL=wrapPageComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBQYWdlQ29tcG9uZW50V2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZHOztBQUU3RztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0VBQWtCO0FBQ2pDLHdCQUF3Qiw2REFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLG9FQUFzQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWixZQUFZLDhEQUFnQjtBQUM1QjtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLGVBQWUsZ0VBQWtCO0FBQ2pDLHdCQUF3Qiw2REFBZTtBQUN2QztBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLG9FQUFzQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWixZQUFZLDhEQUFnQjtBQUM1QjtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFdUM7QUFDdkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkuanM/MDIwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3aXRoSXNvbGF0aW9uU2NvcGUsIGdldEN1cnJlbnRTY29wZSwgZXh0cmFjdFRyYWNlcGFyZW50RGF0YSwgY2FwdHVyZUV4Y2VwdGlvbiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RDbGFzc0NvbXBvbmVudCh0YXJnZXQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiB0YXJnZXQ/LnByb3RvdHlwZT8uaXNSZWFjdENvbXBvbmVudDtcbn1cblxuLyoqXG4gKiBXcmFwcyBhIHBhZ2UgY29tcG9uZW50IHdpdGggU2VudHJ5IGVycm9yIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gd3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5KHBhZ2VDb21wb25lbnQpIHtcbiAgaWYgKGlzUmVhY3RDbGFzc0NvbXBvbmVudChwYWdlQ29tcG9uZW50KSkge1xuICAgIHJldHVybiBjbGFzcyBTZW50cnlXcmFwcGVkUGFnZUNvbXBvbmVudCBleHRlbmRzIHBhZ2VDb21wb25lbnQge1xuICAgICAgIHJlbmRlciguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiB3aXRoSXNvbGF0aW9uU2NvcGUoKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNjb3BlID0gZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICAgICAgLy8gV2UgZXh0cmFjdCB0aGUgc2VudHJ5IHRyYWNlIGRhdGEgdGhhdCBpcyBwdXQgaW4gdGhlIGNvbXBvbmVudCBwcm9wcyBieSBkYXRhZmV0Y2hlciB3cmFwcGVyc1xuICAgICAgICAgIGNvbnN0IHNlbnRyeVRyYWNlRGF0YSA9XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5wcm9wcyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIHRoaXMucHJvcHMgIT09IG51bGwgJiZcbiAgICAgICAgICAgICdfc2VudHJ5VHJhY2VEYXRhJyBpbiB0aGlzLnByb3BzICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5wcm9wcy5fc2VudHJ5VHJhY2VEYXRhID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICA/IHRoaXMucHJvcHMuX3NlbnRyeVRyYWNlRGF0YVxuICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChzZW50cnlUcmFjZURhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNlcGFyZW50RGF0YSA9IGV4dHJhY3RUcmFjZXBhcmVudERhdGEoc2VudHJ5VHJhY2VEYXRhKTtcbiAgICAgICAgICAgIHNjb3BlLnNldENvbnRleHQoJ3RyYWNlJywge1xuICAgICAgICAgICAgICBzcGFuX2lkOiB0cmFjZXBhcmVudERhdGE/LnBhcmVudFNwYW5JZCxcbiAgICAgICAgICAgICAgdHJhY2VfaWQ6IHRyYWNlcGFyZW50RGF0YT8udHJhY2VJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIucmVuZGVyKC4uLmFyZ3MpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNhcHR1cmVFeGNlcHRpb24oZSwge1xuICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhZ2VDb21wb25lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbmV3IFByb3h5KHBhZ2VDb21wb25lbnQsIHtcbiAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhJc29sYXRpb25TY29wZSgoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2NvcGUgPSBnZXRDdXJyZW50U2NvcGUoKTtcbiAgICAgICAgICAvLyBXZSBleHRyYWN0IHRoZSBzZW50cnkgdHJhY2UgZGF0YSB0aGF0IGlzIHB1dCBpbiB0aGUgY29tcG9uZW50IHByb3BzIGJ5IGRhdGFmZXRjaGVyIHdyYXBwZXJzXG4gICAgICAgICAgY29uc3Qgc2VudHJ5VHJhY2VEYXRhID0gYXJnQXJyYXk/LlswXT8uX3NlbnRyeVRyYWNlRGF0YTtcblxuICAgICAgICAgIGlmIChzZW50cnlUcmFjZURhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYWNlcGFyZW50RGF0YSA9IGV4dHJhY3RUcmFjZXBhcmVudERhdGEoc2VudHJ5VHJhY2VEYXRhKTtcbiAgICAgICAgICAgIHNjb3BlLnNldENvbnRleHQoJ3RyYWNlJywge1xuICAgICAgICAgICAgICBzcGFuX2lkOiB0cmFjZXBhcmVudERhdGE/LnBhcmVudFNwYW5JZCxcbiAgICAgICAgICAgICAgdHJhY2VfaWQ6IHRyYWNlcGFyZW50RGF0YT8udHJhY2VJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ0FycmF5KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjYXB0dXJlRXhjZXB0aW9uKGUsIHtcbiAgICAgICAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhZ2VDb21wb25lbnQ7XG4gIH1cbn1cblxuZXhwb3J0IHsgd3JhcFBhZ2VDb21wb25lbnRXaXRoU2VudHJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwUGFnZUNvbXBvbmVudFdpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/span-attributes-with-logic-attached.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/span-attributes-with-logic-attached.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL: () => (/* binding */ TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL),\n/* harmony export */   TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL: () => (/* binding */ TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL),\n/* harmony export */   TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION: () => (/* binding */ TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION)\n/* harmony export */ });\n/**\n * If this attribute is attached to a transaction, the Next.js SDK will drop that transaction.\n */\nconst TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction';\n\nconst TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill';\n\nconst TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill';\n\n\n//# sourceMappingURL=span-attributes-with-logic-attached.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi9zcGFuLWF0dHJpYnV0ZXMtd2l0aC1sb2dpYy1hdHRhY2hlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFb0k7QUFDcEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9jb21tb24vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanM/MTliZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIElmIHRoaXMgYXR0cmlidXRlIGlzIGF0dGFjaGVkIHRvIGEgdHJhbnNhY3Rpb24sIHRoZSBOZXh0LmpzIFNESyB3aWxsIGRyb3AgdGhhdCB0cmFuc2FjdGlvbi5cbiAqL1xuY29uc3QgVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTiA9ICdzZW50cnkuZHJvcF90cmFuc2FjdGlvbic7XG5cbmNvbnN0IFRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMID0gJ3NlbnRyeS5zZW50cnlfdHJhY2VfYmFja2ZpbGwnO1xuXG5jb25zdCBUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCA9ICdzZW50cnkucm91dGVfYmFja2ZpbGwnO1xuXG5leHBvcnQgeyBUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCwgVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfVFJBQ0VfQkFDS0ZJTEwsIFRSQU5TQUNUSU9OX0FUVFJfU0hPVUxEX0RST1BfVFJBTlNBQ1RJT04gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW4tYXR0cmlidXRlcy13aXRoLWxvZ2ljLWF0dGFjaGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/span-attributes-with-logic-attached.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBuild: () => (/* binding */ isBuild)\n/* harmony export */ });\n/* harmony import */ var next_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/constants */ \"./node_modules/next/constants.js\");\n\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nfunction isBuild() {\n  return process.env.NEXT_PHASE === next_constants__WEBPACK_IMPORTED_MODULE_0__.PHASE_PRODUCTION_BUILD;\n}\n\n\n//# sourceMappingURL=isBuild.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi91dGlscy9pc0J1aWxkLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdEOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxrRUFBc0I7QUFDMUQ7O0FBRW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9lc20vY29tbW9uL3V0aWxzL2lzQnVpbGQuanM/YjRiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQSEFTRV9QUk9EVUNUSU9OX0JVSUxEIH0gZnJvbSAnbmV4dC9jb25zdGFudHMnO1xuXG4vKipcbiAqIERlY2lkZSBpZiB0aGUgY3VycmVudGx5IHJ1bm5pbmcgcHJvY2VzcyBpcyBwYXJ0IG9mIHRoZSBidWlsZCBwaGFzZSBvciBoYXBwZW5pbmcgYXQgcnVudGltZS5cbiAqL1xuZnVuY3Rpb24gaXNCdWlsZCgpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52Lk5FWFRfUEhBU0UgPT09IFBIQVNFX1BST0RVQ1RJT05fQlVJTEQ7XG59XG5cbmV4cG9ydCB7IGlzQnVpbGQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQnVpbGQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flushSafelyWithTimeout: () => (/* binding */ flushSafelyWithTimeout)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/nextjs/build/esm/common/debug-build.js\");\n\n\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nasync function flushSafelyWithTimeout() {\n  try {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_1__.logger.log('Flushing events...');\n    await (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.flush)(2000);\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_1__.logger.log('Done flushing events');\n  } catch (e) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_0__.DEBUG_BUILD && _sentry_core__WEBPACK_IMPORTED_MODULE_1__.logger.log('Error while flushing events:\\n', e);\n  }\n}\n\n\n//# sourceMappingURL=responseEnd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi91dGlscy9yZXNwb25zZUVuZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZDO0FBQ0c7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHdEQUFXLElBQUksZ0RBQU07QUFDekIsVUFBVSxtREFBSztBQUNmLElBQUksd0RBQVcsSUFBSSxnREFBTTtBQUN6QixJQUFJO0FBQ0osSUFBSSx3REFBVyxJQUFJLGdEQUFNO0FBQ3pCO0FBQ0E7O0FBRWtDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9lc20vY29tbW9uL3V0aWxzL3Jlc3BvbnNlRW5kLmpzP2FhZGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nZ2VyLCBmbHVzaCB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBERUJVR19CVUlMRCB9IGZyb20gJy4uL2RlYnVnLWJ1aWxkLmpzJztcblxuLyoqXG4gKiBGbHVzaGVzIHBlbmRpbmcgU2VudHJ5IGV2ZW50cyB3aXRoIGEgMiBzZWNvbmQgdGltZW91dCBhbmQgaW4gYSB3YXkgdGhhdCBjYW5ub3QgY3JlYXRlIHVuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbnMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZsdXNoU2FmZWx5V2l0aFRpbWVvdXQoKSB7XG4gIHRyeSB7XG4gICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZygnRmx1c2hpbmcgZXZlbnRzLi4uJyk7XG4gICAgYXdhaXQgZmx1c2goMjAwMCk7XG4gICAgREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZygnRG9uZSBmbHVzaGluZyBldmVudHMnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIERFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2coJ0Vycm9yIHdoaWxlIGZsdXNoaW5nIGV2ZW50czpcXG4nLCBlKTtcbiAgfVxufVxuXG5leHBvcnQgeyBmbHVzaFNhZmVseVdpdGhUaW1lb3V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZUVuZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/utils/tracingUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/utils/tracingUtils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   commonObjectToIsolationScope: () => (/* binding */ commonObjectToIsolationScope),\n/* harmony export */   commonObjectToPropagationContext: () => (/* binding */ commonObjectToPropagationContext),\n/* harmony export */   dropNextjsRootContext: () => (/* binding */ dropNextjsRootContext),\n/* harmony export */   escapeNextjsTracing: () => (/* binding */ escapeNextjsTracing)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../debug-build.js */ \"./node_modules/@sentry/nextjs/build/esm/common/debug-build.js\");\n/* harmony import */ var _span_attributes_with_logic_attached_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"./node_modules/@sentry/nextjs/build/esm/common/span-attributes-with-logic-attached.js\");\n\n\n\n\nconst commonPropagationContextMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param propagationContext The propagation context that should be shared between all the resources if no propagation context was registered yet.\n * @returns the shared propagation context.\n */\nfunction commonObjectToPropagationContext(\n  commonObject,\n  propagationContext,\n) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoPropagationContext = commonPropagationContextMap.get(commonObject);\n    if (memoPropagationContext) {\n      return memoPropagationContext;\n    } else {\n      commonPropagationContextMap.set(commonObject, propagationContext);\n      return propagationContext;\n    }\n  } else {\n    return propagationContext;\n  }\n}\n\nconst commonIsolationScopeMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param isolationScope The isolationScope that should be shared between all the resources if no isolation scope was created yet.\n * @returns the shared isolation scope.\n */\nfunction commonObjectToIsolationScope(commonObject) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoIsolationScope = commonIsolationScopeMap.get(commonObject);\n    if (memoIsolationScope) {\n      return memoIsolationScope;\n    } else {\n      const newIsolationScope = new _sentry_core__WEBPACK_IMPORTED_MODULE_0__.Scope();\n      commonIsolationScopeMap.set(commonObject, newIsolationScope);\n      return newIsolationScope;\n    }\n  } else {\n    return new _sentry_core__WEBPACK_IMPORTED_MODULE_0__.Scope();\n  }\n}\n\nlet nextjsEscapedAsyncStorage;\n\n/**\n * Will mark the execution context of the callback as \"escaped\" from Next.js internal tracing by unsetting the active\n * span and propagation context. When an execution passes through this function multiple times, it is a noop after the\n * first time.\n */\nfunction escapeNextjsTracing(cb) {\n  const MaybeGlobalAsyncLocalStorage = (_sentry_core__WEBPACK_IMPORTED_MODULE_1__.GLOBAL_OBJ )\n    .AsyncLocalStorage;\n\n  if (!MaybeGlobalAsyncLocalStorage) {\n    _debug_build_js__WEBPACK_IMPORTED_MODULE_2__.DEBUG_BUILD &&\n      _sentry_core__WEBPACK_IMPORTED_MODULE_3__.logger.warn(\n        \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n      );\n    return cb();\n  }\n\n  if (!nextjsEscapedAsyncStorage) {\n    nextjsEscapedAsyncStorage = new MaybeGlobalAsyncLocalStorage();\n  }\n\n  if (nextjsEscapedAsyncStorage.getStore()) {\n    return cb();\n  } else {\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.startNewTrace)(() => {\n      return nextjsEscapedAsyncStorage.run(true, () => {\n        return cb();\n      });\n    });\n  }\n}\n\n/**\n * Ideally this function never lands in the develop branch.\n *\n * Drops the entire span tree this function was called in, if it was a span tree created by Next.js.\n */\nfunction dropNextjsRootContext() {\n  const nextJsOwnedSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.getActiveSpan)();\n  if (nextJsOwnedSpan) {\n    const rootSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.getRootSpan)(nextJsOwnedSpan);\n    const rootSpanAttributes = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.spanToJSON)(rootSpan).data;\n    if (rootSpanAttributes?.['next.span_type']) {\n      (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.getRootSpan)(nextJsOwnedSpan)?.setAttribute(_span_attributes_with_logic_attached_js__WEBPACK_IMPORTED_MODULE_6__.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, true);\n    }\n  }\n}\n\n\n//# sourceMappingURL=tracingUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi91dGlscy90cmFjaW5nVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBZ0g7QUFDaEU7QUFDcUQ7O0FBRXJHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixvQ0FBb0MsK0NBQUs7QUFDekM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLGVBQWUsK0NBQUs7QUFDcEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msb0RBQVU7QUFDbEQ7O0FBRUE7QUFDQSxJQUFJLHdEQUFXO0FBQ2YsTUFBTSxnREFBTTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLFdBQVcsMkRBQWE7QUFDeEI7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsMkRBQWE7QUFDdkM7QUFDQSxxQkFBcUIseURBQVc7QUFDaEMsK0JBQStCLHdEQUFVO0FBQ3pDO0FBQ0EsTUFBTSx5REFBVyxnQ0FBZ0MsNkdBQXdDO0FBQ3pGO0FBQ0E7QUFDQTs7QUFFc0g7QUFDdEgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9jb21tb24vdXRpbHMvdHJhY2luZ1V0aWxzLmpzPzgxMjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWN0aXZlU3BhbiwgZ2V0Um9vdFNwYW4sIHNwYW5Ub0pTT04sIEdMT0JBTF9PQkosIGxvZ2dlciwgc3RhcnROZXdUcmFjZSwgU2NvcGUgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuLi9kZWJ1Zy1idWlsZC5qcyc7XG5pbXBvcnQgeyBUUkFOU0FDVElPTl9BVFRSX1NIT1VMRF9EUk9QX1RSQU5TQUNUSU9OIH0gZnJvbSAnLi4vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMnO1xuXG5jb25zdCBjb21tb25Qcm9wYWdhdGlvbkNvbnRleHRNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIFRha2VzIGEgc2hhcmVkIChnYXJiYWdlIGNvbGxlY3RhYmxlKSBvYmplY3QgYmV0d2VlbiByZXNvdXJjZXMsIGUuZy4gYSBoZWFkZXJzIG9iamVjdCBzaGFyZWQgYmV0d2VlbiBOZXh0LmpzIHNlcnZlciBjb21wb25lbnRzIGFuZCByZXR1cm5zIGEgY29tbW9uIHByb3BhZ2F0aW9uIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIGNvbW1vbk9iamVjdCBUaGUgc2hhcmVkIG9iamVjdC5cbiAqIEBwYXJhbSBwcm9wYWdhdGlvbkNvbnRleHQgVGhlIHByb3BhZ2F0aW9uIGNvbnRleHQgdGhhdCBzaG91bGQgYmUgc2hhcmVkIGJldHdlZW4gYWxsIHRoZSByZXNvdXJjZXMgaWYgbm8gcHJvcGFnYXRpb24gY29udGV4dCB3YXMgcmVnaXN0ZXJlZCB5ZXQuXG4gKiBAcmV0dXJucyB0aGUgc2hhcmVkIHByb3BhZ2F0aW9uIGNvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIGNvbW1vbk9iamVjdFRvUHJvcGFnYXRpb25Db250ZXh0KFxuICBjb21tb25PYmplY3QsXG4gIHByb3BhZ2F0aW9uQ29udGV4dCxcbikge1xuICBpZiAodHlwZW9mIGNvbW1vbk9iamVjdCA9PT0gJ29iamVjdCcgJiYgY29tbW9uT2JqZWN0KSB7XG4gICAgY29uc3QgbWVtb1Byb3BhZ2F0aW9uQ29udGV4dCA9IGNvbW1vblByb3BhZ2F0aW9uQ29udGV4dE1hcC5nZXQoY29tbW9uT2JqZWN0KTtcbiAgICBpZiAobWVtb1Byb3BhZ2F0aW9uQ29udGV4dCkge1xuICAgICAgcmV0dXJuIG1lbW9Qcm9wYWdhdGlvbkNvbnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbW1vblByb3BhZ2F0aW9uQ29udGV4dE1hcC5zZXQoY29tbW9uT2JqZWN0LCBwcm9wYWdhdGlvbkNvbnRleHQpO1xuICAgICAgcmV0dXJuIHByb3BhZ2F0aW9uQ29udGV4dDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByb3BhZ2F0aW9uQ29udGV4dDtcbiAgfVxufVxuXG5jb25zdCBjb21tb25Jc29sYXRpb25TY29wZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogVGFrZXMgYSBzaGFyZWQgKGdhcmJhZ2UgY29sbGVjdGFibGUpIG9iamVjdCBiZXR3ZWVuIHJlc291cmNlcywgZS5nLiBhIGhlYWRlcnMgb2JqZWN0IHNoYXJlZCBiZXR3ZWVuIE5leHQuanMgc2VydmVyIGNvbXBvbmVudHMgYW5kIHJldHVybnMgYSBjb21tb24gcHJvcGFnYXRpb24gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0gY29tbW9uT2JqZWN0IFRoZSBzaGFyZWQgb2JqZWN0LlxuICogQHBhcmFtIGlzb2xhdGlvblNjb3BlIFRoZSBpc29sYXRpb25TY29wZSB0aGF0IHNob3VsZCBiZSBzaGFyZWQgYmV0d2VlbiBhbGwgdGhlIHJlc291cmNlcyBpZiBubyBpc29sYXRpb24gc2NvcGUgd2FzIGNyZWF0ZWQgeWV0LlxuICogQHJldHVybnMgdGhlIHNoYXJlZCBpc29sYXRpb24gc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGNvbW1vbk9iamVjdFRvSXNvbGF0aW9uU2NvcGUoY29tbW9uT2JqZWN0KSB7XG4gIGlmICh0eXBlb2YgY29tbW9uT2JqZWN0ID09PSAnb2JqZWN0JyAmJiBjb21tb25PYmplY3QpIHtcbiAgICBjb25zdCBtZW1vSXNvbGF0aW9uU2NvcGUgPSBjb21tb25Jc29sYXRpb25TY29wZU1hcC5nZXQoY29tbW9uT2JqZWN0KTtcbiAgICBpZiAobWVtb0lzb2xhdGlvblNjb3BlKSB7XG4gICAgICByZXR1cm4gbWVtb0lzb2xhdGlvblNjb3BlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdJc29sYXRpb25TY29wZSA9IG5ldyBTY29wZSgpO1xuICAgICAgY29tbW9uSXNvbGF0aW9uU2NvcGVNYXAuc2V0KGNvbW1vbk9iamVjdCwgbmV3SXNvbGF0aW9uU2NvcGUpO1xuICAgICAgcmV0dXJuIG5ld0lzb2xhdGlvblNjb3BlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFNjb3BlKCk7XG4gIH1cbn1cblxubGV0IG5leHRqc0VzY2FwZWRBc3luY1N0b3JhZ2U7XG5cbi8qKlxuICogV2lsbCBtYXJrIHRoZSBleGVjdXRpb24gY29udGV4dCBvZiB0aGUgY2FsbGJhY2sgYXMgXCJlc2NhcGVkXCIgZnJvbSBOZXh0LmpzIGludGVybmFsIHRyYWNpbmcgYnkgdW5zZXR0aW5nIHRoZSBhY3RpdmVcbiAqIHNwYW4gYW5kIHByb3BhZ2F0aW9uIGNvbnRleHQuIFdoZW4gYW4gZXhlY3V0aW9uIHBhc3NlcyB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gbXVsdGlwbGUgdGltZXMsIGl0IGlzIGEgbm9vcCBhZnRlciB0aGVcbiAqIGZpcnN0IHRpbWUuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZU5leHRqc1RyYWNpbmcoY2IpIHtcbiAgY29uc3QgTWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZSA9IChHTE9CQUxfT0JKIClcbiAgICAuQXN5bmNMb2NhbFN0b3JhZ2U7XG5cbiAgaWYgKCFNYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlKSB7XG4gICAgREVCVUdfQlVJTEQgJiZcbiAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICBcIlRyaWVkIHRvIHJlZ2lzdGVyIEFzeW5jTG9jYWxTdG9yYWdlIGFzeW5jIGNvbnRleHQgc3RyYXRlZ3kgaW4gYSBydW50aW1lIHRoYXQgZG9lc24ndCBzdXBwb3J0IEFzeW5jTG9jYWxTdG9yYWdlLlwiLFxuICAgICAgKTtcbiAgICByZXR1cm4gY2IoKTtcbiAgfVxuXG4gIGlmICghbmV4dGpzRXNjYXBlZEFzeW5jU3RvcmFnZSkge1xuICAgIG5leHRqc0VzY2FwZWRBc3luY1N0b3JhZ2UgPSBuZXcgTWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZSgpO1xuICB9XG5cbiAgaWYgKG5leHRqc0VzY2FwZWRBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjYigpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGFydE5ld1RyYWNlKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXh0anNFc2NhcGVkQXN5bmNTdG9yYWdlLnJ1bih0cnVlLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjYigpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJZGVhbGx5IHRoaXMgZnVuY3Rpb24gbmV2ZXIgbGFuZHMgaW4gdGhlIGRldmVsb3AgYnJhbmNoLlxuICpcbiAqIERyb3BzIHRoZSBlbnRpcmUgc3BhbiB0cmVlIHRoaXMgZnVuY3Rpb24gd2FzIGNhbGxlZCBpbiwgaWYgaXQgd2FzIGEgc3BhbiB0cmVlIGNyZWF0ZWQgYnkgTmV4dC5qcy5cbiAqL1xuZnVuY3Rpb24gZHJvcE5leHRqc1Jvb3RDb250ZXh0KCkge1xuICBjb25zdCBuZXh0SnNPd25lZFNwYW4gPSBnZXRBY3RpdmVTcGFuKCk7XG4gIGlmIChuZXh0SnNPd25lZFNwYW4pIHtcbiAgICBjb25zdCByb290U3BhbiA9IGdldFJvb3RTcGFuKG5leHRKc093bmVkU3Bhbik7XG4gICAgY29uc3Qgcm9vdFNwYW5BdHRyaWJ1dGVzID0gc3BhblRvSlNPTihyb290U3BhbikuZGF0YTtcbiAgICBpZiAocm9vdFNwYW5BdHRyaWJ1dGVzPy5bJ25leHQuc3Bhbl90eXBlJ10pIHtcbiAgICAgIGdldFJvb3RTcGFuKG5leHRKc093bmVkU3Bhbik/LnNldEF0dHJpYnV0ZShUUkFOU0FDVElPTl9BVFRSX1NIT1VMRF9EUk9QX1RSQU5TQUNUSU9OLCB0cnVlKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgY29tbW9uT2JqZWN0VG9Jc29sYXRpb25TY29wZSwgY29tbW9uT2JqZWN0VG9Qcm9wYWdhdGlvbkNvbnRleHQsIGRyb3BOZXh0anNSb290Q29udGV4dCwgZXNjYXBlTmV4dGpzVHJhY2luZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZ1V0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/utils/tracingUtils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/utils/wrapperUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/utils/wrapperUtils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callDataFetcherTraced: () => (/* binding */ callDataFetcherTraced),\n/* harmony export */   withErrorInstrumentation: () => (/* binding */ withErrorInstrumentation),\n/* harmony export */   withTracedServerSideDataFetcher: () => (/* binding */ withTracedServerSideDataFetcher)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/request.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/traceData.js\");\n/* harmony import */ var _span_attributes_with_logic_attached_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"./node_modules/@sentry/nextjs/build/esm/common/span-attributes-with-logic-attached.js\");\n\n\n\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorInstrumentation(\n  origFunction,\n) {\n  return async function ( ...origFunctionArguments) {\n    try {\n      return await origFunction.apply(this, origFunctionArguments);\n    } catch (e) {\n      // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n      (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.captureException)(e, { mechanism: { handled: false } });\n      throw e;\n    }\n  };\n}\n\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withTracedServerSideDataFetcher(\n  origDataFetcher,\n  req,\n  res,\n  options\n\n,\n) {\n  return async function (\n\n    ...args\n  ) {\n    const normalizedRequest = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.httpRequestToRequestData)(req);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCurrentScope)().setTransactionName(`${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`);\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getIsolationScope)().setSDKProcessingMetadata({ normalizedRequest });\n\n    const span = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getActiveSpan)();\n\n    // Only set the route backfill if the span is not for /_error\n    if (span && options.requestedRouteName !== '/_error') {\n      const root = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getRootSpan)(span);\n      root.setAttribute(_span_attributes_with_logic_attached_js__WEBPACK_IMPORTED_MODULE_4__.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, options.requestedRouteName);\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage } = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.getTraceData)();\n\n    return {\n      sentryTrace: sentryTrace,\n      baggage: baggage,\n      data: await origDataFetcher.apply(this, args),\n    };\n  };\n}\n\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function callDataFetcherTraced(\n  origFunction,\n  origFunctionArgs,\n) {\n  try {\n    return await origFunction(...origFunctionArgs);\n  } catch (e) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.captureException)(e, { mechanism: { handled: false } });\n    throw e;\n  }\n}\n\n\n//# sourceMappingURL=wrapperUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi91dGlscy93cmFwcGVyVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXdKO0FBQ3JEOztBQUVuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNLDhEQUFnQixNQUFNLGFBQWEsa0JBQWtCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEIsc0VBQXdCO0FBQ3RELElBQUksNkRBQWUseUJBQXlCLGdDQUFnQyxHQUFHLDZCQUE2QjtBQUM1RyxJQUFJLCtEQUFpQiw4QkFBOEIsbUJBQW1COztBQUV0RSxpQkFBaUIsMkRBQWE7O0FBRTlCO0FBQ0E7QUFDQSxtQkFBbUIseURBQVc7QUFDOUIsd0JBQXdCLDJHQUFzQztBQUM5RDs7QUFFQSxZQUFZLHVDQUF1QyxFQUFFLDBEQUFZOztBQUVqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixJQUFJLDhEQUFnQixNQUFNLGFBQWEsa0JBQWtCO0FBQ3pEO0FBQ0E7QUFDQTs7QUFFNEY7QUFDNUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9jb21tb24vdXRpbHMvd3JhcHBlclV0aWxzLmpzPzY2MWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FwdHVyZUV4Y2VwdGlvbiwgaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhLCBnZXRDdXJyZW50U2NvcGUsIGdldElzb2xhdGlvblNjb3BlLCBnZXRBY3RpdmVTcGFuLCBnZXRSb290U3BhbiwgZ2V0VHJhY2VEYXRhIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IFRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1JPVVRFX0JBQ0tGSUxMIH0gZnJvbSAnLi4vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMnO1xuXG4vKipcbiAqIFdyYXBzIGEgZnVuY3Rpb24gdGhhdCBwb3RlbnRpYWxseSB0aHJvd3MuIElmIGl0IGRvZXMsIHRoZSBlcnJvciBpcyBwYXNzZWQgdG8gYGNhcHR1cmVFeGNlcHRpb25gIGFuZCByZXRocm93bi5cbiAqXG4gKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIHR1cm5zIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIGludG8gYW4gYXN5bmNocm9ub3VzIG9uZS5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIHdpdGhFcnJvckluc3RydW1lbnRhdGlvbihcbiAgb3JpZ0Z1bmN0aW9uLFxuKSB7XG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiAoIC4uLm9yaWdGdW5jdGlvbkFyZ3VtZW50cykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgb3JpZ0Z1bmN0aW9uLmFwcGx5KHRoaXMsIG9yaWdGdW5jdGlvbkFyZ3VtZW50cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gVE9ETzogRXh0cmFjdCBlcnJvciBsb2dpYyBmcm9tIGB3aXRoU2VudHJ5YCBpbiBoZXJlIG9yIGNyZWF0ZSBhIG5ldyB3cmFwcGVyIHdpdGggc2FpZCBsb2dpYyBvciBzb21ldGhpbmcgbGlrZSB0aGF0LlxuICAgICAgY2FwdHVyZUV4Y2VwdGlvbihlLCB7IG1lY2hhbmlzbTogeyBoYW5kbGVkOiBmYWxzZSB9IH0pO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQ2FsbHMgYSBzZXJ2ZXItc2lkZSBkYXRhIGZldGNoaW5nIGZ1bmN0aW9uICh0aGF0IHRha2VzIGEgYHJlcWAgYW5kIGByZXNgIG9iamVjdCBpbiBpdHMgY29udGV4dCkgd2l0aCB0cmFjaW5nXG4gKiBpbnN0cnVtZW50YXRpb24uIEEgdHJhbnNhY3Rpb24gd2lsbCBiZSBjcmVhdGVkIGZvciB0aGUgaW5jb21pbmcgcmVxdWVzdCAoaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0KSBpbiBhZGRpdGlvbiB0b1xuICogYSBzcGFuIGZvciB0aGUgd3JhcHBlZCBkYXRhIGZldGNoaW5nIGZ1bmN0aW9uLlxuICpcbiAqIEFsbCBvZiB0aGUgYWJvdmUgaGFwcGVucyBpbiBhbiBpc29sYXRlZCBkb21haW4sIG1lYW5pbmcgYWxsIHRocm93biBlcnJvcnMgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGNvcnJlY3Qgc3Bhbi5cbiAqXG4gKiBAcGFyYW0gb3JpZ0RhdGFGZXRjaGVyIFRoZSBkYXRhIGZldGNoaW5nIG1ldGhvZCB0byBjYWxsLlxuICogQHBhcmFtIG9yaWdGdW5jdGlvbkFyZ3VtZW50cyBUaGUgYXJndW1lbnRzIHRvIGNhbGwgdGhlIGRhdGEgZmV0Y2hpbmcgbWV0aG9kIHdpdGguXG4gKiBAcGFyYW0gcmVxIFRoZSBkYXRhIGZldGNoaW5nIGZ1bmN0aW9uJ3MgcmVxdWVzdCBvYmplY3QuXG4gKiBAcGFyYW0gcmVzIFRoZSBkYXRhIGZldGNoaW5nIGZ1bmN0aW9uJ3MgcmVzcG9uc2Ugb2JqZWN0LlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBwcm92aWRpbmcgZGV0YWlscyBmb3IgdGhlIGNyZWF0ZWQgdHJhbnNhY3Rpb24gYW5kIHNwYW4uXG4gKiBAcmV0dXJucyB3aGF0IHRoZSBkYXRhIGZldGNoaW5nIG1ldGhvZCBjYWxsIHJldHVybmVkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gd2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihcbiAgb3JpZ0RhdGFGZXRjaGVyLFxuICByZXEsXG4gIHJlcyxcbiAgb3B0aW9uc1xuXG4sXG4pIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIChcblxuICAgIC4uLmFyZ3NcbiAgKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFJlcXVlc3QgPSBodHRwUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxKTtcbiAgICBnZXRDdXJyZW50U2NvcGUoKS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7b3B0aW9ucy5kYXRhRmV0Y2hpbmdNZXRob2ROYW1lfSAoJHtvcHRpb25zLmRhdGFGZXRjaGVyUm91dGVOYW1lfSlgKTtcbiAgICBnZXRJc29sYXRpb25TY29wZSgpLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7IG5vcm1hbGl6ZWRSZXF1ZXN0IH0pO1xuXG4gICAgY29uc3Qgc3BhbiA9IGdldEFjdGl2ZVNwYW4oKTtcblxuICAgIC8vIE9ubHkgc2V0IHRoZSByb3V0ZSBiYWNrZmlsbCBpZiB0aGUgc3BhbiBpcyBub3QgZm9yIC9fZXJyb3JcbiAgICBpZiAoc3BhbiAmJiBvcHRpb25zLnJlcXVlc3RlZFJvdXRlTmFtZSAhPT0gJy9fZXJyb3InKSB7XG4gICAgICBjb25zdCByb290ID0gZ2V0Um9vdFNwYW4oc3Bhbik7XG4gICAgICByb290LnNldEF0dHJpYnV0ZShUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCwgb3B0aW9ucy5yZXF1ZXN0ZWRSb3V0ZU5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgJ3NlbnRyeS10cmFjZSc6IHNlbnRyeVRyYWNlLCBiYWdnYWdlIH0gPSBnZXRUcmFjZURhdGEoKTtcblxuICAgIHJldHVybiB7XG4gICAgICBzZW50cnlUcmFjZTogc2VudHJ5VHJhY2UsXG4gICAgICBiYWdnYWdlOiBiYWdnYWdlLFxuICAgICAgZGF0YTogYXdhaXQgb3JpZ0RhdGFGZXRjaGVyLmFwcGx5KHRoaXMsIGFyZ3MpLFxuICAgIH07XG4gIH07XG59XG5cbi8qKlxuICogQ2FsbCBhIGRhdGEgZmV0Y2hlciBhbmQgdHJhY2UgaXQuIE9ubHkgdHJhY2VzIHRoZSBmdW5jdGlvbiBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgdHJhbnNhY3Rpb24gb24gdGhlIHNjb3BlLlxuICpcbiAqIFdlIG9ubHkgZG8gdGhlIGZvbGxvd2luZyB1bnRpbCB3ZSBtb3ZlIHRyYW5zYWN0aW9uIGNyZWF0aW9uIGludG8gdGhpcyBmdW5jdGlvbjogV2hlbiBjYWxsZWQsIHRoZSB3cmFwcGVkIGZ1bmN0aW9uXG4gKiB3aWxsIGFsc28gdXBkYXRlIHRoZSBuYW1lIG9mIHRoZSBhY3RpdmUgdHJhbnNhY3Rpb24gd2l0aCBhIHBhcmFtZXRlcml6ZWQgcm91dGUgcHJvdmlkZWQgdmlhIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5hc3luYyBmdW5jdGlvbiBjYWxsRGF0YUZldGNoZXJUcmFjZWQoXG4gIG9yaWdGdW5jdGlvbixcbiAgb3JpZ0Z1bmN0aW9uQXJncyxcbikge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBvcmlnRnVuY3Rpb24oLi4ub3JpZ0Z1bmN0aW9uQXJncyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjYXB0dXJlRXhjZXB0aW9uKGUsIHsgbWVjaGFuaXNtOiB7IGhhbmRsZWQ6IGZhbHNlIH0gfSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG5leHBvcnQgeyBjYWxsRGF0YUZldGNoZXJUcmFjZWQsIHdpdGhFcnJvckluc3RydW1lbnRhdGlvbiwgd2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcHBlclV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/utils/wrapperUtils.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/withServerActionInstrumentation.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/withServerActionInstrumentation.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withServerActionInstrumentation: () => (/* binding */ withServerActionInstrumentation)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js\");\n/* harmony import */ var _debug_build_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-build.js */ \"./node_modules/@sentry/nextjs/build/esm/common/debug-build.js\");\n/* harmony import */ var _nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/nextNavigationErrorUtils.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/responseEnd.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js\");\n\n\n\n\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */\nfunction withServerActionInstrumentation(\n  ...args\n) {\n  if (typeof args[1] === 'function') {\n    const [serverActionName, callback] = args;\n    return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n  } else {\n    const [serverActionName, options, callback] = args;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return withServerActionInstrumentationImplementation(serverActionName, options, callback);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation(\n  serverActionName,\n  options,\n  callback,\n) {\n  return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.withIsolationScope)(async isolationScope => {\n    const sendDefaultPii = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getClient)()?.getOptions().sendDefaultPii;\n\n    let sentryTraceHeader;\n    let baggageHeader;\n    const fullHeadersObject = {};\n    try {\n      const awaitedHeaders = await options.headers;\n      sentryTraceHeader = awaitedHeaders?.get('sentry-trace') ?? undefined;\n      baggageHeader = awaitedHeaders?.get('baggage');\n      awaitedHeaders?.forEach((value, key) => {\n        fullHeadersObject[key] = value;\n      });\n    } catch (e) {\n      _debug_build_js__WEBPACK_IMPORTED_MODULE_1__.DEBUG_BUILD &&\n        _sentry_core__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\n          \"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\",\n        );\n    }\n\n    isolationScope.setTransactionName(`serverAction/${serverActionName}`);\n    isolationScope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: fullHeadersObject,\n      } ,\n    });\n\n    // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n    // Else, we manually continueTrace from the incoming headers\n    const continueTraceIfNoActiveSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.getActiveSpan)()\n      ? (_opts, callback) => callback()\n      : _sentry_core__WEBPACK_IMPORTED_MODULE_4__.continueTrace;\n\n    return continueTraceIfNoActiveSpan(\n      {\n        sentryTrace: sentryTraceHeader,\n        baggage: baggageHeader,\n      },\n      async () => {\n        try {\n          return await (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.startSpan)(\n            {\n              op: 'function.server_action',\n              name: `serverAction/${serverActionName}`,\n              forceTransaction: true,\n              attributes: {\n                [_sentry_core__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n              },\n            },\n            async span => {\n              const result = await (0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.handleCallbackErrors)(callback, error => {\n                if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_7__.isNotFoundNavigationError)(error)) {\n                  // We don't want to report \"not-found\"s\n                  span.setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_8__.SPAN_STATUS_ERROR, message: 'not_found' });\n                } else if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_7__.isRedirectNavigationError)(error)) {\n                  // Don't do anything for redirects\n                } else {\n                  span.setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_8__.SPAN_STATUS_ERROR, message: 'internal_error' });\n                  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_9__.captureException)(error, {\n                    mechanism: {\n                      handled: false,\n                    },\n                  });\n                }\n              });\n\n              if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setExtra('server_action_result', result);\n              }\n\n              if (options.formData) {\n                options.formData.forEach((value, key) => {\n                  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope)().setExtra(\n                    `server_action_form_data.${key}`,\n                    typeof value === 'string' ? value : '[non-string value]',\n                  );\n                });\n              }\n\n              return result;\n            },\n          );\n        } finally {\n          (0,_sentry_core__WEBPACK_IMPORTED_MODULE_10__.vercelWaitUntil)((0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_11__.flushSafelyWithTimeout)());\n        }\n      },\n    );\n  });\n}\n\n\n//# sourceMappingURL=withServerActionInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi93aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK087QUFDaE07QUFDc0Q7QUFDckM7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkU7QUFDN0UsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxnRUFBa0I7QUFDM0IsMkJBQTJCLHVEQUFTOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOLE1BQU0sd0RBQVc7QUFDakIsUUFBUSxnREFBTTtBQUNkO0FBQ0E7QUFDQTs7QUFFQSxzREFBc0QsaUJBQWlCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixLQUFLOztBQUVMO0FBQ0E7QUFDQSx3Q0FBd0MsMkRBQWE7QUFDckQ7QUFDQSxRQUFRLHVEQUFhOztBQUVyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsdUJBQXVCLHVEQUFTO0FBQ2hDO0FBQ0E7QUFDQSxvQ0FBb0MsaUJBQWlCO0FBQ3JEO0FBQ0E7QUFDQSxpQkFBaUIsMEVBQWdDO0FBQ2pELGVBQWU7QUFDZixhQUFhO0FBQ2I7QUFDQSxtQ0FBbUMsa0VBQW9CO0FBQ3ZELG9CQUFvQix1RkFBeUI7QUFDN0M7QUFDQSxtQ0FBbUMsTUFBTSwyREFBaUIsd0JBQXdCO0FBQ2xGLGtCQUFrQixTQUFTLHVGQUF5QjtBQUNwRDtBQUNBLGtCQUFrQjtBQUNsQixtQ0FBbUMsTUFBTSwyREFBaUIsNkJBQTZCO0FBQ3ZGLGtCQUFrQiw4REFBZ0I7QUFDbEM7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkI7QUFDQSxlQUFlOztBQUVmO0FBQ0EsZ0JBQWdCLCtEQUFpQjtBQUNqQzs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLCtEQUFpQjtBQUNuQywrQ0FBK0MsSUFBSTtBQUNuRDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsVUFBVTtBQUNWLFVBQVUsOERBQWUsQ0FBQyw4RUFBc0I7QUFDaEQ7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7O0FBRTJDO0FBQzNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9lc20vY29tbW9uL3dpdGhTZXJ2ZXJBY3Rpb25JbnN0cnVtZW50YXRpb24uanM/OGIwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3aXRoSXNvbGF0aW9uU2NvcGUsIGdldENsaWVudCwgbG9nZ2VyLCBnZXRBY3RpdmVTcGFuLCBjb250aW51ZVRyYWNlLCBzdGFydFNwYW4sIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFLCBoYW5kbGVDYWxsYmFja0Vycm9ycywgU1BBTl9TVEFUVVNfRVJST1IsIGNhcHR1cmVFeGNlcHRpb24sIGdldElzb2xhdGlvblNjb3BlLCB2ZXJjZWxXYWl0VW50aWwgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgREVCVUdfQlVJTEQgfSBmcm9tICcuL2RlYnVnLWJ1aWxkLmpzJztcbmltcG9ydCB7IGlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3IsIGlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3IgfSBmcm9tICcuL25leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcyc7XG5pbXBvcnQgeyBmbHVzaFNhZmVseVdpdGhUaW1lb3V0IH0gZnJvbSAnLi91dGlscy9yZXNwb25zZUVuZC5qcyc7XG5cbi8qKlxuICogV3JhcHMgYSBOZXh0LmpzIFNlcnZlciBBY3Rpb24gaW1wbGVtZW50YXRpb24gd2l0aCBTZW50cnkgRXJyb3IgYW5kIFBlcmZvcm1hbmNlIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gd2l0aFNlcnZlckFjdGlvbkluc3RydW1lbnRhdGlvbihcbiAgLi4uYXJnc1xuKSB7XG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IFtzZXJ2ZXJBY3Rpb25OYW1lLCBjYWxsYmFja10gPSBhcmdzO1xuICAgIHJldHVybiB3aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uSW1wbGVtZW50YXRpb24oc2VydmVyQWN0aW9uTmFtZSwge30sIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBbc2VydmVyQWN0aW9uTmFtZSwgb3B0aW9ucywgY2FsbGJhY2tdID0gYXJncztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgIHJldHVybiB3aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uSW1wbGVtZW50YXRpb24oc2VydmVyQWN0aW9uTmFtZSwgb3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5hc3luYyBmdW5jdGlvbiB3aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uSW1wbGVtZW50YXRpb24oXG4gIHNlcnZlckFjdGlvbk5hbWUsXG4gIG9wdGlvbnMsXG4gIGNhbGxiYWNrLFxuKSB7XG4gIHJldHVybiB3aXRoSXNvbGF0aW9uU2NvcGUoYXN5bmMgaXNvbGF0aW9uU2NvcGUgPT4ge1xuICAgIGNvbnN0IHNlbmREZWZhdWx0UGlpID0gZ2V0Q2xpZW50KCk/LmdldE9wdGlvbnMoKS5zZW5kRGVmYXVsdFBpaTtcblxuICAgIGxldCBzZW50cnlUcmFjZUhlYWRlcjtcbiAgICBsZXQgYmFnZ2FnZUhlYWRlcjtcbiAgICBjb25zdCBmdWxsSGVhZGVyc09iamVjdCA9IHt9O1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhd2FpdGVkSGVhZGVycyA9IGF3YWl0IG9wdGlvbnMuaGVhZGVycztcbiAgICAgIHNlbnRyeVRyYWNlSGVhZGVyID0gYXdhaXRlZEhlYWRlcnM/LmdldCgnc2VudHJ5LXRyYWNlJykgPz8gdW5kZWZpbmVkO1xuICAgICAgYmFnZ2FnZUhlYWRlciA9IGF3YWl0ZWRIZWFkZXJzPy5nZXQoJ2JhZ2dhZ2UnKTtcbiAgICAgIGF3YWl0ZWRIZWFkZXJzPy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIGZ1bGxIZWFkZXJzT2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIERFQlVHX0JVSUxEICYmXG4gICAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICAgIFwiU2VudHJ5IHdhc24ndCBhYmxlIHRvIGV4dHJhY3QgdGhlIHRyYWNpbmcgaGVhZGVycyBmb3IgYSBzZXJ2ZXIgYWN0aW9uLiBXaWxsIG5vdCB0cmFjZSB0aGlzIHJlcXVlc3QuXCIsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaXNvbGF0aW9uU2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKGBzZXJ2ZXJBY3Rpb24vJHtzZXJ2ZXJBY3Rpb25OYW1lfWApO1xuICAgIGlzb2xhdGlvblNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICBub3JtYWxpemVkUmVxdWVzdDoge1xuICAgICAgICBoZWFkZXJzOiBmdWxsSGVhZGVyc09iamVjdCxcbiAgICAgIH0gLFxuICAgIH0pO1xuXG4gICAgLy8gTm9ybWFsbHksIHRoZXJlIGlzIGFuIGFjdGl2ZSBzcGFuIGhlcmUgKGZyb20gTmV4dC5qcyBPVEVMKSBhbmQgd2UganVzdCB1c2UgdGhhdCBhcyBwYXJlbnRcbiAgICAvLyBFbHNlLCB3ZSBtYW51YWxseSBjb250aW51ZVRyYWNlIGZyb20gdGhlIGluY29taW5nIGhlYWRlcnNcbiAgICBjb25zdCBjb250aW51ZVRyYWNlSWZOb0FjdGl2ZVNwYW4gPSBnZXRBY3RpdmVTcGFuKClcbiAgICAgID8gKF9vcHRzLCBjYWxsYmFjaykgPT4gY2FsbGJhY2soKVxuICAgICAgOiBjb250aW51ZVRyYWNlO1xuXG4gICAgcmV0dXJuIGNvbnRpbnVlVHJhY2VJZk5vQWN0aXZlU3BhbihcbiAgICAgIHtcbiAgICAgICAgc2VudHJ5VHJhY2U6IHNlbnRyeVRyYWNlSGVhZGVyLFxuICAgICAgICBiYWdnYWdlOiBiYWdnYWdlSGVhZGVyLFxuICAgICAgfSxcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgc3RhcnRTcGFuKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBvcDogJ2Z1bmN0aW9uLnNlcnZlcl9hY3Rpb24nLFxuICAgICAgICAgICAgICBuYW1lOiBgc2VydmVyQWN0aW9uLyR7c2VydmVyQWN0aW9uTmFtZX1gLFxuICAgICAgICAgICAgICBmb3JjZVRyYW5zYWN0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgW1NFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTogJ3JvdXRlJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYyBzcGFuID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaGFuZGxlQ2FsbGJhY2tFcnJvcnMoY2FsbGJhY2ssIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gcmVwb3J0IFwibm90LWZvdW5kXCJzXG4gICAgICAgICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAnbm90X2ZvdW5kJyB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBEb24ndCBkbyBhbnl0aGluZyBmb3IgcmVkaXJlY3RzXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdpbnRlcm5hbF9lcnJvcicgfSk7XG4gICAgICAgICAgICAgICAgICBjYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWNvcmRSZXNwb25zZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5yZWNvcmRSZXNwb25zZSA6IHNlbmREZWZhdWx0UGlpKSB7XG4gICAgICAgICAgICAgICAgZ2V0SXNvbGF0aW9uU2NvcGUoKS5zZXRFeHRyYSgnc2VydmVyX2FjdGlvbl9yZXN1bHQnLCByZXN1bHQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZvcm1EYXRhLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGdldElzb2xhdGlvblNjb3BlKCkuc2V0RXh0cmEoXG4gICAgICAgICAgICAgICAgICAgIGBzZXJ2ZXJfYWN0aW9uX2Zvcm1fZGF0YS4ke2tleX1gLFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiAnW25vbi1zdHJpbmcgdmFsdWVdJyxcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHZlcmNlbFdhaXRVbnRpbChmbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyB3aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aXRoU2VydmVyQWN0aW9uSW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/withServerActionInstrumentation.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/wrapGenerationFunctionWithSentry.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/wrapGenerationFunctionWithSentry.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapGenerationFunctionWithSentry: () => (/* binding */ wrapGenerationFunctionWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/request.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/nextNavigationErrorUtils.js\");\n/* harmony import */ var _span_attributes_with_logic_attached_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"./node_modules/@sentry/nextjs/build/esm/common/span-attributes-with-logic-attached.js\");\n/* harmony import */ var _utils_tracingUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/tracingUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/tracingUtils.js\");\n\n\n\n\n\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapGenerationFunctionWithSentry(\n  generationFunction,\n  context,\n) {\n  const { requestAsyncStorage, componentRoute, componentType, generationFunctionIdentifier } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getActiveSpan)()?.spanContext().traceId;\n      let headers = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = requestAsyncStorage?.getStore()?.headers;\n      } catch (e) {\n        /** empty */\n      }\n\n      const isolationScope = (0,_utils_tracingUtils_js__WEBPACK_IMPORTED_MODULE_1__.commonObjectToIsolationScope)(headers);\n\n      const activeSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getActiveSpan)();\n      if (activeSpan) {\n        const rootSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getRootSpan)(activeSpan);\n        const { scope } = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCapturedScopesOnSpan)(rootSpan);\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.setCapturedScopesOnSpan)(rootSpan, scope ?? new _sentry_core__WEBPACK_IMPORTED_MODULE_3__.Scope(), isolationScope);\n      }\n\n      let data = undefined;\n      if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.getClient)()?.getOptions().sendDefaultPii) {\n        const props = args[0];\n        const params = props && typeof props === 'object' && 'params' in props ? props.params : undefined;\n        const searchParams =\n          props && typeof props === 'object' && 'searchParams' in props ? props.searchParams : undefined;\n        data = { params, searchParams };\n      }\n\n      const headersDict = headers ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.winterCGHeadersToDict)(headers) : undefined;\n\n      return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.withIsolationScope)(isolationScope, () => {\n        return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.withScope)(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict,\n            } ,\n          });\n\n          const activeSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getActiveSpan)();\n          if (activeSpan) {\n            const rootSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getRootSpan)(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(_span_attributes_with_logic_attached_js__WEBPACK_IMPORTED_MODULE_6__.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          const propagationContext = (0,_utils_tracingUtils_js__WEBPACK_IMPORTED_MODULE_1__.commonObjectToPropagationContext)(\n            headers,\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.propagationContextFromHeaders)(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n          );\n\n          if (requestTraceId) {\n            propagationContext.traceId = requestTraceId;\n          }\n\n          scope.setPropagationContext(propagationContext);\n\n          scope.setExtra('route_data', data);\n\n          return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.startSpanManual)(\n            {\n              op: 'function.nextjs',\n              name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n              attributes: {\n                [_sentry_core__WEBPACK_IMPORTED_MODULE_9__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [_sentry_core__WEBPACK_IMPORTED_MODULE_9__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': generationFunctionIdentifier,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_10__.handleCallbackErrors)(\n                () => originalFunction.apply(thisArg, args),\n                err => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_11__.isNotFoundNavigationError)(err)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_12__.SPAN_STATUS_ERROR, message: 'not_found' });\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getRootSpan)(span).setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_12__.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_11__.isRedirectNavigationError)(err)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_12__.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_12__.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getRootSpan)(span).setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_12__.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_13__.captureException)(err, {\n                      mechanism: {\n                        handled: false,\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapGenerationFunctionWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/wrapGenerationFunctionWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/wrapMiddlewareWithSentry.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/wrapMiddlewareWithSentry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapMiddlewareWithSentry: () => (/* binding */ wrapMiddlewareWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/request.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/responseEnd.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js\");\n\n\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */\nfunction wrapMiddlewareWithSentry(\n  middleware,\n) {\n  return new Proxy(middleware, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n      return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.withIsolationScope)(isolationScope => {\n        const req = args[0];\n        const currentScope = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n\n        let spanName;\n        let spanSource;\n\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.winterCGRequestToRequestData)(req),\n          });\n          spanName = `middleware ${req.method} ${new URL(req.url).pathname}`;\n          spanSource = 'url';\n        } else {\n          spanName = 'middleware';\n          spanSource = 'component';\n        }\n\n        currentScope.setTransactionName(spanName);\n\n        const activeSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getActiveSpan)();\n\n        if (activeSpan) {\n          // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n          // rely on that for parameterization.\n          spanName = 'middleware';\n          spanSource = 'component';\n\n          const rootSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getRootSpan)(activeSpan);\n          if (rootSpan) {\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.setCapturedScopesOnSpan)(rootSpan, currentScope, isolationScope);\n          }\n        }\n\n        return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.startSpan)(\n          {\n            name: spanName,\n            op: 'http.server.middleware',\n            attributes: {\n              [_sentry_core__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n              [_sentry_core__WEBPACK_IMPORTED_MODULE_5__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrapMiddlewareWithSentry',\n            },\n          },\n          () => {\n            return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.handleCallbackErrors)(\n              () => wrappingTarget.apply(thisArg, args),\n              error => {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.captureException)(error, {\n                  mechanism: {\n                    type: 'instrument',\n                    handled: false,\n                  },\n                });\n              },\n              () => {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.vercelWaitUntil)((0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_9__.flushSafelyWithTimeout)());\n              },\n            );\n          },\n        );\n      });\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapMiddlewareWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi93cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBOFI7QUFDOU47O0FBRWhFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0VBQWtCO0FBQy9CO0FBQ0EsNkJBQTZCLDZEQUFlOztBQUU1QztBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsMEVBQTRCO0FBQzNELFdBQVc7QUFDWCxtQ0FBbUMsWUFBWSxFQUFFLDBCQUEwQjtBQUMzRTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsMkJBQTJCLDJEQUFhOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCQUEyQix5REFBVztBQUN0QztBQUNBLFlBQVkscUVBQXVCO0FBQ25DO0FBQ0E7O0FBRUEsZUFBZSx1REFBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMEVBQWdDO0FBQy9DLGVBQWUsMEVBQWdDO0FBQy9DLGFBQWE7QUFDYixXQUFXO0FBQ1g7QUFDQSxtQkFBbUIsa0VBQW9CO0FBQ3ZDO0FBQ0E7QUFDQSxnQkFBZ0IsOERBQWdCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixpQkFBaUI7QUFDakIsZUFBZTtBQUNmO0FBQ0EsZ0JBQWdCLDZEQUFlLENBQUMsNkVBQXNCO0FBQ3RELGVBQWU7QUFDZjtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi93cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanM/OGE3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3aXRoSXNvbGF0aW9uU2NvcGUsIGdldEN1cnJlbnRTY29wZSwgd2ludGVyQ0dSZXF1ZXN0VG9SZXF1ZXN0RGF0YSwgZ2V0QWN0aXZlU3BhbiwgZ2V0Um9vdFNwYW4sIHNldENhcHR1cmVkU2NvcGVzT25TcGFuLCBzdGFydFNwYW4sIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSwgaGFuZGxlQ2FsbGJhY2tFcnJvcnMsIGNhcHR1cmVFeGNlcHRpb24sIHZlcmNlbFdhaXRVbnRpbCB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5pbXBvcnQgeyBmbHVzaFNhZmVseVdpdGhUaW1lb3V0IH0gZnJvbSAnLi91dGlscy9yZXNwb25zZUVuZC5qcyc7XG5cbi8qKlxuICogV3JhcHMgTmV4dC5qcyBtaWRkbGV3YXJlIHdpdGggU2VudHJ5IGVycm9yIGFuZCBwZXJmb3JtYW5jZSBpbnN0cnVtZW50YXRpb24uXG4gKlxuICogQHBhcmFtIG1pZGRsZXdhcmUgVGhlIG1pZGRsZXdhcmUgaGFuZGxlci5cbiAqIEByZXR1cm5zIGEgd3JhcHBlZCBtaWRkbGV3YXJlIGhhbmRsZXIuXG4gKi9cbmZ1bmN0aW9uIHdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeShcbiAgbWlkZGxld2FyZSxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG1pZGRsZXdhcmUsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICAvLyBUT0RPOiBXZSBzdGlsbCBzaG91bGQgYWRkIGNlbnRyYWwgaXNvbGF0aW9uIHNjb3BlIGNyZWF0aW9uIGZvciB3aGVuIG91ciBidWlsZC10aW1lIGluc3RydW1lbnRhdGlvbiBkb2VzIG5vdCB3b3JrIGFueW1vcmUgd2l0aCB0dXJib3BhY2suXG4gICAgICByZXR1cm4gd2l0aElzb2xhdGlvblNjb3BlKGlzb2xhdGlvblNjb3BlID0+IHtcbiAgICAgICAgY29uc3QgcmVxID0gYXJnc1swXTtcbiAgICAgICAgY29uc3QgY3VycmVudFNjb3BlID0gZ2V0Q3VycmVudFNjb3BlKCk7XG5cbiAgICAgICAgbGV0IHNwYW5OYW1lO1xuICAgICAgICBsZXQgc3BhblNvdXJjZTtcblxuICAgICAgICBpZiAocmVxIGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgICAgIGlzb2xhdGlvblNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICAgICAgICBub3JtYWxpemVkUmVxdWVzdDogd2ludGVyQ0dSZXF1ZXN0VG9SZXF1ZXN0RGF0YShyZXEpLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNwYW5OYW1lID0gYG1pZGRsZXdhcmUgJHtyZXEubWV0aG9kfSAke25ldyBVUkwocmVxLnVybCkucGF0aG5hbWV9YDtcbiAgICAgICAgICBzcGFuU291cmNlID0gJ3VybCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Bhbk5hbWUgPSAnbWlkZGxld2FyZSc7XG4gICAgICAgICAgc3BhblNvdXJjZSA9ICdjb21wb25lbnQnO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNjb3BlLnNldFRyYW5zYWN0aW9uTmFtZShzcGFuTmFtZSk7XG5cbiAgICAgICAgY29uc3QgYWN0aXZlU3BhbiA9IGdldEFjdGl2ZVNwYW4oKTtcblxuICAgICAgICBpZiAoYWN0aXZlU3Bhbikge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGFjdGl2ZSBzcGFuLCBpdCBsaWtlbHkgbWVhbnMgdGhhdCB0aGUgYXV0b21hdGljIE5leHQuanMgT1RFTCBpbnN0cnVtZW50YXRpb24gd29ya2VkIGFuZCB3ZSBjYW5cbiAgICAgICAgICAvLyByZWx5IG9uIHRoYXQgZm9yIHBhcmFtZXRlcml6YXRpb24uXG4gICAgICAgICAgc3Bhbk5hbWUgPSAnbWlkZGxld2FyZSc7XG4gICAgICAgICAgc3BhblNvdXJjZSA9ICdjb21wb25lbnQnO1xuXG4gICAgICAgICAgY29uc3Qgcm9vdFNwYW4gPSBnZXRSb290U3BhbihhY3RpdmVTcGFuKTtcbiAgICAgICAgICBpZiAocm9vdFNwYW4pIHtcbiAgICAgICAgICAgIHNldENhcHR1cmVkU2NvcGVzT25TcGFuKHJvb3RTcGFuLCBjdXJyZW50U2NvcGUsIGlzb2xhdGlvblNjb3BlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhcnRTcGFuKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IHNwYW5OYW1lLFxuICAgICAgICAgICAgb3A6ICdodHRwLnNlcnZlci5taWRkbGV3YXJlJyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgW1NFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTogc3BhblNvdXJjZSxcbiAgICAgICAgICAgICAgW1NFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLndyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrRXJyb3JzKFxuICAgICAgICAgICAgICAoKSA9PiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKSxcbiAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5zdHJ1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZlcmNlbFdhaXRVbnRpbChmbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydCB7IHdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/wrapMiddlewareWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/wrapRouteHandlerWithSentry.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/wrapRouteHandlerWithSentry.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapRouteHandlerWithSentry: () => (/* binding */ wrapRouteHandlerWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/request.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/nextNavigationErrorUtils.js\");\n/* harmony import */ var _utils_tracingUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/tracingUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/tracingUtils.js\");\n\n\n\n\n/**\n * Wraps a Next.js App Router Route handler with Sentry error and performance instrumentation.\n *\n * NOTICE: This wrapper is for App Router API routes. If you are looking to wrap Pages Router API routes use `wrapApiHandlerWithSentry` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapRouteHandlerWithSentry(\n  routeHandler,\n  context,\n) {\n  const { method, parameterizedRoute, headers } = context;\n\n  return new Proxy(routeHandler, {\n    apply: async (originalFunction, thisArg, args) => {\n      const activeSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getActiveSpan)();\n      const rootSpan = activeSpan ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getRootSpan)(activeSpan) : undefined;\n\n      let edgeRuntimeIsolationScopeOverride;\n      if (rootSpan && \"edge\" === 'edge') {\n        const isolationScope = (0,_utils_tracingUtils_js__WEBPACK_IMPORTED_MODULE_1__.commonObjectToIsolationScope)(headers);\n        const { scope } = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCapturedScopesOnSpan)(rootSpan);\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.setCapturedScopesOnSpan)(rootSpan, scope ?? new _sentry_core__WEBPACK_IMPORTED_MODULE_3__.Scope(), isolationScope);\n\n        edgeRuntimeIsolationScopeOverride = isolationScope;\n\n        rootSpan.updateName(`${method} ${parameterizedRoute}`);\n        rootSpan.setAttribute(_sentry_core__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n        rootSpan.setAttribute(_sentry_core__WEBPACK_IMPORTED_MODULE_4__.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'http.server');\n      }\n\n      return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.withIsolationScope)(\n         true ? edgeRuntimeIsolationScopeOverride : 0,\n        () => {\n          return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.withScope)(async scope => {\n            scope.setTransactionName(`${method} ${parameterizedRoute}`);\n\n            if (true) {\n              const completeHeadersDict = headers ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.winterCGHeadersToDict)(headers) : {};\n              const incomingPropagationContext = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.propagationContextFromHeaders)(\n                completeHeadersDict['sentry-trace'],\n                completeHeadersDict['baggage'],\n              );\n              scope.setPropagationContext(incomingPropagationContext);\n              scope.setSDKProcessingMetadata({\n                normalizedRequest: {\n                  method,\n                  headers: completeHeadersDict,\n                } ,\n              });\n            }\n\n            const response = await (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.handleCallbackErrors)(\n              () => originalFunction.apply(thisArg, args),\n              error => {\n                // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n                if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_9__.isRedirectNavigationError)(error)) ; else if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_9__.isNotFoundNavigationError)(error)) {\n                  if (activeSpan) {\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_10__.setHttpStatus)(activeSpan, 404);\n                  }\n                  if (rootSpan) {\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_10__.setHttpStatus)(rootSpan, 404);\n                  }\n                } else {\n                  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_11__.captureException)(error, {\n                    mechanism: {\n                      handled: false,\n                    },\n                  });\n                }\n              },\n            );\n\n            try {\n              if (response.status) {\n                if (activeSpan) {\n                  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_10__.setHttpStatus)(activeSpan, response.status);\n                }\n                if (rootSpan) {\n                  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_10__.setHttpStatus)(rootSpan, response.status);\n                }\n              }\n            } catch {\n              // best effort - response may be undefined?\n            }\n\n            return response;\n          });\n        },\n      );\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapRouteHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2NvbW1vbi93cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQWtWO0FBQzdPO0FBQzlCOztBQUV2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0NBQXNDOztBQUVoRDtBQUNBO0FBQ0EseUJBQXlCLDJEQUFhO0FBQ3RDLG9DQUFvQyx5REFBVzs7QUFFL0M7QUFDQSxzQkFBc0IsTUFBd0I7QUFDOUMsK0JBQStCLG9GQUE0QjtBQUMzRCxnQkFBZ0IsUUFBUSxFQUFFLHFFQUF1QjtBQUNqRCxRQUFRLHFFQUF1Qix3QkFBd0IsK0NBQUs7O0FBRTVEOztBQUVBLCtCQUErQixRQUFRLEVBQUUsbUJBQW1CO0FBQzVELDhCQUE4QiwwRUFBZ0M7QUFDOUQsOEJBQThCLHNFQUE0QjtBQUMxRDs7QUFFQSxhQUFhLGdFQUFrQjtBQUMvQixRQUFRLEtBQW1DLHVDQUF1QyxDQUFtQjtBQUNyRztBQUNBLGlCQUFpQix1REFBUztBQUMxQix3Q0FBd0MsUUFBUSxFQUFFLG1CQUFtQjs7QUFFckUsZ0JBQWdCLElBQW1DO0FBQ25ELG9EQUFvRCxtRUFBcUI7QUFDekUsaURBQWlELDJFQUE2QjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLGVBQWU7QUFDZjs7QUFFQSxtQ0FBbUMsa0VBQW9CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1RkFBeUIsV0FBVyxTQUFTLHVGQUF5QjtBQUMxRjtBQUNBLG9CQUFvQiw0REFBYTtBQUNqQztBQUNBO0FBQ0Esb0JBQW9CLDREQUFhO0FBQ2pDO0FBQ0Esa0JBQWtCO0FBQ2xCLGtCQUFrQiwrREFBZ0I7QUFDbEM7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkI7QUFDQSxlQUFlO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDREQUFhO0FBQy9CO0FBQ0E7QUFDQSxrQkFBa0IsNERBQWE7QUFDL0I7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRXNDO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9lc20vY29tbW9uL3dyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5LmpzPzdjMjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWN0aXZlU3BhbiwgZ2V0Um9vdFNwYW4sIGdldENhcHR1cmVkU2NvcGVzT25TcGFuLCBzZXRDYXB0dXJlZFNjb3Blc09uU3BhbiwgU2NvcGUsIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFLCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCB3aXRoSXNvbGF0aW9uU2NvcGUsIGdldElzb2xhdGlvblNjb3BlLCB3aXRoU2NvcGUsIHdpbnRlckNHSGVhZGVyc1RvRGljdCwgcHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnMsIGhhbmRsZUNhbGxiYWNrRXJyb3JzLCBzZXRIdHRwU3RhdHVzLCBjYXB0dXJlRXhjZXB0aW9uIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3IsIGlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3IgfSBmcm9tICcuL25leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcyc7XG5pbXBvcnQgeyBjb21tb25PYmplY3RUb0lzb2xhdGlvblNjb3BlIH0gZnJvbSAnLi91dGlscy90cmFjaW5nVXRpbHMuanMnO1xuXG4vKipcbiAqIFdyYXBzIGEgTmV4dC5qcyBBcHAgUm91dGVyIFJvdXRlIGhhbmRsZXIgd2l0aCBTZW50cnkgZXJyb3IgYW5kIHBlcmZvcm1hbmNlIGluc3RydW1lbnRhdGlvbi5cbiAqXG4gKiBOT1RJQ0U6IFRoaXMgd3JhcHBlciBpcyBmb3IgQXBwIFJvdXRlciBBUEkgcm91dGVzLiBJZiB5b3UgYXJlIGxvb2tpbmcgdG8gd3JhcCBQYWdlcyBSb3V0ZXIgQVBJIHJvdXRlcyB1c2UgYHdyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeWAgaW5zdGVhZC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIHdyYXBSb3V0ZUhhbmRsZXJXaXRoU2VudHJ5KFxuICByb3V0ZUhhbmRsZXIsXG4gIGNvbnRleHQsXG4pIHtcbiAgY29uc3QgeyBtZXRob2QsIHBhcmFtZXRlcml6ZWRSb3V0ZSwgaGVhZGVycyB9ID0gY29udGV4dDtcblxuICByZXR1cm4gbmV3IFByb3h5KHJvdXRlSGFuZGxlciwge1xuICAgIGFwcGx5OiBhc3luYyAob3JpZ2luYWxGdW5jdGlvbiwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgY29uc3QgYWN0aXZlU3BhbiA9IGdldEFjdGl2ZVNwYW4oKTtcbiAgICAgIGNvbnN0IHJvb3RTcGFuID0gYWN0aXZlU3BhbiA/IGdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pIDogdW5kZWZpbmVkO1xuXG4gICAgICBsZXQgZWRnZVJ1bnRpbWVJc29sYXRpb25TY29wZU92ZXJyaWRlO1xuICAgICAgaWYgKHJvb3RTcGFuICYmIHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gJ2VkZ2UnKSB7XG4gICAgICAgIGNvbnN0IGlzb2xhdGlvblNjb3BlID0gY29tbW9uT2JqZWN0VG9Jc29sYXRpb25TY29wZShoZWFkZXJzKTtcbiAgICAgICAgY29uc3QgeyBzY29wZSB9ID0gZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW4ocm9vdFNwYW4pO1xuICAgICAgICBzZXRDYXB0dXJlZFNjb3Blc09uU3Bhbihyb290U3Bhbiwgc2NvcGUgPz8gbmV3IFNjb3BlKCksIGlzb2xhdGlvblNjb3BlKTtcblxuICAgICAgICBlZGdlUnVudGltZUlzb2xhdGlvblNjb3BlT3ZlcnJpZGUgPSBpc29sYXRpb25TY29wZTtcblxuICAgICAgICByb290U3Bhbi51cGRhdGVOYW1lKGAke21ldGhvZH0gJHtwYXJhbWV0ZXJpemVkUm91dGV9YCk7XG4gICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSwgJ3JvdXRlJyk7XG4gICAgICAgIHJvb3RTcGFuLnNldEF0dHJpYnV0ZShTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QLCAnaHR0cC5zZXJ2ZXInKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdpdGhJc29sYXRpb25TY29wZShcbiAgICAgICAgcHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSAnZWRnZScgPyBlZGdlUnVudGltZUlzb2xhdGlvblNjb3BlT3ZlcnJpZGUgOiBnZXRJc29sYXRpb25TY29wZSgpLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHdpdGhTY29wZShhc3luYyBzY29wZSA9PiB7XG4gICAgICAgICAgICBzY29wZS5zZXRUcmFuc2FjdGlvbk5hbWUoYCR7bWV0aG9kfSAke3BhcmFtZXRlcml6ZWRSb3V0ZX1gKTtcblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gJ2VkZ2UnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlSGVhZGVyc0RpY3QgPSBoZWFkZXJzID8gd2ludGVyQ0dIZWFkZXJzVG9EaWN0KGhlYWRlcnMpIDoge307XG4gICAgICAgICAgICAgIGNvbnN0IGluY29taW5nUHJvcGFnYXRpb25Db250ZXh0ID0gcHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnMoXG4gICAgICAgICAgICAgICAgY29tcGxldGVIZWFkZXJzRGljdFsnc2VudHJ5LXRyYWNlJ10sXG4gICAgICAgICAgICAgICAgY29tcGxldGVIZWFkZXJzRGljdFsnYmFnZ2FnZSddLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzY29wZS5zZXRQcm9wYWdhdGlvbkNvbnRleHQoaW5jb21pbmdQcm9wYWdhdGlvbkNvbnRleHQpO1xuICAgICAgICAgICAgICBzY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRSZXF1ZXN0OiB7XG4gICAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgICBoZWFkZXJzOiBjb21wbGV0ZUhlYWRlcnNEaWN0LFxuICAgICAgICAgICAgICAgIH0gLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBoYW5kbGVDYWxsYmFja0Vycm9ycyhcbiAgICAgICAgICAgICAgKCkgPT4gb3JpZ2luYWxGdW5jdGlvbi5hcHBseSh0aGlzQXJnLCBhcmdzKSxcbiAgICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIC8vIE5leHQuanMgdGhyb3dzIGVycm9ycyB3aGVuIGNhbGxpbmcgYHJlZGlyZWN0KClgLiBXZSBkb24ndCB3YW5uYSByZXBvcnQgdGhlc2UuXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3IoZXJyb3IpKSA7IGVsc2UgaWYgKGlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlU3Bhbikge1xuICAgICAgICAgICAgICAgICAgICBzZXRIdHRwU3RhdHVzKGFjdGl2ZVNwYW4sIDQwNCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAocm9vdFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SHR0cFN0YXR1cyhyb290U3BhbiwgNDA0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY2FwdHVyZUV4Y2VwdGlvbihlcnJvciwge1xuICAgICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlU3Bhbikge1xuICAgICAgICAgICAgICAgICAgc2V0SHR0cFN0YXR1cyhhY3RpdmVTcGFuLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocm9vdFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgIHNldEh0dHBTdGF0dXMocm9vdFNwYW4sIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgLy8gYmVzdCBlZmZvcnQgLSByZXNwb25zZSBtYXkgYmUgdW5kZWZpbmVkP1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgeyB3cmFwUm91dGVIYW5kbGVyV2l0aFNlbnRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcFJvdXRlSGFuZGxlcldpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/wrapRouteHandlerWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/common/wrapServerComponentWithSentry.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/common/wrapServerComponentWithSentry.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapServerComponentWithSentry: () => (/* binding */ wrapServerComponentWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/request.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js\");\n/* harmony import */ var _nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/nextNavigationErrorUtils.js\");\n/* harmony import */ var _span_attributes_with_logic_attached_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"./node_modules/@sentry/nextjs/build/esm/common/span-attributes-with-logic-attached.js\");\n/* harmony import */ var _utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/responseEnd.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js\");\n/* harmony import */ var _utils_tracingUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/tracingUtils.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/tracingUtils.js\");\n\n\n\n\n\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapServerComponentWithSentry(\n  appDirComponent,\n  context,\n) {\n  const { componentRoute, componentType } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. 🤯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getActiveSpan)()?.spanContext().traceId;\n      const isolationScope = (0,_utils_tracingUtils_js__WEBPACK_IMPORTED_MODULE_1__.commonObjectToIsolationScope)(context.headers);\n\n      const activeSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getActiveSpan)();\n      if (activeSpan) {\n        const rootSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getRootSpan)(activeSpan);\n        const { scope } = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getCapturedScopesOnSpan)(rootSpan);\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.setCapturedScopesOnSpan)(rootSpan, scope ?? new _sentry_core__WEBPACK_IMPORTED_MODULE_3__.Scope(), isolationScope);\n      }\n\n      const headersDict = context.headers ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.winterCGHeadersToDict)(context.headers) : undefined;\n\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict,\n        } ,\n      });\n\n      return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.withIsolationScope)(isolationScope, () => {\n        return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.withScope)(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n\n          if (true) {\n            const propagationContext = (0,_utils_tracingUtils_js__WEBPACK_IMPORTED_MODULE_1__.commonObjectToPropagationContext)(\n              context.headers,\n              (0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.propagationContextFromHeaders)(headersDict?.['sentry-trace'], headersDict?.['baggage']),\n            );\n\n            if (requestTraceId) {\n              propagationContext.traceId = requestTraceId;\n            }\n\n            scope.setPropagationContext(propagationContext);\n          }\n\n          const activeSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getActiveSpan)();\n          if (activeSpan) {\n            const rootSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getRootSpan)(activeSpan);\n            const sentryTrace = headersDict?.['sentry-trace'];\n            if (sentryTrace) {\n              rootSpan.setAttribute(_span_attributes_with_logic_attached_js__WEBPACK_IMPORTED_MODULE_7__.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n\n          return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.startSpanManual)(\n            {\n              op: 'function.nextjs',\n              name: `${componentType} Server Component (${componentRoute})`,\n              attributes: {\n                [_sentry_core__WEBPACK_IMPORTED_MODULE_9__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n                [_sentry_core__WEBPACK_IMPORTED_MODULE_9__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs',\n                'sentry.nextjs.ssr.function.type': componentType,\n                'sentry.nextjs.ssr.function.route': componentRoute,\n              },\n            },\n            span => {\n              return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_10__.handleCallbackErrors)(\n                () => originalFunction.apply(thisArg, args),\n                error => {\n                  // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n                  // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n                  if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_11__.isNotFoundNavigationError)(error)) {\n                    // We don't want to report \"not-found\"s\n                    span.setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_12__.SPAN_STATUS_ERROR, message: 'not_found' });\n                  } else if ((0,_nextNavigationErrorUtils_js__WEBPACK_IMPORTED_MODULE_11__.isRedirectNavigationError)(error)) {\n                    // We don't want to report redirects\n                    span.setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_12__.SPAN_STATUS_OK });\n                  } else {\n                    span.setStatus({ code: _sentry_core__WEBPACK_IMPORTED_MODULE_12__.SPAN_STATUS_ERROR, message: 'internal_error' });\n                    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_13__.captureException)(error, {\n                      mechanism: {\n                        handled: false,\n                      },\n                    });\n                  }\n                },\n                () => {\n                  span.end();\n                  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_14__.vercelWaitUntil)((0,_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_15__.flushSafelyWithTimeout)());\n                },\n              );\n            },\n          );\n        });\n      });\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapServerComponentWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/common/wrapServerComponentWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/edge/distDirRewriteFramesIntegration.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/edge/distDirRewriteFramesIntegration.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   distDirRewriteFramesIntegration: () => (/* binding */ distDirRewriteFramesIntegration)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/vendor/escapeStringForRegex.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/rewriteframes.js\");\n\n\nconst distDirRewriteFramesIntegration = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.defineIntegration)(({ distDirName }) => {\n  const distDirAbsPath = distDirName.replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // Normally we would use `path.resolve` to obtain the absolute path we will strip from the stack frame to align with\n  // the uploaded artifacts, however we don't have access to that API in edge so we need to be a bit more lax.\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(`.*${(0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.escapeStringForRegex)(distDirAbsPath)}`);\n\n  const rewriteFramesIntegrationInstance = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.rewriteFramesIntegration)({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  return {\n    ...rewriteFramesIntegrationInstance,\n    name: 'DistDirRewriteFrames',\n  };\n});\n\n\n//# sourceMappingURL=distDirRewriteFramesIntegration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2VkZ2UvZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWlHOztBQUVqRyx3Q0FBd0MsK0RBQWlCLElBQUksYUFBYTtBQUMxRSw4REFBOEQ7O0FBRTlEO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxrRUFBb0IsaUJBQWlCOztBQUV4RiwyQ0FBMkMsc0VBQXdCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFMEM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9lZGdlL2Rpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24uanM/MTNiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVJbnRlZ3JhdGlvbiwgZXNjYXBlU3RyaW5nRm9yUmVnZXgsIHJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiB9IGZyb20gJ0BzZW50cnkvY29yZSc7XG5cbmNvbnN0IGRpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24gPSBkZWZpbmVJbnRlZ3JhdGlvbigoeyBkaXN0RGlyTmFtZSB9KSA9PiB7XG4gIGNvbnN0IGRpc3REaXJBYnNQYXRoID0gZGlzdERpck5hbWUucmVwbGFjZSgvKFxcL3xcXFxcKSQvLCAnJyk7IC8vIFdlIHN0cmlwIHRyYWlsaW5nIHNsYXNoZXMgYmVjYXVzZSBcImFwcDovLy9fbmV4dFwiIGFsc28gZG9lc24ndCBoYXZlIG9uZVxuXG4gIC8vIE5vcm1hbGx5IHdlIHdvdWxkIHVzZSBgcGF0aC5yZXNvbHZlYCB0byBvYnRhaW4gdGhlIGFic29sdXRlIHBhdGggd2Ugd2lsbCBzdHJpcCBmcm9tIHRoZSBzdGFjayBmcmFtZSB0byBhbGlnbiB3aXRoXG4gIC8vIHRoZSB1cGxvYWRlZCBhcnRpZmFjdHMsIGhvd2V2ZXIgd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdGhhdCBBUEkgaW4gZWRnZSBzbyB3ZSBuZWVkIHRvIGJlIGEgYml0IG1vcmUgbGF4LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHNlbnRyeS1pbnRlcm5hbC9zZGsvbm8tcmVnZXhwLWNvbnN0cnVjdG9yIC0tIHVzZXIgaW5wdXQgaXMgZXNjYXBlZFxuICBjb25zdCBTT1VSQ0VNQVBfRklMRU5BTUVfUkVHRVggPSBuZXcgUmVnRXhwKGAuKiR7ZXNjYXBlU3RyaW5nRm9yUmVnZXgoZGlzdERpckFic1BhdGgpfWApO1xuXG4gIGNvbnN0IHJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbkluc3RhbmNlID0gcmV3cml0ZUZyYW1lc0ludGVncmF0aW9uKHtcbiAgICBpdGVyYXRlZTogZnJhbWUgPT4ge1xuICAgICAgZnJhbWUuZmlsZW5hbWUgPSBmcmFtZS5maWxlbmFtZT8ucmVwbGFjZShTT1VSQ0VNQVBfRklMRU5BTUVfUkVHRVgsICdhcHA6Ly8vX25leHQnKTtcbiAgICAgIHJldHVybiBmcmFtZTtcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIC4uLnJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbkluc3RhbmNlLFxuICAgIG5hbWU6ICdEaXN0RGlyUmV3cml0ZUZyYW1lcycsXG4gIH07XG59KTtcblxuZXhwb3J0IHsgZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/edge/distDirRewriteFramesIntegration.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/edge/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/edge/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_VERSION: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_OP: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_SENTRY_OP),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_SOURCE: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE),\n/* harmony export */   Scope: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.Scope),\n/* harmony export */   VercelEdgeClient: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.VercelEdgeClient),\n/* harmony export */   addBreadcrumb: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.addBreadcrumb),\n/* harmony export */   addEventProcessor: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.addEventProcessor),\n/* harmony export */   addIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.addIntegration),\n/* harmony export */   captureCheckIn: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.captureCheckIn),\n/* harmony export */   captureConsoleIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.captureConsoleIntegration),\n/* harmony export */   captureEvent: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.captureEvent),\n/* harmony export */   captureException: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.captureException),\n/* harmony export */   captureFeedback: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.captureFeedback),\n/* harmony export */   captureMessage: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.captureMessage),\n/* harmony export */   captureRequestError: () => (/* reexport safe */ _common_captureRequestError_js__WEBPACK_IMPORTED_MODULE_14__.captureRequestError),\n/* harmony export */   captureUnderscoreErrorException: () => (/* reexport safe */ _common_pages_router_instrumentation_error_js__WEBPACK_IMPORTED_MODULE_15__.captureUnderscoreErrorException),\n/* harmony export */   close: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.close),\n/* harmony export */   consoleIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.consoleIntegration),\n/* harmony export */   consoleLoggingIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.consoleLoggingIntegration),\n/* harmony export */   continueTrace: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.continueTrace),\n/* harmony export */   createTransport: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.createTransport),\n/* harmony export */   dedupeIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.dedupeIntegration),\n/* harmony export */   eventFiltersIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.eventFiltersIntegration),\n/* harmony export */   extraErrorDataIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.extraErrorDataIntegration),\n/* harmony export */   flush: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.flush),\n/* harmony export */   functionToStringIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.functionToStringIntegration),\n/* harmony export */   getActiveSpan: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getActiveSpan),\n/* harmony export */   getClient: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getClient),\n/* harmony export */   getCurrentScope: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope),\n/* harmony export */   getDefaultIntegrations: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getDefaultIntegrations),\n/* harmony export */   getGlobalScope: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getGlobalScope),\n/* harmony export */   getIsolationScope: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getIsolationScope),\n/* harmony export */   getRootSpan: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getRootSpan),\n/* harmony export */   getSpanDescendants: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getSpanDescendants),\n/* harmony export */   getSpanStatusFromHttpCode: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getSpanStatusFromHttpCode),\n/* harmony export */   getTraceData: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getTraceData),\n/* harmony export */   getTraceMetaTags: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getTraceMetaTags),\n/* harmony export */   inboundFiltersIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.inboundFiltersIntegration),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   instrumentSupabaseClient: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.instrumentSupabaseClient),\n/* harmony export */   isEnabled: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.isEnabled),\n/* harmony export */   isInitialized: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.isInitialized),\n/* harmony export */   lastEventId: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.lastEventId),\n/* harmony export */   linkedErrorsIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.linkedErrorsIntegration),\n/* harmony export */   logger: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.logger),\n/* harmony export */   moduleMetadataIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.moduleMetadataIntegration),\n/* harmony export */   requestDataIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.requestDataIntegration),\n/* harmony export */   rewriteFramesIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.rewriteFramesIntegration),\n/* harmony export */   setContext: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.setContext),\n/* harmony export */   setCurrentClient: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.setCurrentClient),\n/* harmony export */   setExtra: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.setExtra),\n/* harmony export */   setExtras: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.setExtras),\n/* harmony export */   setHttpStatus: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.setHttpStatus),\n/* harmony export */   setMeasurement: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.setMeasurement),\n/* harmony export */   setTag: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.setTag),\n/* harmony export */   setTags: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.setTags),\n/* harmony export */   setUser: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.setUser),\n/* harmony export */   spanToBaggageHeader: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.spanToBaggageHeader),\n/* harmony export */   spanToJSON: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.spanToJSON),\n/* harmony export */   spanToTraceHeader: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.spanToTraceHeader),\n/* harmony export */   startInactiveSpan: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.startInactiveSpan),\n/* harmony export */   startNewTrace: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.startNewTrace),\n/* harmony export */   startSpan: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.startSpan),\n/* harmony export */   startSpanManual: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.startSpanManual),\n/* harmony export */   supabaseIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.supabaseIntegration),\n/* harmony export */   suppressTracing: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.suppressTracing),\n/* harmony export */   trpcMiddleware: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.trpcMiddleware),\n/* harmony export */   winterCGFetchIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.winterCGFetchIntegration),\n/* harmony export */   withActiveSpan: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.withActiveSpan),\n/* harmony export */   withIsolationScope: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.withIsolationScope),\n/* harmony export */   withMonitor: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.withMonitor),\n/* harmony export */   withScope: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.withScope),\n/* harmony export */   withSentryConfig: () => (/* binding */ withSentryConfig),\n/* harmony export */   withServerActionInstrumentation: () => (/* reexport safe */ _common_withServerActionInstrumentation_js__WEBPACK_IMPORTED_MODULE_13__.withServerActionInstrumentation),\n/* harmony export */   wrapApiHandlerWithSentry: () => (/* reexport safe */ _wrapApiHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_16__.wrapApiHandlerWithSentry),\n/* harmony export */   wrapApiHandlerWithSentryVercelCrons: () => (/* reexport safe */ _common_pages_router_instrumentation_wrapApiHandlerWithSentryVercelCrons_js__WEBPACK_IMPORTED_MODULE_9__.wrapApiHandlerWithSentryVercelCrons),\n/* harmony export */   wrapAppGetInitialPropsWithSentry: () => (/* reexport safe */ _common_pages_router_instrumentation_wrapAppGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_3__.wrapAppGetInitialPropsWithSentry),\n/* harmony export */   wrapDocumentGetInitialPropsWithSentry: () => (/* reexport safe */ _common_pages_router_instrumentation_wrapDocumentGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_4__.wrapDocumentGetInitialPropsWithSentry),\n/* harmony export */   wrapErrorGetInitialPropsWithSentry: () => (/* reexport safe */ _common_pages_router_instrumentation_wrapErrorGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_5__.wrapErrorGetInitialPropsWithSentry),\n/* harmony export */   wrapGenerationFunctionWithSentry: () => (/* reexport safe */ _common_wrapGenerationFunctionWithSentry_js__WEBPACK_IMPORTED_MODULE_12__.wrapGenerationFunctionWithSentry),\n/* harmony export */   wrapGetInitialPropsWithSentry: () => (/* reexport safe */ _common_pages_router_instrumentation_wrapGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_2__.wrapGetInitialPropsWithSentry),\n/* harmony export */   wrapGetServerSidePropsWithSentry: () => (/* reexport safe */ _common_pages_router_instrumentation_wrapGetServerSidePropsWithSentry_js__WEBPACK_IMPORTED_MODULE_6__.wrapGetServerSidePropsWithSentry),\n/* harmony export */   wrapGetStaticPropsWithSentry: () => (/* reexport safe */ _common_pages_router_instrumentation_wrapGetStaticPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_1__.wrapGetStaticPropsWithSentry),\n/* harmony export */   wrapMcpServerWithSentry: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.wrapMcpServerWithSentry),\n/* harmony export */   wrapMiddlewareWithSentry: () => (/* reexport safe */ _common_wrapMiddlewareWithSentry_js__WEBPACK_IMPORTED_MODULE_10__.wrapMiddlewareWithSentry),\n/* harmony export */   wrapPageComponentWithSentry: () => (/* reexport safe */ _common_pages_router_instrumentation_wrapPageComponentWithSentry_js__WEBPACK_IMPORTED_MODULE_11__.wrapPageComponentWithSentry),\n/* harmony export */   wrapRouteHandlerWithSentry: () => (/* reexport safe */ _common_wrapRouteHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_8__.wrapRouteHandlerWithSentry),\n/* harmony export */   wrapServerComponentWithSentry: () => (/* reexport safe */ _common_wrapServerComponentWithSentry_js__WEBPACK_IMPORTED_MODULE_7__.wrapServerComponentWithSentry),\n/* harmony export */   zodErrorsIntegration: () => (/* reexport safe */ _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.zodErrorsIntegration)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/errors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/url.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js\");\n/* harmony import */ var _sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/vercel-edge */ \"./node_modules/@sentry/vercel-edge/build/esm/index.js\");\n/* harmony import */ var _common_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../common/utils/isBuild.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js\");\n/* harmony import */ var _common_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../common/utils/responseEnd.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js\");\n/* harmony import */ var _distDirRewriteFramesIntegration_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./distDirRewriteFramesIntegration.js */ \"./node_modules/@sentry/nextjs/build/esm/edge/distDirRewriteFramesIntegration.js\");\n/* harmony import */ var _common_pages_router_instrumentation_wrapGetStaticPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\n/* harmony import */ var _common_pages_router_instrumentation_wrapGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\n/* harmony import */ var _common_pages_router_instrumentation_wrapAppGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\n/* harmony import */ var _common_pages_router_instrumentation_wrapDocumentGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\n/* harmony import */ var _common_pages_router_instrumentation_wrapErrorGetInitialPropsWithSentry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\n/* harmony import */ var _common_pages_router_instrumentation_wrapGetServerSidePropsWithSentry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\n/* harmony import */ var _common_wrapServerComponentWithSentry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/wrapServerComponentWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/wrapServerComponentWithSentry.js\");\n/* harmony import */ var _common_wrapRouteHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/wrapRouteHandlerWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/wrapRouteHandlerWithSentry.js\");\n/* harmony import */ var _common_pages_router_instrumentation_wrapApiHandlerWithSentryVercelCrons_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\n/* harmony import */ var _common_wrapMiddlewareWithSentry_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/wrapMiddlewareWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/wrapMiddlewareWithSentry.js\");\n/* harmony import */ var _common_pages_router_instrumentation_wrapPageComponentWithSentry_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\n/* harmony import */ var _common_wrapGenerationFunctionWithSentry_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../common/wrapGenerationFunctionWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/common/wrapGenerationFunctionWithSentry.js\");\n/* harmony import */ var _common_withServerActionInstrumentation_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/withServerActionInstrumentation.js */ \"./node_modules/@sentry/nextjs/build/esm/common/withServerActionInstrumentation.js\");\n/* harmony import */ var _common_captureRequestError_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../common/captureRequestError.js */ \"./node_modules/@sentry/nextjs/build/esm/common/captureRequestError.js\");\n/* harmony import */ var _common_pages_router_instrumentation_error_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../common/pages-router-instrumentation/_error.js */ \"./node_modules/@sentry/nextjs/build/esm/common/pages-router-instrumentation/_error.js\");\n/* harmony import */ var _wrapApiHandlerWithSentry_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./wrapApiHandlerWithSentry.js */ \"./node_modules/@sentry/nextjs/build/esm/edge/wrapApiHandlerWithSentry.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst globalWithInjectedValues = _sentry_core__WEBPACK_IMPORTED_MODULE_17__.GLOBAL_OBJ\n\n;\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nfunction init(options = {}) {\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_18__.registerSpanErrorInstrumentation)();\n\n  if ((0,_common_utils_isBuild_js__WEBPACK_IMPORTED_MODULE_19__.isBuild)()) {\n    return;\n  }\n\n  const customDefaultIntegrations = (0,_sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.getDefaultIntegrations)(options);\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = \".next\" || 0;\n\n  if (distDirName) {\n    customDefaultIntegrations.push((0,_distDirRewriteFramesIntegration_js__WEBPACK_IMPORTED_MODULE_20__.distDirRewriteFramesIntegration)({ distDirName }));\n  }\n\n  const opts = {\n    defaultIntegrations: customDefaultIntegrations,\n    release: process.env._sentryRelease || globalWithInjectedValues._sentryRelease,\n    ...options,\n  };\n\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_21__.applySdkMetadata)(opts, 'nextjs', ['nextjs', 'vercel-edge']);\n\n  const client = (0,_sentry_vercel_edge__WEBPACK_IMPORTED_MODULE_0__.init)(opts);\n\n  client?.on('spanStart', span => {\n    const spanAttributes = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_22__.spanToJSON)(span).data;\n\n    // Mark all spans generated by Next.js as 'auto'\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(_sentry_core__WEBPACK_IMPORTED_MODULE_23__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // Make sure middleware spans get the right op\n    if (spanAttributes?.['next.span_type'] === 'Middleware.execute') {\n      span.setAttribute(_sentry_core__WEBPACK_IMPORTED_MODULE_23__.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'http.server.middleware');\n      span.setAttribute(_sentry_core__WEBPACK_IMPORTED_MODULE_23__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'url');\n    }\n  });\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // The otel auto inference will clobber the transaction name because the span has an http.target\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'Middleware.execute' &&\n      event.contexts?.trace?.data?.['next.span_name']\n    ) {\n      if (event.transaction) {\n        event.transaction = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_24__.stripUrlQueryAndFragment)(event.contexts.trace.data['next.span_name']);\n      }\n    }\n  });\n\n  client?.on('spanEnd', span => {\n    if (span === (0,_sentry_core__WEBPACK_IMPORTED_MODULE_22__.getRootSpan)(span)) {\n      (0,_sentry_core__WEBPACK_IMPORTED_MODULE_25__.vercelWaitUntil)((0,_common_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_26__.flushSafelyWithTimeout)());\n    }\n  });\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (false) {}\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n}\n\n/**\n * Just a passthrough in case this is imported from the client.\n */\nfunction withSentryConfig(exportedUserNextConfig) {\n  return exportedUserNextConfig;\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/edge/index.js\n");

/***/ }),

/***/ "./node_modules/@sentry/nextjs/build/esm/edge/wrapApiHandlerWithSentry.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/esm/edge/wrapApiHandlerWithSentry.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapApiHandlerWithSentry: () => (/* binding */ wrapApiHandlerWithSentry)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/request.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/vercelWaitUntil.js\");\n/* harmony import */ var _common_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/utils/responseEnd.js */ \"./node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js\");\n\n\n\n/**\n * Wraps a Next.js edge route handler with Sentry error and performance instrumentation.\n */\nfunction wrapApiHandlerWithSentry(\n  handler,\n  parameterizedRoute,\n) {\n  return new Proxy(handler, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n\n      return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.withIsolationScope)(isolationScope => {\n        const req = args[0];\n        const currentScope = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_0__.getCurrentScope)();\n\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_1__.winterCGRequestToRequestData)(req),\n          });\n          currentScope.setTransactionName(`${req.method} ${parameterizedRoute}`);\n        } else {\n          currentScope.setTransactionName(`handler (${parameterizedRoute})`);\n        }\n\n        let spanName;\n        let op = 'http.server';\n\n        // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n        // rely on that for parameterization.\n        const activeSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getActiveSpan)();\n        if (activeSpan) {\n          spanName = `handler (${parameterizedRoute})`;\n          op = undefined;\n\n          const rootSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_2__.getRootSpan)(activeSpan);\n          if (rootSpan) {\n            rootSpan.updateName(\n              req instanceof Request ? `${req.method} ${parameterizedRoute}` : `handler ${parameterizedRoute}`,\n            );\n            rootSpan.setAttributes({\n              [_sentry_core__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.server',\n              [_sentry_core__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n            });\n            (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.setCapturedScopesOnSpan)(rootSpan, currentScope, isolationScope);\n          }\n        } else if (req instanceof Request) {\n          spanName = `${req.method} ${parameterizedRoute}`;\n        } else {\n          spanName = `handler ${parameterizedRoute}`;\n        }\n\n        return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.startSpan)(\n          {\n            name: spanName,\n            op: op,\n            attributes: {\n              [_sentry_core__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n              [_sentry_core__WEBPACK_IMPORTED_MODULE_3__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrapApiHandlerWithSentry',\n            },\n          },\n          () => {\n            return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_6__.handleCallbackErrors)(\n              () => wrappingTarget.apply(thisArg, args),\n              error => {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_7__.captureException)(error, {\n                  mechanism: {\n                    type: 'instrument',\n                    handled: false,\n                  },\n                });\n              },\n              () => {\n                (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.vercelWaitUntil)((0,_common_utils_responseEnd_js__WEBPACK_IMPORTED_MODULE_9__.flushSafelyWithTimeout)());\n              },\n            );\n          },\n        );\n      });\n    },\n  });\n}\n\n\n//# sourceMappingURL=wrapApiHandlerWithSentry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvZXNtL2VkZ2Uvd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQTRUO0FBQ3BQOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLGdFQUFrQjtBQUMvQjtBQUNBLDZCQUE2Qiw2REFBZTs7QUFFNUM7QUFDQTtBQUNBLCtCQUErQiwwRUFBNEI7QUFDM0QsV0FBVztBQUNYLDZDQUE2QyxZQUFZLEVBQUUsbUJBQW1CO0FBQzlFLFVBQVU7QUFDVixzREFBc0QsbUJBQW1CO0FBQ3pFOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJCQUEyQiwyREFBYTtBQUN4QztBQUNBLGlDQUFpQyxtQkFBbUI7QUFDcEQ7O0FBRUEsMkJBQTJCLHlEQUFXO0FBQ3RDO0FBQ0E7QUFDQSwwQ0FBMEMsWUFBWSxFQUFFLG1CQUFtQixlQUFlLG1CQUFtQjtBQUM3RztBQUNBO0FBQ0EsZUFBZSxzRUFBNEI7QUFDM0MsZUFBZSwwRUFBZ0M7QUFDL0MsYUFBYTtBQUNiLFlBQVkscUVBQXVCO0FBQ25DO0FBQ0EsVUFBVTtBQUNWLHdCQUF3QixZQUFZLEVBQUUsbUJBQW1CO0FBQ3pELFVBQVU7QUFDVixnQ0FBZ0MsbUJBQW1CO0FBQ25EOztBQUVBLGVBQWUsdURBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDBFQUFnQztBQUMvQyxlQUFlLDBFQUFnQztBQUMvQyxhQUFhO0FBQ2IsV0FBVztBQUNYO0FBQ0EsbUJBQW1CLGtFQUFvQjtBQUN2QztBQUNBO0FBQ0EsZ0JBQWdCLDhEQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsaUJBQWlCO0FBQ2pCLGVBQWU7QUFDZjtBQUNBLGdCQUFnQiw2REFBZSxDQUFDLG9GQUFzQjtBQUN0RCxlQUFlO0FBQ2Y7QUFDQSxXQUFXO0FBQ1g7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFb0M7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2VzbS9lZGdlL3dyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeS5qcz8wNzAzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdpdGhJc29sYXRpb25TY29wZSwgZ2V0Q3VycmVudFNjb3BlLCB3aW50ZXJDR1JlcXVlc3RUb1JlcXVlc3REYXRhLCBnZXRBY3RpdmVTcGFuLCBnZXRSb290U3BhbiwgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UsIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsIHNldENhcHR1cmVkU2NvcGVzT25TcGFuLCBzdGFydFNwYW4sIFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOLCBoYW5kbGVDYWxsYmFja0Vycm9ycywgY2FwdHVyZUV4Y2VwdGlvbiwgdmVyY2VsV2FpdFVudGlsIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB7IGZsdXNoU2FmZWx5V2l0aFRpbWVvdXQgfSBmcm9tICcuLi9jb21tb24vdXRpbHMvcmVzcG9uc2VFbmQuanMnO1xuXG4vKipcbiAqIFdyYXBzIGEgTmV4dC5qcyBlZGdlIHJvdXRlIGhhbmRsZXIgd2l0aCBTZW50cnkgZXJyb3IgYW5kIHBlcmZvcm1hbmNlIGluc3RydW1lbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gd3JhcEFwaUhhbmRsZXJXaXRoU2VudHJ5KFxuICBoYW5kbGVyLFxuICBwYXJhbWV0ZXJpemVkUm91dGUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShoYW5kbGVyLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgLy8gVE9ETzogV2Ugc3RpbGwgc2hvdWxkIGFkZCBjZW50cmFsIGlzb2xhdGlvbiBzY29wZSBjcmVhdGlvbiBmb3Igd2hlbiBvdXIgYnVpbGQtdGltZSBpbnN0cnVtZW50YXRpb24gZG9lcyBub3Qgd29yayBhbnltb3JlIHdpdGggdHVyYm9wYWNrLlxuXG4gICAgICByZXR1cm4gd2l0aElzb2xhdGlvblNjb3BlKGlzb2xhdGlvblNjb3BlID0+IHtcbiAgICAgICAgY29uc3QgcmVxID0gYXJnc1swXTtcbiAgICAgICAgY29uc3QgY3VycmVudFNjb3BlID0gZ2V0Q3VycmVudFNjb3BlKCk7XG5cbiAgICAgICAgaWYgKHJlcSBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgICAgICBpc29sYXRpb25TY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgICAgICAgICAgbm9ybWFsaXplZFJlcXVlc3Q6IHdpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjdXJyZW50U2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKGAke3JlcS5tZXRob2R9ICR7cGFyYW1ldGVyaXplZFJvdXRlfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnRTY29wZS5zZXRUcmFuc2FjdGlvbk5hbWUoYGhhbmRsZXIgKCR7cGFyYW1ldGVyaXplZFJvdXRlfSlgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzcGFuTmFtZTtcbiAgICAgICAgbGV0IG9wID0gJ2h0dHAuc2VydmVyJztcblxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBhY3RpdmUgc3BhbiwgaXQgbGlrZWx5IG1lYW5zIHRoYXQgdGhlIGF1dG9tYXRpYyBOZXh0LmpzIE9URUwgaW5zdHJ1bWVudGF0aW9uIHdvcmtlZCBhbmQgd2UgY2FuXG4gICAgICAgIC8vIHJlbHkgb24gdGhhdCBmb3IgcGFyYW1ldGVyaXphdGlvbi5cbiAgICAgICAgY29uc3QgYWN0aXZlU3BhbiA9IGdldEFjdGl2ZVNwYW4oKTtcbiAgICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgICBzcGFuTmFtZSA9IGBoYW5kbGVyICgke3BhcmFtZXRlcml6ZWRSb3V0ZX0pYDtcbiAgICAgICAgICBvcCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGNvbnN0IHJvb3RTcGFuID0gZ2V0Um9vdFNwYW4oYWN0aXZlU3Bhbik7XG4gICAgICAgICAgaWYgKHJvb3RTcGFuKSB7XG4gICAgICAgICAgICByb290U3Bhbi51cGRhdGVOYW1lKFxuICAgICAgICAgICAgICByZXEgaW5zdGFuY2VvZiBSZXF1ZXN0ID8gYCR7cmVxLm1ldGhvZH0gJHtwYXJhbWV0ZXJpemVkUm91dGV9YCA6IGBoYW5kbGVyICR7cGFyYW1ldGVyaXplZFJvdXRlfWAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcm9vdFNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgICAgICAgICAgIFtTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogJ2h0dHAuc2VydmVyJyxcbiAgICAgICAgICAgICAgW1NFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTogJ3JvdXRlJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0Q2FwdHVyZWRTY29wZXNPblNwYW4ocm9vdFNwYW4sIGN1cnJlbnRTY29wZSwgaXNvbGF0aW9uU2NvcGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXEgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICAgICAgc3Bhbk5hbWUgPSBgJHtyZXEubWV0aG9kfSAke3BhcmFtZXRlcml6ZWRSb3V0ZX1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNwYW5OYW1lID0gYGhhbmRsZXIgJHtwYXJhbWV0ZXJpemVkUm91dGV9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdGFydFNwYW4oXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogc3Bhbk5hbWUsXG4gICAgICAgICAgICBvcDogb3AsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgIFtTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV06ICdyb3V0ZScsXG4gICAgICAgICAgICAgIFtTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmZ1bmN0aW9uLm5leHRqcy53cmFwQXBpSGFuZGxlcldpdGhTZW50cnknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFja0Vycm9ycyhcbiAgICAgICAgICAgICAgKCkgPT4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyksXG4gICAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBjYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB2ZXJjZWxXYWl0VW50aWwoZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgeyB3cmFwQXBpSGFuZGxlcldpdGhTZW50cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBBcGlIYW5kbGVyV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@sentry/nextjs/build/esm/edge/wrapApiHandlerWithSentry.js\n");

/***/ }),

/***/ "./node_modules/@sentry/vercel-edge/build/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/vercel-edge/build/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_VERSION: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_OP: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE),\n/* harmony export */   SEMANTIC_ATTRIBUTE_SENTRY_SOURCE: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE),\n/* harmony export */   Scope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_2__.Scope),\n/* harmony export */   VercelEdgeClient: () => (/* binding */ VercelEdgeClient),\n/* harmony export */   addBreadcrumb: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_3__.addBreadcrumb),\n/* harmony export */   addEventProcessor: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.addEventProcessor),\n/* harmony export */   addIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_5__.addIntegration),\n/* harmony export */   captureCheckIn: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.captureCheckIn),\n/* harmony export */   captureConsoleIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_6__.captureConsoleIntegration),\n/* harmony export */   captureEvent: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.captureEvent),\n/* harmony export */   captureException: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.captureException),\n/* harmony export */   captureFeedback: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_7__.captureFeedback),\n/* harmony export */   captureMessage: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.captureMessage),\n/* harmony export */   close: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.close),\n/* harmony export */   consoleIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_8__.consoleIntegration),\n/* harmony export */   consoleLoggingIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_9__.consoleLoggingIntegration),\n/* harmony export */   continueTrace: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_10__.continueTrace),\n/* harmony export */   createTransport: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_11__.createTransport),\n/* harmony export */   dedupeIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_12__.dedupeIntegration),\n/* harmony export */   eventFiltersIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_13__.eventFiltersIntegration),\n/* harmony export */   extraErrorDataIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_14__.extraErrorDataIntegration),\n/* harmony export */   flush: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.flush),\n/* harmony export */   functionToStringIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_15__.functionToStringIntegration),\n/* harmony export */   getActiveSpan: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_16__.getActiveSpan),\n/* harmony export */   getClient: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_17__.getClient),\n/* harmony export */   getCurrentScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_17__.getCurrentScope),\n/* harmony export */   getDefaultIntegrations: () => (/* binding */ getDefaultIntegrations),\n/* harmony export */   getGlobalScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_17__.getGlobalScope),\n/* harmony export */   getIsolationScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_17__.getIsolationScope),\n/* harmony export */   getRootSpan: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_16__.getRootSpan),\n/* harmony export */   getSpanDescendants: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_16__.getSpanDescendants),\n/* harmony export */   getSpanStatusFromHttpCode: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_18__.getSpanStatusFromHttpCode),\n/* harmony export */   getTraceData: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_19__.getTraceData),\n/* harmony export */   getTraceMetaTags: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_20__.getTraceMetaTags),\n/* harmony export */   inboundFiltersIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_13__.inboundFiltersIntegration),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   instrumentSupabaseClient: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_21__.instrumentSupabaseClient),\n/* harmony export */   isEnabled: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.isEnabled),\n/* harmony export */   isInitialized: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.isInitialized),\n/* harmony export */   lastEventId: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.lastEventId),\n/* harmony export */   linkedErrorsIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_22__.linkedErrorsIntegration),\n/* harmony export */   logger: () => (/* binding */ exports),\n/* harmony export */   moduleMetadataIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_23__.moduleMetadataIntegration),\n/* harmony export */   requestDataIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_24__.requestDataIntegration),\n/* harmony export */   rewriteFramesIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_25__.rewriteFramesIntegration),\n/* harmony export */   setContext: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.setContext),\n/* harmony export */   setCurrentClient: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_26__.setCurrentClient),\n/* harmony export */   setExtra: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.setExtra),\n/* harmony export */   setExtras: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.setExtras),\n/* harmony export */   setHttpStatus: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_18__.setHttpStatus),\n/* harmony export */   setMeasurement: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_27__.setMeasurement),\n/* harmony export */   setTag: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.setTag),\n/* harmony export */   setTags: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.setTags),\n/* harmony export */   setUser: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.setUser),\n/* harmony export */   spanToBaggageHeader: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_28__.spanToBaggageHeader),\n/* harmony export */   spanToJSON: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanToJSON),\n/* harmony export */   spanToTraceHeader: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanToTraceHeader),\n/* harmony export */   startInactiveSpan: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_10__.startInactiveSpan),\n/* harmony export */   startNewTrace: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_10__.startNewTrace),\n/* harmony export */   startSpan: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_10__.startSpan),\n/* harmony export */   startSpanManual: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_10__.startSpanManual),\n/* harmony export */   supabaseIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_21__.supabaseIntegration),\n/* harmony export */   suppressTracing: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_10__.suppressTracing),\n/* harmony export */   trpcMiddleware: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_29__.trpcMiddleware),\n/* harmony export */   winterCGFetchIntegration: () => (/* binding */ winterCGFetchIntegration),\n/* harmony export */   withActiveSpan: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_10__.withActiveSpan),\n/* harmony export */   withIsolationScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_17__.withIsolationScope),\n/* harmony export */   withMonitor: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_4__.withMonitor),\n/* harmony export */   withScope: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_17__.withScope),\n/* harmony export */   wrapMcpServerWithSentry: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_30__.wrapMcpServerWithSentry),\n/* harmony export */   zodErrorsIntegration: () => (/* reexport safe */ _sentry_core__WEBPACK_IMPORTED_MODULE_31__.zodErrorsIntegration)\n/* harmony export */ });\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/server-runtime-client.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/sdkMetadata.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/url.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/object.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/baggage.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/semanticAttributes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/spanUtils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/lru.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/logger.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/currentScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/tracing.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/string.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/version.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/utils.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/defaultScopes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/asyncContext/index.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/spanstatus.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/measurement.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/logSpans.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/parseSampleRate.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/sampling.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/instrument/fetch.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/isSentryRequestUrl.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/fetch.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/breadcrumbs.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/breadcrumb-log-level.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/promisebuffer.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/tracing/trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/transports/base.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils-hoist/node-stack-trace.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/dedupe.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/eventFilters.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/functiontostring.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/linkederrors.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/console.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/requestdata.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/logs/exports.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/parameterize.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/scope.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/captureconsole.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/feedback.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/logs/console-integration.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/extraerrordata.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/traceData.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/utils/meta.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/supabase.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/metadata.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/rewriteframes.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/sdk.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/trpc.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/mcp-server.js\");\n/* harmony import */ var _sentry_core__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @sentry/core */ \"./node_modules/@sentry/core/build/esm/integrations/zoderrors.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n\n\n            {\n              if (globalThis.performance === undefined) {\n                globalThis.performance = {\n                  timeOrigin: 0,\n                  now: () => Date.now()\n                };\n              }\n            }\n          \n\n\n\n\n\n/**\n * The Sentry Vercel Edge Runtime SDK Client.\n *\n * @see VercelEdgeClientOptions for documentation on configuration options.\n * @see ServerRuntimeClient for usage documentation.\n */\nclass VercelEdgeClient extends _sentry_core__WEBPACK_IMPORTED_MODULE_33__.ServerRuntimeClient {\n\n  /**\n   * Creates a new Vercel Edge Runtime SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n   constructor(options) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_34__.applySdkMetadata)(options, 'vercel-edge');\n    options._metadata = options._metadata || {};\n\n    const clientOptions = {\n      ...options,\n      platform: 'javascript',\n      // TODO: Grab version information\n      runtime: { name: 'vercel-edge' },\n      serverName: options.serverName || process.env.SENTRY_NAME,\n    };\n\n    super(clientOptions);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n   async flush(timeout) {\n    const provider = this.traceProvider;\n    const spanProcessor = provider?.activeSpanProcessor;\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TMP_SERVICE_NAME = 'service.name';\nvar TMP_TELEMETRY_SDK_NAME$1 = 'telemetry.sdk.name';\nvar TMP_TELEMETRY_SDK_LANGUAGE$1 = 'telemetry.sdk.language';\nvar TMP_TELEMETRY_SDK_VERSION$1 = 'telemetry.sdk.version';\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nvar SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nvar SEMRESATTRS_TELEMETRY_SDK_NAME$1 = TMP_TELEMETRY_SDK_NAME$1;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nvar SEMRESATTRS_TELEMETRY_SDK_LANGUAGE$1 = TMP_TELEMETRY_SDK_LANGUAGE$1;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nvar SEMRESATTRS_TELEMETRY_SDK_VERSION$1 = TMP_TELEMETRY_SDK_VERSION$1;\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SUPPRESS_TRACING_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.createContextKey)('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nfunction suppressTracing$1(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nfunction isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nvar BAGGAGE_PROPERTIES_SEPARATOR = ';';\nvar BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nvar BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nvar BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nvar BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nvar BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n\nvar __read$5 = (globalThis && globalThis.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nfunction serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nfunction getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(function (_a) {\n        var _b = __read$5(_a, 2), key = _b[0], value = _b[1];\n        var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nfunction parsePairKeyValue(entry) {\n    var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.baggageEntryMetadataFromString)(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar W3CBaggagePropagator = /** @class */ (function () {\n    function W3CBaggagePropagator() {\n    }\n    W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n        var baggage = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        var keyPairs = getKeyPairs(baggage)\n            .filter(function (pair) {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    };\n    W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n        var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        var baggageString = Array.isArray(headerValue)\n            ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n            : headerValue;\n        if (!baggageString)\n            return context;\n        var baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function (entry) {\n            var keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                var baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.propagation.setBaggage(context, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.propagation.createBaggage(baggage));\n    };\n    W3CBaggagePropagator.prototype.fields = function () {\n        return [BAGGAGE_HEADER];\n    };\n    return W3CBaggagePropagator;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values$3 = (globalThis && globalThis.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read$4 = (globalThis && globalThis.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nfunction sanitizeAttributes(attributes) {\n    var e_1, _a;\n    var out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    try {\n        for (var _b = __values$3(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read$4(_c.value, 2), key = _d[0], val = _d[1];\n            if (!isAttributeKey(key)) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Invalid attribute key: \" + key);\n                continue;\n            }\n            if (!isAttributeValue(val)) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Invalid attribute value set for key: \" + key);\n                continue;\n            }\n            if (Array.isArray(val)) {\n                out[key] = val.slice();\n            }\n            else {\n                out[key] = val;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return out;\n}\nfunction isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nfunction isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    var e_2, _a;\n    var type;\n    try {\n        for (var arr_1 = __values$3(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n            var element = arr_1_1.value;\n            // null/undefined elements are allowed\n            if (element == null)\n                continue;\n            if (!type) {\n                if (isValidPrimitiveAttributeValue(element)) {\n                    type = typeof element;\n                    continue;\n                }\n                // encountered an invalid primitive\n                return false;\n            }\n            if (typeof element === type) {\n                continue;\n            }\n            return false;\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nfunction loggingErrorHandler() {\n    return function (ex) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nfunction globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'];\nfunction isEnvVarABoolean(key) {\n    return (ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_BLRP_EXPORT_TIMEOUT',\n    'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BLRP_MAX_QUEUE_SIZE',\n    'OTEL_BLRP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n    'OTEL_EXPORTER_OTLP_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n    'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n    'OTEL_SEMCONV_STABILITY_OPT_IN',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nvar DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nvar DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nvar DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nvar DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nvar DEFAULT_ENVIRONMENT = {\n    OTEL_SDK_DISABLED: false,\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n    OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BLRP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    OTEL_TRACES_EXPORTER: '',\n    OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n    OTEL_LOGS_EXPORTER: '',\n    OTEL_EXPORTER_OTLP_INSECURE: '',\n    OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n    OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n    OTEL_SEMCONV_STABILITY_OPT_IN: [],\n};\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(key, environment, values) {\n    if (typeof values[key] === 'undefined') {\n        return;\n    }\n    var value = String(values[key]);\n    // support case-insensitive \"true\"\n    environment[key] = value.toLowerCase() === 'true';\n}\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.DiagLogLevel.ALL,\n    VERBOSE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.DiagLogLevel.VERBOSE,\n    DEBUG: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.DiagLogLevel.DEBUG,\n    INFO: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.DiagLogLevel.INFO,\n    WARN: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.DiagLogLevel.WARN,\n    ERROR: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.DiagLogLevel.ERROR,\n    NONE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nfunction parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarABoolean(key)) {\n                    parseBoolean(key, environment, values);\n                }\n                else if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Gets the environment variables\n */\nfunction getEnv() {\n    var processEnv = parseEnvironment(process.env);\n    return Object.assign({}, DEFAULT_ENVIRONMENT, processEnv);\n}\nfunction getEnvWithoutDefaults() {\n    return parseEnvironment(process.env);\n}\n\nconst performance = {\n                  timeOrigin: 0,\n                  now: () => Date.now()\n                };\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar otperformance = performance;\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION$1 = '1.30.1';\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nvar TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nvar TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nvar TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nvar SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nvar SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nvar SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nvar TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\n/** Constants describing the SDK in use */\nvar SDK_INFO = (_a = {},\n    _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = 'opentelemetry',\n    _a[SEMRESATTRS_PROCESS_RUNTIME_NAME] = 'node',\n    _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = VERSION$1,\n    _a);\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction unrefTimer(timer) {\n    timer.unref();\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar NANOSECOND_DIGITS = 9;\nvar NANOSECOND_DIGITS_IN_MILLIS = 6;\nvar MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nfunction millisToHrTime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n    var timeOrigin = otperformance.timeOrigin;\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nfunction hrTime(performanceNow) {\n    var timeOrigin = millisToHrTime(getTimeOrigin());\n    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : otperformance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nfunction hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * check if time is HrTime\n * @param value\n */\nfunction isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nfunction isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nfunction addHrTimes(time1, time2) {\n    var out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values$2 = (globalThis && globalThis.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */ (function () {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    function CompositePropagator(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })\n            .reduce(function (x, y) { return x.concat(y); }, [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    CompositePropagator.prototype.inject = function (context, carrier, setter) {\n        var e_1, _a;\n        try {\n            for (var _b = __values$2(this._propagators), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var propagator = _c.value;\n                try {\n                    propagator.inject(context, carrier, setter);\n                }\n                catch (err) {\n                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    CompositePropagator.prototype.extract = function (context, carrier, getter) {\n        return this._propagators.reduce(function (ctx, propagator) {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Failed to extract with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n            return ctx;\n        }, context);\n    };\n    CompositePropagator.prototype.fields = function () {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    };\n    return CompositePropagator;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nfunction validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nfunction validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceState = /** @class */ (function () {\n    function TraceState(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceState.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceState.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceState.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceState.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceState.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceState.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceState.prototype._clone = function () {\n        var traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceState;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TRACE_PARENT_HEADER = 'traceparent';\nvar TRACE_STATE_HEADER = 'tracestate';\nvar VERSION = '00';\nvar VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nvar TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nvar PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nvar FLAGS_PART = '[\\\\da-f]{2}';\nvar TRACE_PARENT_REGEX = new RegExp(\"^\\\\s?(\" + VERSION_PART + \")-(\" + TRACE_ID_PART + \")-(\" + PARENT_ID_PART + \")-(\" + FLAGS_PART + \")(-.*)?\\\\s?$\");\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nfunction parseTraceParent(traceParent) {\n    var match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nvar W3CTraceContextPropagator = /** @class */ (function () {\n    function W3CTraceContextPropagator() {\n    }\n    W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {\n        var spanContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpanContext(context);\n        if (!spanContext ||\n            isTracingSuppressed(context) ||\n            !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.isSpanContextValid)(spanContext))\n            return;\n        var traceParent = VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-0\" + Number(spanContext.traceFlags || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.NONE).toString(16);\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    };\n    W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {\n        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        var traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        var spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            var state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.setSpanContext(context, spanContext);\n    };\n    W3CTraceContextPropagator.prototype.fields = function () {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    };\n    return W3CTraceContextPropagator;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nvar objectTag = '[object Object]';\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\nvar funcProto = Function.prototype;\nvar funcToString = funcProto.toString;\nvar objectCtorString = funcToString.call(Object);\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nvar nativeObjectToString = objectProto.toString;\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n    return function (arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    var proto = getPrototype(value);\n    if (proto === null) {\n        return true;\n    }\n    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    var unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nfunction merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var result = args.shift();\n    var objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level, objects) {\n    if (level === void 0) { level = 0; }\n    var result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (var i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                var twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    var obj1 = result[key];\n                    var obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            var arr1 = objects.get(obj1) || [];\n                            var arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key: key });\n                            arr2.push({ obj: two, key: key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    var arr = objects.get(obj[key]) || [];\n    for (var i = 0, j = arr.length; i < j; i++) {\n        var info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!isPlainObject(one) || !isPlainObject(two)) {\n        return false;\n    }\n    return true;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this._promise = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n    }\n    Object.defineProperty(Deferred.prototype, \"promise\", {\n        get: function () {\n            return this._promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Deferred.prototype.resolve = function (val) {\n        this._resolve(val);\n    };\n    Deferred.prototype.reject = function (err) {\n        this._reject(err);\n    };\n    return Deferred;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read$3 = (globalThis && globalThis.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray$2 = (globalThis && globalThis.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nvar BindOnceFuture = /** @class */ (function () {\n    function BindOnceFuture(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n        this._isCalled = false;\n        this._deferred = new Deferred();\n    }\n    Object.defineProperty(BindOnceFuture.prototype, \"isCalled\", {\n        get: function () {\n            return this._isCalled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BindOnceFuture.prototype, \"promise\", {\n        get: function () {\n            return this._deferred.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BindOnceFuture.prototype.call = function () {\n        var _a;\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray$2([this._that], __read$3(args), false))).then(function (val) { return _this._deferred.resolve(val); }, function (err) { return _this._deferred.reject(err); });\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    };\n    return BindOnceFuture;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction defaultServiceName() {\n    return \"unknown_service:\" + \"\";\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign$1 = (globalThis && globalThis.__assign) || function () {\n    __assign$1 = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign$1.apply(this, arguments);\n};\nvar __awaiter = (globalThis && globalThis.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (globalThis && globalThis.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read$2 = (globalThis && globalThis.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes, asyncAttributesPromise) {\n        var _this = this;\n        var _a;\n        this._attributes = attributes;\n        this.asyncAttributesPending = asyncAttributesPromise != null;\n        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {\n            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n            _this.asyncAttributesPending = false;\n            return asyncAttributes;\n        }, function (err) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n            _this.asyncAttributesPending = false;\n            return {};\n        });\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that identifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[SEMRESATTRS_SERVICE_NAME] = defaultServiceName(),\n            _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE$1] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE$1],\n            _a[SEMRESATTRS_TELEMETRY_SDK_NAME$1] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME$1],\n            _a[SEMRESATTRS_TELEMETRY_SDK_VERSION$1] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION$1],\n            _a));\n    };\n    Object.defineProperty(Resource.prototype, \"attributes\", {\n        get: function () {\n            var _a;\n            if (this.asyncAttributesPending) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.error('Accessing resource attributes before async attributes settled');\n            }\n            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n     * this Resource's attributes. This is useful in exporters to block until resource detection\n     * has finished.\n     */\n    Resource.prototype.waitForAsyncAttributes = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.asyncAttributesPending) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._asyncAttributesPromise];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        var _this = this;\n        var _a;\n        if (!other)\n            return this;\n        // SpanAttributes from other resource overwrite attributes from this resource.\n        var mergedSyncAttributes = __assign$1(__assign$1({}, this._syncAttributes), ((_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes));\n        if (!this._asyncAttributesPromise &&\n            !other._asyncAttributesPromise) {\n            return new Resource(mergedSyncAttributes);\n        }\n        var mergedAttributesPromise = Promise.all([\n            this._asyncAttributesPromise,\n            other._asyncAttributesPromise,\n        ]).then(function (_a) {\n            var _b;\n            var _c = __read$2(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];\n            return __assign$1(__assign$1(__assign$1(__assign$1({}, _this._syncAttributes), thisAsyncAttributes), ((_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes)), otherAsyncAttributes);\n        });\n        return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TMP_EXCEPTION_TYPE = 'exception.type';\nvar TMP_EXCEPTION_MESSAGE = 'exception.message';\nvar TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nvar SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nvar SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nvar SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nvar ExceptionEventName = 'exception';\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (globalThis && globalThis.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values$1 = (globalThis && globalThis.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read$1 = (globalThis && globalThis.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray$1 = (globalThis && globalThis.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * This class represents a span.\n */\nvar Span = /** @class */ (function () {\n    /**\n     * Constructs a new Span instance.\n     *\n     * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n     * */\n    function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock, // keeping this argument even though it is unused to ensure backwards compatibility\n    attributes) {\n        if (links === void 0) { links = []; }\n        this.attributes = {};\n        this.links = [];\n        this.events = [];\n        this._droppedAttributesCount = 0;\n        this._droppedEventsCount = 0;\n        this._droppedLinksCount = 0;\n        this.status = {\n            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanStatusCode.UNSET,\n        };\n        this.endTime = [0, 0];\n        this._ended = false;\n        this._duration = [-1, -1];\n        this.name = spanName;\n        this._spanContext = spanContext;\n        this.parentSpanId = parentSpanId;\n        this.kind = kind;\n        this.links = links;\n        var now = Date.now();\n        this._performanceStartTime = otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + getTimeOrigin());\n        this._startTimeProvided = startTime != null;\n        this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);\n        this.resource = parentTracer.resource;\n        this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n        this._spanLimits = parentTracer.getSpanLimits();\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n        if (attributes != null) {\n            this.setAttributes(attributes);\n        }\n        this._spanProcessor = parentTracer.getActiveSpanProcessor();\n        this._spanProcessor.onStart(this, context);\n    }\n    Span.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    Span.prototype.setAttribute = function (key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Invalid attribute key: \" + key);\n            return this;\n        }\n        if (!isAttributeValue(value)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Invalid attribute value set for key: \" + key);\n            return this;\n        }\n        if (Object.keys(this.attributes).length >=\n            this._spanLimits.attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    };\n    Span.prototype.setAttributes = function (attributes) {\n        var e_1, _a;\n        try {\n            for (var _b = __values$1(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read$1(_c.value, 2), k = _d[0], v = _d[1];\n                this.setAttribute(k, v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    Span.prototype.addEvent = function (name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        if (this._spanLimits.eventCountLimit === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn('No events allowed.');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (this.events.length >= this._spanLimits.eventCountLimit) {\n            if (this._droppedEventsCount === 0) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.debug('Dropping extra events.');\n            }\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if (isTimeInput(attributesOrStartTime)) {\n            if (!isTimeInput(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        var attributes = sanitizeAttributes(attributesOrStartTime);\n        this.events.push({\n            name: name,\n            attributes: attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    };\n    Span.prototype.addLink = function (link) {\n        this.links.push(link);\n        return this;\n    };\n    Span.prototype.addLinks = function (links) {\n        var _a;\n        (_a = this.links).push.apply(_a, __spreadArray$1([], __read$1(links), false));\n        return this;\n    };\n    Span.prototype.setStatus = function (status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = __assign({}, status);\n        // When using try-catch, the caught \"error\" is of type `any`. When then assigning `any` to `status.message`,\n        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n        // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n        // undefined to avoid an incorrect type causing issues downstream.\n        if (this.status.message != null && typeof status.message !== 'string') {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Dropping invalid status.message of type '\" + typeof status.message + \"', expected 'string'\");\n            delete this.status.message;\n        }\n        return this;\n    };\n    Span.prototype.updateName = function (name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    };\n    Span.prototype.end = function (endTime) {\n        if (this._isSpanEnded()) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.error(this.name + \" \" + this._spanContext.traceId + \"-\" + this._spanContext.spanId + \" - You can only call end() on a span once.\");\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = hrTimeDuration(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Dropped \" + this._droppedEventsCount + \" events because eventCountLimit reached\");\n        }\n        this._spanProcessor.onEnd(this);\n    };\n    Span.prototype._getTime = function (inp) {\n        if (typeof inp === 'number' && inp <= otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return hrTime(inp + this._performanceOffset);\n        }\n        if (typeof inp === 'number') {\n            return millisToHrTime(inp);\n        }\n        if (inp instanceof Date) {\n            return millisToHrTime(inp.getTime());\n        }\n        if (isTimeInputHrTime(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can't use duration to calculate event/end times\n            return millisToHrTime(Date.now());\n        }\n        var msDuration = otperformance.now() - this._performanceStartTime;\n        return addHrTimes(this.startTime, millisToHrTime(msDuration));\n    };\n    Span.prototype.isRecording = function () {\n        return this._ended === false;\n    };\n    Span.prototype.recordException = function (exception, time) {\n        var attributes = {};\n        if (typeof exception === 'string') {\n            attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[SEMATTRS_EXCEPTION_TYPE] ||\n            attributes[SEMATTRS_EXCEPTION_MESSAGE]) {\n            this.addEvent(ExceptionEventName, attributes, time);\n        }\n        else {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Failed to record an exception \" + exception);\n        }\n    };\n    Object.defineProperty(Span.prototype, \"duration\", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"ended\", {\n        get: function () {\n            return this._ended;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedAttributesCount\", {\n        get: function () {\n            return this._droppedAttributesCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedEventsCount\", {\n        get: function () {\n            return this._droppedEventsCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedLinksCount\", {\n        get: function () {\n            return this._droppedLinksCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Span.prototype._isSpanEnded = function () {\n        if (this._ended) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n        }\n        return this._ended;\n    };\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    Span.prototype._truncateToLimitUtil = function (value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substring(0, limit);\n    };\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with truncated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    Span.prototype._truncateToSize = function (value) {\n        var _this = this;\n        var limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Attribute value limit must be positive, got \" + limit);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;\n            });\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    };\n    return Span;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return 'AlwaysOffSampler';\n    };\n    return AlwaysOffSampler;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return 'AlwaysOnSampler';\n    };\n    return AlwaysOnSampler;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpanContext(context);\n        if (!parentContext || !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.isSpanContextValid)(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.isValidTraceId)(traceId) && this._accumulate(traceId) < this._upperBound\n                ? SamplingDecision.RECORD_AND_SAMPLED\n                : SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nfunction loadDefaultConfig() {\n    var env = getEnv();\n    return {\n        sampler: buildSamplerFromEnv(env),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: env.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: env.OTEL_ATTRIBUTE_COUNT_LIMIT,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: env.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: env.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n            linkCountLimit: env.OTEL_SPAN_LINK_COUNT_LIMIT,\n            eventCountLimit: env.OTEL_SPAN_EVENT_COUNT_LIMIT,\n            attributePerEventCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n            attributePerLinkCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n        },\n        mergeResourceWithDefaults: true,\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nfunction buildSamplerFromEnv(environment) {\n    if (environment === void 0) { environment = getEnv(); }\n    switch (environment.OTEL_TRACES_SAMPLER) {\n        case TracesSamplerValues.AlwaysOn:\n            return new AlwaysOnSampler();\n        case TracesSamplerValues.AlwaysOff:\n            return new AlwaysOffSampler();\n        case TracesSamplerValues.ParentBasedAlwaysOn:\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n        case TracesSamplerValues.ParentBasedAlwaysOff:\n            return new ParentBasedSampler({\n                root: new AlwaysOffSampler(),\n            });\n        case TracesSamplerValues.TraceIdRatio:\n            return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n        case TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new ParentBasedSampler({\n                root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n            });\n        default:\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n            return new AlwaysOnSampler();\n    }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n        environment.OTEL_TRACES_SAMPLER_ARG === '') {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n    if (isNaN(probability)) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nfunction mergeConfig(userConfig) {\n    var perInstanceDefaults = {\n        sampler: buildSamplerFromEnv(),\n    };\n    var DEFAULT_CONFIG = loadDefaultConfig();\n    var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nfunction reconfigureLimits(userConfig) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var spanLimits = Object.assign({}, userConfig.spanLimits);\n    var parsedEnvConfig = getEnvWithoutDefaults();\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits: spanLimits });\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._isExporting = false;\n        this._finishedSpans = [];\n        this._droppedSpansCount = 0;\n        var env = getEnv();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    BatchSpanProcessorBase.prototype._shutdown = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.onShutdown();\n        })\n            .then(function () {\n            return _this._flushAll();\n        })\n            .then(function () {\n            return _this._exporter.shutdown();\n        });\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            if (this._droppedSpansCount === 0) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.debug('maxQueueSize reached, dropping spans');\n            }\n            this._droppedSpansCount++;\n            return;\n        }\n        if (this._droppedSpansCount > 0) {\n            // some spans were dropped, log once with count of spans dropped\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Dropped \" + this._droppedSpansCount + \" spans because maxQueueSize reached\");\n            this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.with(suppressTracing$1(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside the execution of this callback.\n                var spans;\n                if (_this._finishedSpans.length <= _this._maxExportBatchSize) {\n                    spans = _this._finishedSpans;\n                    _this._finishedSpans = [];\n                }\n                else {\n                    spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);\n                }\n                var doExport = function () {\n                    return _this._exporter.export(spans, function (result) {\n                        var _a;\n                        clearTimeout(timer);\n                        if (result.code === ExportResultCode.SUCCESS) {\n                            resolve();\n                        }\n                        else {\n                            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n                        }\n                    });\n                };\n                var pendingResources = null;\n                for (var i = 0, len = spans.length; i < len; i++) {\n                    var span = spans[i];\n                    if (span.resource.asyncAttributesPending &&\n                        span.resource.waitForAsyncAttributes) {\n                        pendingResources !== null && pendingResources !== void 0 ? pendingResources : (pendingResources = []);\n                        pendingResources.push(span.resource.waitForAsyncAttributes());\n                    }\n                }\n                // Avoid scheduling a promise to make the behavior more predictable and easier to test\n                if (pendingResources === null) {\n                    doExport();\n                }\n                else {\n                    Promise.all(pendingResources).then(doExport, function (err) {\n                        globalErrorHandler(err);\n                        reject(err);\n                    });\n                }\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._isExporting)\n            return;\n        var flush = function () {\n            _this._isExporting = true;\n            _this._flushOneBatch()\n                .finally(function () {\n                _this._isExporting = false;\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                _this._isExporting = false;\n                globalErrorHandler(e);\n            });\n        };\n        // we only wait if the queue doesn't have enough elements yet\n        if (this._finishedSpans.length >= this._maxExportBatchSize) {\n            return flush();\n        }\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () { return flush(); }, this._scheduledDelayMillis);\n        unrefTimer(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (globalThis && globalThis.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar BatchSpanProcessor = /** @class */ (function (_super) {\n    __extends(BatchSpanProcessor, _super);\n    function BatchSpanProcessor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BatchSpanProcessor.prototype.onShutdown = function () { };\n    return BatchSpanProcessor;\n}(BatchSpanProcessorBase));\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\nvar SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes / 4; i++) {\n            // unsigned right shift drops decimal part of the number\n            // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n            SHARED_BUFFER.writeUInt32BE((Math.random() * Math.pow(2, 32)) >>> 0, i * 4);\n        }\n        // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n        for (var i = 0; i < bytes; i++) {\n            if (SHARED_BUFFER[i] > 0) {\n                break;\n            }\n            else if (i === bytes - 1) {\n                SHARED_BUFFER[bytes - 1] = 1;\n            }\n        }\n        return SHARED_BUFFER.toString('hex', 0, bytes);\n    };\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */ (function () {\n    /**\n     * Constructs a new Tracer instance.\n     */\n    function Tracer(instrumentationLibrary, config, _tracerProvider) {\n        this._tracerProvider = _tracerProvider;\n        var localConfig = mergeConfig(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new RandomIdGenerator();\n        this.resource = _tracerProvider.resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    Tracer.prototype.startSpan = function (name, options, context) {\n        var _a, _b, _c;\n        if (options === void 0) { options = {}; }\n        if (context === void 0) { context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active(); }\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.deleteSpan(context);\n        }\n        var parentSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(context);\n        if (isTracingSuppressed(context)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.debug('Instrumentation suppressed, returning Noop Span');\n            var nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.wrapSpanContext(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();\n        var spanId = this._idGenerator.generateSpanId();\n        var traceId;\n        var traceState;\n        var parentSpanId;\n        if (!parentSpanContext ||\n            !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            parentSpanId = parentSpanContext.spanId;\n        }\n        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind.INTERNAL;\n        var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function (link) {\n            return {\n                context: link.context,\n                attributes: sanitizeAttributes(link.attributes),\n            };\n        });\n        var attributes = sanitizeAttributes(options.attributes);\n        // make sampling decision\n        var samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;\n        var traceFlags = samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SamplingDecision.RECORD_AND_SAMPLED\n            ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.SAMPLED\n            : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.NONE;\n        var spanContext = { traceId: traceId, spanId: spanId, traceFlags: traceFlags, traceState: traceState };\n        if (samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SamplingDecision.NOT_RECORD) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.debug('Recording is off, propagating context in a non-recording span');\n            var nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        var initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n        var span = new Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime, undefined, initAttributes);\n        return span;\n    };\n    Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.setSpan(parentContext, span);\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    /** Returns the active {@link GeneralLimits}. */\n    Tracer.prototype.getGeneralLimits = function () {\n        return this._generalLimits;\n    };\n    /** Returns the active {@link SpanLimits}. */\n    Tracer.prototype.getSpanLimits = function () {\n        return this._spanLimits;\n    };\n    Tracer.prototype.getActiveSpanProcessor = function () {\n        return this._tracerProvider.getActiveSpanProcessor();\n    };\n    return Tracer;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (globalThis && globalThis.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var e_1, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.forceFlush());\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onStart(span, context);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onEnd(span);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var e_4, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.shutdown());\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nvar NoopSpanProcessor = /** @class */ (function () {\n    function NoopSpanProcessor() {\n    }\n    NoopSpanProcessor.prototype.onStart = function (_span, _context) { };\n    NoopSpanProcessor.prototype.onEnd = function (_span) { };\n    NoopSpanProcessor.prototype.shutdown = function () {\n        return Promise.resolve();\n    };\n    NoopSpanProcessor.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    return NoopSpanProcessor;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (globalThis && globalThis.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (globalThis && globalThis.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */ (function () {\n    function BasicTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a, _b;\n        this._registeredSpanProcessors = [];\n        this._tracers = new Map();\n        var mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : Resource.empty();\n        if (mergedConfig.mergeResourceWithDefaults) {\n            this.resource = Resource.default().merge(this.resource);\n        }\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n        if ((_b = config.spanProcessors) === null || _b === void 0 ? void 0 : _b.length) {\n            this._registeredSpanProcessors = __spreadArray([], __read(config.spanProcessors), false);\n            this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n        }\n        else {\n            var defaultExporter = this._buildExporterFromEnv();\n            if (defaultExporter !== undefined) {\n                var batchProcessor = new BatchSpanProcessor(defaultExporter);\n                this.activeSpanProcessor = batchProcessor;\n            }\n            else {\n                this.activeSpanProcessor = new NoopSpanProcessor();\n            }\n        }\n    }\n    BasicTracerProvider.prototype.getTracer = function (name, version, options) {\n        var key = name + \"@\" + (version || '') + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new Tracer({ name: name, version: version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    };\n    /**\n     * @deprecated please use {@link TracerConfig} spanProcessors property\n     * Adds a new {@link SpanProcessor} to this tracer.\n     * @param spanProcessor the new SpanProcessor to be added.\n     */\n    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this.activeSpanProcessor\n                .shutdown()\n                .catch(function (err) {\n                return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.error('Error while trying to shutdown current span processor', err);\n            });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n    };\n    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n        return this.activeSpanProcessor;\n    };\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    BasicTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.setGlobalTracerProvider(this);\n        if (config.propagator === undefined) {\n            config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.propagation.setGlobalPropagator(config.propagator);\n        }\n    };\n    BasicTracerProvider.prototype.forceFlush = function () {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n            return new Promise(function (resolve) {\n                var state;\n                var timeoutInterval = setTimeout(function () {\n                    resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(function () {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(function (error) {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises)\n                .then(function (results) {\n                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) { return reject([error]); });\n        });\n    };\n    BasicTracerProvider.prototype.shutdown = function () {\n        return this.activeSpanProcessor.shutdown();\n    };\n    /**\n     * TS cannot yet infer the type of this.constructor:\n     * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n     * There is no need to override either of the getters in your child class.\n     * The type of the registered component maps should be the same across all\n     * classes in the inheritance tree.\n     */\n    BasicTracerProvider.prototype._getPropagator = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._getSpanExporter = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n        var _this = this;\n        // per spec, propagators from env must be deduplicated\n        var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function (name) {\n            var propagator = _this._getPropagator(name);\n            if (!propagator) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n            }\n            return propagator;\n        });\n        var validPropagators = propagators.reduce(function (list, item) {\n            if (item) {\n                list.push(item);\n            }\n            return list;\n        }, []);\n        if (validPropagators.length === 0) {\n            return;\n        }\n        else if (uniquePropagatorNames.length === 1) {\n            return validPropagators[0];\n        }\n        else {\n            return new CompositePropagator({\n                propagators: validPropagators,\n            });\n        }\n    };\n    BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n        var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n        if (exporterName === 'none' || exporterName === '')\n            return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n        }\n        return exporter;\n    };\n    BasicTracerProvider._registeredPropagators = new Map([\n        ['tracecontext', function () { return new W3CTraceContextPropagator(); }],\n        ['baggage', function () { return new W3CBaggagePropagator(); }],\n    ]);\n    BasicTracerProvider._registeredExporters = new Map();\n    return BasicTracerProvider;\n}());\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst TMP_DB_SYSTEM = 'db.system';\nconst TMP_DB_STATEMENT = 'db.statement';\nconst TMP_FAAS_TRIGGER = 'faas.trigger';\nconst TMP_HTTP_METHOD = 'http.method';\nconst TMP_HTTP_URL = 'http.url';\nconst TMP_HTTP_TARGET = 'http.target';\nconst TMP_HTTP_STATUS_CODE = 'http.status_code';\nconst TMP_MESSAGING_SYSTEM = 'messaging.system';\nconst TMP_RPC_SERVICE = 'rpc.service';\nconst TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nconst SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n/**\n * ASP.NET Core exception middleware handling result\n *\n * @example handled\n * @example unhandled\n */\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nconst ATTR_HTTP_REQUEST_METHOD = 'http.request.method';\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nconst ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code';\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nconst ATTR_HTTP_ROUTE = 'http.route';\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nconst ATTR_SERVICE_NAME = 'service.name';\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nconst ATTR_SERVICE_VERSION = 'service.version';\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\n * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n *\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.\n * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n *\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).\n *\n * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the\n * value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `https://www.example.com/path?color=blue&sig=REDACTED`.\n */\nconst ATTR_URL_FULL = 'url.full';\n\n/** If this attribute is true, it means that the parent is a remote span. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nconst SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n\n/**\n * Get the parent span id from a span.\n * In OTel v1, the parent span id is accessed as `parentSpanId`\n * In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n */\nfunction getParentSpanId(span) {\n  if ('parentSpanId' in span) {\n    return span.parentSpanId ;\n  } else if ('parentSpanContext' in span) {\n    return (span.parentSpanContext )?.spanId;\n  }\n\n  return undefined;\n}\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nfunction spanHasAttributes(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasKind(span) {\n  const castSpan = span ;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasStatus(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasName(span) {\n  const castSpan = span ;\n  return !!castSpan.name;\n}\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nfunction getRequestSpanData(span) {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = (span.attributes[ATTR_URL_FULL] || span.attributes[SEMATTRS_HTTP_URL])\n\n;\n\n  const data = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': (span.attributes[ATTR_HTTP_REQUEST_METHOD] || span.attributes[SEMATTRS_HTTP_METHOD])\n\n,\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_35__.parseUrl)(maybeUrlAttribute);\n\n      data.url = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_35__.getSanitizedUrlString)(url);\n\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch {\n    // ignore\n  }\n\n  return data;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nfunction getSpanKind(span) {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n\n  return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind.INTERNAL;\n}\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\nconst SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nconst SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nconst SENTRY_TRACE_STATE_URL = 'sentry.url';\nconst SENTRY_TRACE_STATE_SAMPLE_RAND = 'sentry.sample_rand';\nconst SENTRY_TRACE_STATE_SAMPLE_RATE = 'sentry.sample_rate';\n\nconst SENTRY_SCOPES_CONTEXT_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.createContextKey)('sentry_scopes');\n\nconst SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.createContextKey)('sentry_fork_isolation_scope');\n\nconst SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.createContextKey)('sentry_fork_set_scope');\n\nconst SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.createContextKey)('sentry_fork_set_isolation_scope');\n\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nfunction getScopesFromContext(context) {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY) ;\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nfunction setScopesOnContext(context, scopes) {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nfunction setContextOnScope(scope, context) {\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_36__.addNonEnumerableProperty)(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n */\nfunction getContextFromScope(scope) {\n  return (scope )[SCOPE_CONTEXT_FIELD];\n}\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nfunction getSamplingDecision(spanContext) {\n  const { traceFlags, traceState } = spanContext;\n\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.SAMPLED) {\n    return true;\n  }\n\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_37__.baggageHeaderToDynamicSamplingContext)(dscString) : undefined;\n\n  if (dsc?.sampled === 'true') {\n    return true;\n  }\n  if (dsc?.sampled === 'false') {\n    return false;\n  }\n\n  return undefined;\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nfunction inferSpanData(spanName, attributes, kind) {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[ATTR_HTTP_REQUEST_METHOD] || attributes[SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({ attributes, name: spanName, kind }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[SEMATTRS_DB_SYSTEM];\n  const opIsCache =\n    typeof attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' &&\n    attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({ attributes, name: spanName });\n  }\n\n  const customSourceOrRoute = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom' ? 'custom' : 'route';\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, 'route'),\n      op: 'rpc',\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: 'message',\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: faasTrigger.toString(),\n    };\n  }\n\n  return { op: undefined, description: spanName, source: 'custom' };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Does not overwrite the span name if the source is already set to custom to ensure\n * that user-updated span names are preserved. In this case, we only adjust the op but\n * leave span description and source unchanged.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nfunction parseSpanDescription(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n\n  return inferSpanData(name, attributes, kind);\n}\n\nfunction descriptionForDbSystem({ attributes, name }) {\n  // if we already have a custom name, we don't overwrite it but only set the op\n  const userDefinedName = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (typeof userDefinedName === 'string') {\n    return {\n      op: 'db',\n      description: userDefinedName,\n      source: (attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || 'custom',\n    };\n  }\n\n  // if we already have the source set to custom, we don't overwrite the span description but only set the op\n  if (attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom') {\n    return { op: 'db', description: name, source: 'custom' };\n  }\n\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[SEMATTRS_DB_STATEMENT];\n\n  const description = statement ? statement.toString() : name;\n\n  return { op: 'db', description, source: 'task' };\n}\n\n/** Only exported for tests. */\nfunction descriptionForHttpMethod(\n  { name, kind, attributes },\n  httpMethod,\n) {\n  const opParts = ['http'];\n\n  switch (kind) {\n    case _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n\n  const { urlPath, url, query, fragment, hasRoute } = getSanitizedUrl(attributes, kind);\n\n  if (!urlPath) {\n    return { ...getUserUpdatedNameAndSource(name, attributes), op: opParts.join('.') };\n  }\n\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const inferredDescription = graphqlOperationsAttribute\n    ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})`\n    : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const inferredSource = hasRoute || urlPath === '/' ? 'route' : 'url';\n\n  const data = {};\n\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind.CLIENT || kind === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  // If users (or in very rare occasions we) set the source to custom, we don't overwrite the name\n  const alreadyHasCustomSource = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom';\n  const customSpanName = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  const useInferredDescription =\n    !alreadyHasCustomSource && customSpanName == null && (isClientOrServerKind || !isManualSpan);\n\n  const { description, source } = useInferredDescription\n    ? { description: inferredDescription, source: inferredSource }\n    : getUserUpdatedNameAndSource(name, attributes);\n\n  return {\n    op: opParts.join('.'),\n    description,\n    source,\n    data,\n  };\n}\n\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nfunction getSanitizedUrl(\n  attributes,\n  kind,\n)\n\n {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[ATTR_HTTP_ROUTE];\n\n  const parsedUrl = typeof httpUrl === 'string' ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_35__.parseUrl)(httpUrl) : undefined;\n  const url = parsedUrl ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_35__.getSanitizedUrlString)(parsedUrl) : undefined;\n  const query = parsedUrl?.search || undefined;\n  const fragment = parsedUrl?.hash || undefined;\n\n  if (typeof httpRoute === 'string') {\n    return { urlPath: httpRoute, url, query, fragment, hasRoute: true };\n  }\n\n  if (kind === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind.SERVER && typeof httpTarget === 'string') {\n    return { urlPath: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_35__.stripUrlQueryAndFragment)(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  if (parsedUrl) {\n    return { urlPath: url, url, query, fragment, hasRoute: false };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return { urlPath: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_35__.stripUrlQueryAndFragment)(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  return { urlPath: undefined, url, query, fragment, hasRoute: false };\n}\n\n/**\n * Because Otel instrumentation sometimes mutates span names via `span.updateName`, the only way\n * to ensure that a user-set span name is preserved is to store it as a tmp attribute on the span.\n * We delete this attribute once we're done with it when preparing the event envelope.\n *\n * This temp attribute always takes precedence over the original name.\n *\n * We also need to take care of setting the correct source. Users can always update the source\n * after updating the name, so we need to respect that.\n *\n * @internal exported only for testing\n */\nfunction getUserUpdatedNameAndSource(\n  originalName,\n  attributes,\n  fallbackSource = 'custom',\n)\n\n {\n  const source = (attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || fallbackSource;\n  const description = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  if (description && typeof description === 'string') {\n    return {\n      description,\n      source,\n    };\n  }\n\n  return { description: originalName, source };\n}\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nfunction enhanceDscWithOpenTelemetryRootSpanName(client) {\n  client.on('createDsc', (dsc, rootSpan) => {\n    if (!rootSpan) {\n      return;\n    }\n\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n\n    const jsonSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanToJSON)(rootSpan);\n    const attributes = jsonSpan.data;\n    const source = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    const { description } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : { description: undefined };\n    if (source !== 'url' && description) {\n      dsc.transaction = description;\n    }\n\n    // Also ensure sampling decision is correctly inferred\n    // In core, we use `spanIsSampled`, which just looks at the trace flags\n    // but in OTEL, we use a slightly more complex logic to be able to differntiate between unsampled and deferred sampling\n    if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_38__.hasSpansEnabled)()) {\n      const sampled = getSamplingDecision(rootSpan.spanContext());\n      dsc.sampled = sampled == undefined ? undefined : String(sampled);\n    }\n  });\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getActiveSpan();\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD$1 = ( false || false);\n\n/**\n * Generate a TraceState for the given data.\n */\nfunction makeTraceState({\n  dsc,\n  sampled,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_37__.dynamicSamplingContextToSentryBaggageHeader)(dsc) : undefined;\n\n  const traceStateBase = new TraceState();\n\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n\nconst setupElements = new Set();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nfunction openTelemetrySetupCheck() {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nfunction setIsSetup(element) {\n  setupElements.add(element);\n}\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nclass SentryPropagator extends W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n\n   constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new _sentry_core__WEBPACK_IMPORTED_MODULE_39__.LRUMap(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   inject(context, carrier, setter) {\n    if (isTracingSuppressed(context)) {\n      DEBUG_BUILD$1 && _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n\n    const activeSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n\n    const tracePropagationTargets = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getClient)()?.getOptions()?.tracePropagationTargets;\n    if (!shouldPropagateTraceForUrl(url, tracePropagationTargets, this._urlMatchesTargetsMap)) {\n      DEBUG_BUILD$1 &&\n        _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log(\n          '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:',\n          url,\n        );\n      return;\n    }\n\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.propagation.getBaggage(context) || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.propagation.createBaggage({});\n\n    const { dynamicSamplingContext, traceId, spanId, sampled } = getInjectionData(context);\n\n    if (existingBaggageHeader) {\n      const baggageEntries = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_37__.parseBaggageHeader)(existingBaggageHeader);\n\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, { value });\n        });\n      }\n    }\n\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${_sentry_core__WEBPACK_IMPORTED_MODULE_37__.SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, (0,_sentry_core__WEBPACK_IMPORTED_MODULE_41__.generateSentryTraceHeader)(traceId, spanId, sampled));\n    }\n\n    super.inject(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   extract(context, carrier, getter) {\n    const maybeSentryTraceHeader = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n\n    const sentryTrace = maybeSentryTraceHeader\n      ? Array.isArray(maybeSentryTraceHeader)\n        ? maybeSentryTraceHeader[0]\n        : maybeSentryTraceHeader\n      : undefined;\n\n    // Add remote parent span context\n    // If there is no incoming trace, this will return the context as-is\n    return ensureScopesOnContext(getContextWithRemoteActiveSpan(context, { sentryTrace, baggage }));\n  }\n\n  /**\n   * @inheritDoc\n   */\n   fields() {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n}\n\nconst NOT_PROPAGATED_MESSAGE =\n  '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:';\n\n/**\n * Check if a given URL should be propagated to or not.\n * If no url is defined, or no trace propagation targets are defined, this will always return `true`.\n * You can also optionally provide a decision map, to cache decisions and avoid repeated regex lookups.\n */\nfunction shouldPropagateTraceForUrl(\n  url,\n  tracePropagationTargets,\n  decisionMap,\n) {\n  if (typeof url !== 'string' || !tracePropagationTargets) {\n    return true;\n  }\n\n  const cachedDecision = decisionMap?.get(url);\n  if (cachedDecision !== undefined) {\n    DEBUG_BUILD$1 && !cachedDecision && _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log(NOT_PROPAGATED_MESSAGE, url);\n    return cachedDecision;\n  }\n\n  const decision = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_42__.stringMatchesSomePattern)(url, tracePropagationTargets);\n  decisionMap?.set(url, decision);\n\n  DEBUG_BUILD$1 && !decision && _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log(NOT_PROPAGATED_MESSAGE, url);\n  return decision;\n}\n\n/**\n * Get propagation injection data for the given context.\n */\nfunction getInjectionData(context)\n\n {\n  const span = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(context);\n\n  // If we have a remote span, the spanId should be considered as the parentSpanId, not spanId itself\n  // Instead, we use a virtual (generated) spanId for propagation\n  if (span?.spanContext().isRemote) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_28__.getDynamicSamplingContextFromSpan)(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: undefined,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // If we have a local span, we just use this\n  if (span) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_28__.getDynamicSamplingContextFromSpan)(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  // The only scenario where this should happen is when we neither have a span, nor an incoming trace\n  const scope = getScopesFromContext(context)?.scope || (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getCurrentScope)();\n  const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getClient)();\n\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = client ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_28__.getDynamicSamplingContextFromScope)(client, scope) : undefined;\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.propagationSpanId,\n    sampled: propagationContext.sampled,\n  };\n}\n\nfunction getContextWithRemoteActiveSpan(\n  ctx,\n  { sentryTrace, baggage },\n) {\n  const propagationContext = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_41__.propagationContextFromHeaders)(sentryTrace, baggage);\n\n  const { traceId, parentSpanId, sampled, dsc } = propagationContext;\n\n  // We only want to set the virtual span if we are continuing a concrete trace\n  // Otherwise, we ignore the incoming trace here, e.g. if we have no trace headers\n  if (!parentSpanId) {\n    return ctx;\n  }\n\n  const spanContext = generateRemoteSpanContext({\n    traceId,\n    spanId: parentSpanId,\n    sampled,\n    dsc,\n  });\n\n  return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nfunction continueTraceAsRemoteSpan(\n  ctx,\n  options,\n  callback,\n) {\n  const ctxWithSpanContext = ensureScopesOnContext(getContextWithRemoteActiveSpan(ctx, options));\n\n  return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.with(ctxWithSpanContext, callback);\n}\n\nfunction ensureScopesOnContext(ctx) {\n  // If there are no scopes yet on the context, ensure we have them\n  const scopes = getScopesFromContext(ctx);\n  const newScopes = {\n    // If we have no scope here, this is most likely either the root context or a context manually derived from it\n    // In this case, we want to fork the current scope, to ensure we do not pollute the root scope\n    scope: scopes ? scopes.scope : (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getCurrentScope)().clone(),\n    isolationScope: scopes ? scopes.isolationScope : (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getIsolationScope)(),\n  };\n\n  return setScopesOnContext(ctx, newScopes);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier) {\n  try {\n    const baggage = (carrier )[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span) {\n  const spanData = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanToJSON)(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = spanData[SEMATTRS_HTTP_URL] || spanData[ATTR_URL_FULL];\n  if (typeof urlAttribute === 'string') {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = span.spanContext().traceState?.get(SENTRY_TRACE_STATE_URL);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n\n  return undefined;\n}\n\nfunction generateRemoteSpanContext({\n  spanId,\n  traceId,\n  sampled,\n  dsc,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanContext = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.SAMPLED : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.NONE,\n    traceState,\n  };\n\n  return spanContext;\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_43__.handleCallbackErrors)(\n        () => callback(span),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanToJSON)(span).status === undefined) {\n            span.setStatus({ code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanStatusCode.ERROR });\n          }\n        },\n        () => span.end(),\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(\n  options,\n  callback,\n) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_43__.handleCallbackErrors)(\n        () => callback(span, () => span.end()),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanToJSON)(span).status === undefined) {\n            span.setStatus({ code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanStatusCode.ERROR });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    const span = tracer.startSpan(name, spanOptions, ctx);\n\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const newContextWithActiveSpan = span ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active(), span) : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.deleteSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active());\n  return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.with(newContextWithActiveSpan, () => callback((0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getCurrentScope)()));\n}\n\nfunction getTracer() {\n  const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getClient)();\n  return client?.tracer || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getTracer('@sentry/opentelemetry', _sentry_core__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION);\n}\n\nfunction getSpanOptions(options) {\n  const { startTime, attributes, kind, op, links } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n\n  return {\n    attributes: op\n      ? {\n          [_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n          ...attributes,\n        }\n      : attributes,\n    kind,\n    links,\n    startTime: fixedStartTime,\n  };\n}\n\nfunction ensureTimestampInMilliseconds(timestamp) {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\n\nfunction getContext(scope, forceTransaction) {\n  const ctx = getContextForScope(scope);\n  const parentSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we start a new trace\n  // Note that if we continue a trace, we'll always have a remote parent span here anyhow\n  if (!parentSpan) {\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.deleteSpan(ctx);\n\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.getRootSpan)(parentSpan);\n  const dsc = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_28__.getDynamicSamplingContextFromSpan)(rootSpan);\n\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanOptions = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.SAMPLED : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.TraceFlags.NONE,\n    traceState,\n  };\n\n  const ctxWithSpanContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.setSpanContext(ctxWithoutSpan, spanOptions);\n\n  return ctxWithSpanContext;\n}\n\nfunction getContextForScope(scope) {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n\n  return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nfunction continueTrace(options, callback) {\n  return continueTraceAsRemoteSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active(), options, callback);\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const ctx = suppressTracing$1(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active());\n  return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.with(ctx, callback);\n}\n\n/** Ensure the `trace` context is set on all events. */\nfunction setupEventContextTrace(client) {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanToTraceContext)(span),\n      ...event.contexts,\n    };\n\n    const rootSpan = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.getRootSpan)(span);\n\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_28__.getDynamicSamplingContextFromSpan)(rootSpan),\n      ...event.sdkProcessingMetadata,\n    };\n\n    return event;\n  });\n}\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nfunction getTraceData({ span } = {}) {\n  let ctx = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active();\n\n  if (span) {\n    const { scope } = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_44__.getCapturedScopesOnSpan)(span);\n    // fall back to current context if for whatever reason we can't find the one of the span\n    ctx = (scope && getContextFromScope(scope)) || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.setSpan(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active(), span);\n  }\n\n  const { traceId, spanId, sampled, dynamicSamplingContext } = getInjectionData(ctx);\n\n  return {\n    'sentry-trace': (0,_sentry_core__WEBPACK_IMPORTED_MODULE_41__.generateSentryTraceHeader)(traceId, spanId, sampled),\n    baggage: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_37__.dynamicSamplingContextToSentryBaggageHeader)(dynamicSamplingContext),\n  };\n}\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nfunction setOpenTelemetryContextAsyncContextStrategy() {\n  function getScopes() {\n    const ctx = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active();\n    const scopes = getScopesFromContext(ctx);\n\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_45__.getDefaultCurrentScope)(),\n      isolationScope: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_45__.getDefaultIsolationScope)(),\n    };\n  }\n\n  function withScope(callback) {\n    const ctx = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n\n  function withSetScope(scope, callback) {\n    const ctx = getContextFromScope(scope) || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n\n  function withIsolationScope(callback) {\n    const ctx = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function withSetIsolationScope(isolationScope, callback) {\n    const ctx = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function getCurrentScope() {\n    return getScopes().scope;\n  }\n\n  function getIsolationScope() {\n    return getScopes().isolationScope;\n  }\n\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_46__.setAsyncContextStrategy)({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    continueTrace,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan ,\n  });\n}\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nfunction wrapContextManagerClass(\n  ContextManagerClass,\n) {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n     constructor(...args) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n     with(\n      context,\n      fn,\n      thisArg,\n      ...args\n    ) {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = currentScopes?.scope || (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getCurrentScope)();\n      const currentIsolationScope = currentScopes?.isolationScope || (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getIsolationScope)();\n\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY) ;\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY) ;\n\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope =\n        isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = { scope: newCurrentScope, isolationScope: newIsolationScope };\n\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1\n        .deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n\n      setContextOnScope(newCurrentScope, ctx2);\n\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n\n  return SentryContextManager ;\n}\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nfunction groupSpansWithParents(spans) {\n  const nodeMap = new Map();\n\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nfunction getLocalParentId(span) {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? getParentSpanId(span) : undefined;\n}\n\nfunction createOrUpdateSpanNodeAndRefs(nodeMap, span) {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, { id, span, children: [] });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, { id, span, parentNode, children: [] });\n  parentNode.children.push(node);\n}\n\nfunction createOrGetParentNode(nodeMap, id) {\n  const existing = nodeMap.get(id);\n\n  if (existing) {\n    return existing;\n  }\n\n  return createOrUpdateNode(nodeMap, { id, children: [] });\n}\n\nfunction createOrUpdateNode(nodeMap, spanNode) {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing?.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated',\n} ;\n\nconst isStatusErrorMessageValid = (message) => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message );\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nfunction mapStatus(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanStatusCode.OK) {\n      return { code: _sentry_core__WEBPACK_IMPORTED_MODULE_18__.SPAN_STATUS_OK };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return { code: _sentry_core__WEBPACK_IMPORTED_MODULE_18__.SPAN_STATUS_ERROR, message: status.message };\n      } else {\n        return { code: _sentry_core__WEBPACK_IMPORTED_MODULE_18__.SPAN_STATUS_ERROR, message: 'unknown_error' };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status?.code === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanStatusCode.UNSET) {\n    return { code: _sentry_core__WEBPACK_IMPORTED_MODULE_18__.SPAN_STATUS_OK };\n  } else {\n    return { code: _sentry_core__WEBPACK_IMPORTED_MODULE_18__.SPAN_STATUS_ERROR, message: 'unknown_error' };\n  }\n}\n\nfunction inferStatusFromAttributes(attributes) {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[SEMATTRS_RPC_GRPC_STATUS_CODE];\n\n  const numberHttpCode =\n    typeof httpCodeAttribute === 'number'\n      ? httpCodeAttribute\n      : typeof httpCodeAttribute === 'string'\n        ? parseInt(httpCodeAttribute)\n        : undefined;\n\n  if (typeof numberHttpCode === 'number') {\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_18__.getSpanStatusFromHttpCode)(numberHttpCode);\n  }\n\n  if (typeof grpcCodeAttribute === 'string') {\n    return { code: _sentry_core__WEBPACK_IMPORTED_MODULE_18__.SPAN_STATUS_ERROR, message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error' };\n  }\n\n  return undefined;\n}\n\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nclass SentrySpanExporter {\n\n  /*\n   * A quick explanation on the buckets: We do bucketing of finished spans for efficiency. This span exporter is\n   * accumulating spans until a root span is encountered and then it flushes all the spans that are descendants of that\n   * root span. Because it is totally in the realm of possibilities that root spans are never finished, and we don't\n   * want to accumulate spans indefinitely in memory, we need to periodically evacuate spans. Naively we could simply\n   * store the spans in an array and each time a new span comes in we could iterate through the entire array and\n   * evacuate all spans that have an end-timestamp that is older than our limit. This could get quite expensive because\n   * we would have to iterate a potentially large number of spans every time we evacuate. We want to avoid these large\n   * bursts of computation.\n   *\n   * Instead we go for a bucketing approach and put spans into buckets, based on what second\n   * (modulo the time limit) the span was put into the exporter. With buckets, when we decide to evacuate, we can\n   * iterate through the bucket entries instead, which have an upper bound of items, making the evacuation much more\n   * efficient. Cleaning up also becomes much more efficient since it simply involves de-referencing a bucket within the\n   * bucket array, and letting garbage collection take care of the rest.\n   */\n\n   constructor(options\n\n) {\n    this._finishedSpanBucketSize = options?.timeout || DEFAULT_TIMEOUT;\n    this._finishedSpanBuckets = new Array(this._finishedSpanBucketSize).fill(undefined);\n    this._lastCleanupTimestampInS = Math.floor(Date.now() / 1000);\n    this._spansToBucketEntry = new WeakMap();\n  }\n\n  /** Export a single span. */\n   export(span) {\n    const currentTimestampInS = Math.floor(Date.now() / 1000);\n\n    if (this._lastCleanupTimestampInS !== currentTimestampInS) {\n      let droppedSpanCount = 0;\n      this._finishedSpanBuckets.forEach((bucket, i) => {\n        if (bucket && bucket.timestampInS <= currentTimestampInS - this._finishedSpanBucketSize) {\n          droppedSpanCount += bucket.spans.size;\n          this._finishedSpanBuckets[i] = undefined;\n        }\n      });\n      if (droppedSpanCount > 0) {\n        DEBUG_BUILD$1 &&\n          _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log(\n            `SpanExporter dropped ${droppedSpanCount} spans because they were pending for more than ${this._finishedSpanBucketSize} seconds.`,\n          );\n      }\n      this._lastCleanupTimestampInS = currentTimestampInS;\n    }\n\n    const currentBucketIndex = currentTimestampInS % this._finishedSpanBucketSize;\n    const currentBucket = this._finishedSpanBuckets[currentBucketIndex] || {\n      timestampInS: currentTimestampInS,\n      spans: new Set(),\n    };\n    this._finishedSpanBuckets[currentBucketIndex] = currentBucket;\n    currentBucket.spans.add(span);\n    this._spansToBucketEntry.set(span, currentBucket);\n\n    // If the span doesn't have a local parent ID (it's a root span), we're gonna flush all the ended spans\n    if (!getLocalParentId(span)) {\n      this._clearTimeout();\n\n      // If we got a parent span, we try to send the span tree\n      // Wait a tick for this, to ensure we avoid race conditions\n      this._flushTimeout = setTimeout(() => {\n        this.flush();\n      }, 1);\n    }\n  }\n\n  /** Try to flush any pending spans immediately. */\n   flush() {\n    this._clearTimeout();\n\n    const finishedSpans = [];\n    this._finishedSpanBuckets.forEach(bucket => {\n      if (bucket) {\n        finishedSpans.push(...bucket.spans);\n      }\n    });\n\n    const sentSpans = maybeSend(finishedSpans);\n\n    const sentSpanCount = sentSpans.size;\n\n    const remainingOpenSpanCount = finishedSpans.length - sentSpanCount;\n\n    DEBUG_BUILD$1 &&\n      _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log(\n        `SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} spans are waiting for their parent spans to finish`,\n      );\n\n    sentSpans.forEach(span => {\n      const bucketEntry = this._spansToBucketEntry.get(span);\n      if (bucketEntry) {\n        bucketEntry.spans.delete(span);\n      }\n    });\n  }\n\n  /** Clear the exporter. */\n   clear() {\n    this._finishedSpanBuckets = this._finishedSpanBuckets.fill(undefined);\n    this._clearTimeout();\n  }\n\n  /** Clear the flush timeout. */\n   _clearTimeout() {\n    if (this._flushTimeout) {\n      clearTimeout(this._flushTimeout);\n      this._flushTimeout = undefined;\n    }\n  }\n}\n\n/**\n * Send the given spans, but only if they are part of a finished transaction.\n *\n * Returns the sent spans.\n * Spans remain unsent when their parent span is not yet finished.\n * This will happen regularly, as child spans are generally finished before their parents.\n * But it _could_ also happen because, for whatever reason, a parent span was lost.\n * In this case, we'll eventually need to clean this up.\n */\nfunction maybeSend(spans) {\n  const grouped = groupSpansWithParents(spans);\n  const sentSpans = new Set();\n\n  const rootNodes = getCompletedRootNodes(grouped);\n\n  rootNodes.forEach(root => {\n    const span = root.span;\n    sentSpans.add(span);\n    const transactionEvent = createTransactionForOtelSpan(span);\n\n    // We'll recursively add all the child spans to this array\n    const spans = transactionEvent.spans || [];\n\n    root.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n\n    // spans.sort() mutates the array, but we do not use this anymore after this point\n    // so we can safely mutate it here\n    transactionEvent.spans =\n      spans.length > MAX_SPAN_COUNT\n        ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n        : spans;\n\n    const measurements = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_27__.timedEventsToMeasurements)(span.events);\n    if (measurements) {\n      transactionEvent.measurements = measurements;\n    }\n\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_4__.captureEvent)(transactionEvent);\n  });\n\n  return sentSpans;\n}\n\nfunction nodeIsCompletedRootNode(node) {\n  return !!node.span && !node.parentNode;\n}\n\nfunction getCompletedRootNodes(nodes) {\n  return nodes.filter(nodeIsCompletedRootNode);\n}\n\nfunction parseSpan(span) {\n  const attributes = span.attributes;\n\n  const origin = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ;\n  const op = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP] ;\n  const source = attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n  return { origin, op, source };\n}\n\n/** Exported only for tests. */\nfunction createTransactionForOtelSpan(span) {\n  const { op, description, data, origin = 'manual', source } = getSpanData(span);\n  const capturedSpanScopes = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_44__.getCapturedScopesOnSpan)(span );\n\n  const sampleRate = span.attributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ;\n\n  const attributes = {\n    [_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes),\n  };\n\n  const { links } = span;\n  const { traceId: trace_id, spanId: span_id } = span.spanContext();\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take precedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id = getParentSpanId(span);\n\n  const status = mapStatus(span);\n\n  const traceContext = {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.getStatusMessage)(status), // As per protocol, span status is allowed to be undefined\n    links: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.convertSpanLinksForEnvelope)(links),\n  };\n\n  const statusCode = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE];\n  const responseContext = typeof statusCode === 'number' ? { response: { status_code: statusCode } } : undefined;\n\n  const transactionEvent = {\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes,\n      },\n      ...responseContext,\n    },\n    spans: [],\n    start_timestamp: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanTimeInputToSeconds)(span.startTime),\n    timestamp: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanTimeInputToSeconds)(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      capturedSpanScope: capturedSpanScopes.scope,\n      capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n      sampleRate,\n      dynamicSamplingContext: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_28__.getDynamicSamplingContextFromSpan)(span ),\n    },\n    ...(source && {\n      transaction_info: {\n        source,\n      },\n    }),\n  };\n\n  return transactionEvent;\n}\n\nfunction createAndFinishSpanForOtelSpan(node, spans, sentSpans) {\n  const span = node.span;\n\n  if (span) {\n    sentSpans.add(span);\n  }\n\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n    return;\n  }\n\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n  const parentSpanId = getParentSpanId(span);\n\n  const { attributes, startTime, endTime, links } = span;\n\n  const { op, description, data, origin = 'manual' } = getSpanData(span);\n  const allData = {\n    [_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data,\n  };\n\n  const status = mapStatus(span);\n\n  const spanJSON = {\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanTimeInputToSeconds)(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.spanTimeInputToSeconds)(endTime) || undefined,\n    status: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.getStatusMessage)(status), // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    measurements: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_27__.timedEventsToMeasurements)(span.events),\n    links: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.convertSpanLinksForEnvelope)(links),\n  };\n\n  spans.push(spanJSON);\n\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n  });\n}\n\nfunction getSpanData(span)\n\n {\n  const { op: definedOp, source: definedSource, origin } = parseSpan(span);\n  const { op: inferredOp, description, source: inferredSource, data: inferredData } = parseSpanDescription(span);\n\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n\n  const data = { ...inferredData, ...getData(span) };\n\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data,\n  };\n}\n\n/**\n * Remove custom `sentry.` attributes we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data) {\n  const cleanedData = { ...data };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  delete cleanedData[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\n\nfunction getData(span) {\n  const attributes = span.attributes;\n  const data = {};\n\n  if (span.kind !== _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind.INTERNAL) {\n    data['otel.kind'] = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute ;\n  }\n\n  const requestData = getRequestSpanData(span);\n\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n\n  return data;\n}\n\nfunction onSpanStart(span, parentContext) {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(parentContext);\n\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_16__.addChildSpanToSpan)(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan?.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.ROOT_CONTEXT) {\n    scopes = {\n      scope: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_45__.getDefaultCurrentScope)(),\n      isolationScope: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_45__.getDefaultIsolationScope)(),\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_44__.setCapturedScopesOnSpan)(span, scopes.scope, scopes.isolationScope);\n  }\n\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_47__.logSpanStart)(span);\n\n  const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getClient)();\n  client?.emit('spanStart', span);\n}\n\nfunction onSpanEnd(span) {\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_47__.logSpanEnd)(span);\n\n  const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getClient)();\n  client?.emit('spanEnd', span);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nclass SentrySpanProcessor  {\n\n   constructor(options) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async forceFlush() {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async shutdown() {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   onStart(span, parentContext) {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n   onEnd(span) {\n    onSpanEnd(span);\n\n    this._exporter.export(span);\n  }\n}\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nclass SentrySampler  {\n\n   constructor(client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n   shouldSample(\n    context,\n    traceId,\n    spanName,\n    spanKind,\n    spanAttributes,\n    _links,\n  ) {\n    const options = this._client.getOptions();\n\n    const parentSpan = getValidSpan(context);\n    const parentContext = parentSpan?.spanContext();\n\n    if (!(0,_sentry_core__WEBPACK_IMPORTED_MODULE_38__.hasSpansEnabled)(options)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[SEMATTRS_HTTP_METHOD] || spanAttributes[ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || parentContext?.isRemote)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n    const isRootSpan = !parentSpan || parentContext?.isRemote;\n\n    // We only sample based on parameters (like tracesSampleRate or tracesSampler) for root spans (which is done in sampleSpan).\n    // Non-root-spans simply inherit the sampling decision from their parent.\n    if (!isRootSpan) {\n      return wrapSamplingDecision({\n        decision: parentSampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n      });\n    }\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op,\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes,\n    };\n\n    if (op) {\n      mergedAttributes[_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n\n    const mutableSamplingDecision = { decision: true };\n    this._client.emit(\n      'beforeSampling',\n      {\n        spanAttributes: mergedAttributes,\n        spanName: inferredSpanName,\n        parentSampled: parentSampled,\n        parentContext: parentContext,\n      },\n      mutableSamplingDecision,\n    );\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const { isolationScope } = getScopesFromContext(context) ?? {};\n\n    const dscString = parentContext?.traceState ? parentContext.traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n    const dsc = dscString ? (0,_sentry_core__WEBPACK_IMPORTED_MODULE_37__.baggageHeaderToDynamicSamplingContext)(dscString) : undefined;\n\n    const sampleRand = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_48__.parseSampleRate)(dsc?.sample_rand) ?? Math.random();\n\n    const [sampled, sampleRate, localSampleRateWasApplied] = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_49__.sampleSpan)(\n      options,\n      {\n        name: inferredSpanName,\n        attributes: mergedAttributes,\n        normalizedRequest: isolationScope?.getScopeData().sdkProcessingMetadata.normalizedRequest,\n        parentSampled,\n        parentSampleRate: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_48__.parseSampleRate)(dsc?.sample_rate),\n      },\n      sampleRand,\n    );\n\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD$1 && _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n\n      return wrapSamplingDecision({\n        decision: SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: 0, // we don't want to sample anything in the downstream trace either\n      });\n    }\n\n    if (\n      !sampled &&\n      // We check for `parentSampled === undefined` because we only want to record client reports for spans that are trace roots (ie. when there was incoming trace)\n      parentSampled === undefined\n    ) {\n      DEBUG_BUILD$1 && _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n      this._client.recordDroppedEvent('sample_rate', 'transaction');\n    }\n\n    return {\n      ...wrapSamplingDecision({\n        decision: sampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: localSampleRateWasApplied ? sampleRate : undefined,\n      }),\n      attributes: {\n        // We set the sample rate on the span when a local sample rate was applied to better understand how traces were sampled in Sentry\n        [_sentry_core__WEBPACK_IMPORTED_MODULE_1__.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: localSampleRateWasApplied ? sampleRate : undefined,\n      },\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n   toString() {\n    return 'SentrySampler';\n  }\n}\n\nfunction getParentSampled(parentSpan, traceId, spanName) {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if ((0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.isSpanContextValid)(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getSamplingDecision(parentSpan.spanContext());\n      DEBUG_BUILD$1 &&\n        _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD$1 && _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nfunction wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes,\n  sampleRand,\n  downstreamTraceSampleRate,\n}\n\n) {\n  let traceState = getBaseTraceState(context, spanAttributes);\n\n  // We will override the propagated sample rate downstream when\n  // - the tracesSampleRate is applied\n  // - the tracesSampler is invoked\n  // Since unsampled OTEL spans (NonRecordingSpans) cannot hold attributes we need to store this on the (trace)context.\n  if (downstreamTraceSampleRate !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RATE, `${downstreamTraceSampleRate}`);\n  }\n\n  if (sampleRand !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RAND, `${sampleRand}`);\n  }\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return { decision: SamplingDecision.NOT_RECORD, traceState };\n  }\n\n  if (decision === SamplingDecision.NOT_RECORD) {\n    return { decision, traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') };\n  }\n\n  return { decision, traceState };\n}\n\nfunction getBaseTraceState(context, spanAttributes) {\n  const parentSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(context);\n  const parentContext = parentSpan?.spanContext();\n\n  let traceState = parentContext?.traceState || new TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[SEMATTRS_HTTP_URL] || spanAttributes[ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n\n  return traceState;\n}\n\n/**\n * If the active span is invalid, we want to ignore it as parent.\n * This aligns with how otel tracers and default samplers handle these cases.\n */\nfunction getValidSpan(context) {\n  const span = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.getSpan(context);\n  return span && (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.isSpanContextValid)(span.spanContext()) ? span : undefined;\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\nconst INTEGRATION_NAME = 'WinterCGFetch';\n\nconst HAS_CLIENT_MAP = new WeakMap();\n\nconst _winterCGFetch = ((options = {}) => {\n  const breadcrumbs = options.breadcrumbs === undefined ? true : options.breadcrumbs;\n  const shouldCreateSpanForRequest = options.shouldCreateSpanForRequest;\n\n  const _createSpanUrlMap = new _sentry_core__WEBPACK_IMPORTED_MODULE_39__.LRUMap(100);\n  const _headersUrlMap = new _sentry_core__WEBPACK_IMPORTED_MODULE_39__.LRUMap(100);\n\n  const spans = {};\n\n  /** Decides whether to attach trace data to the outgoing fetch request */\n  function _shouldAttachTraceData(url) {\n    const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getClient)();\n\n    if (!client) {\n      return false;\n    }\n\n    const clientOptions = client.getOptions();\n\n    if (clientOptions.tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _headersUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_42__.stringMatchesSomePattern)(url, clientOptions.tracePropagationTargets);\n    _headersUrlMap.set(url, decision);\n    return decision;\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n  function _shouldCreateSpan(url) {\n    if (shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = shouldCreateSpanForRequest(url);\n    _createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      (0,_sentry_core__WEBPACK_IMPORTED_MODULE_50__.addFetchInstrumentationHandler)(handlerData => {\n        const client = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getClient)();\n        if (!client || !HAS_CLIENT_MAP.get(client)) {\n          return;\n        }\n\n        if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_51__.isSentryRequestUrl)(handlerData.fetchData.url, client)) {\n          return;\n        }\n\n        (0,_sentry_core__WEBPACK_IMPORTED_MODULE_52__.instrumentFetchRequest)(\n          handlerData,\n          _shouldCreateSpan,\n          _shouldAttachTraceData,\n          spans,\n          'auto.http.wintercg_fetch',\n        );\n\n        if (breadcrumbs) {\n          createBreadcrumb(handlerData);\n        }\n      });\n    },\n    setup(client) {\n      HAS_CLIENT_MAP.set(client, true);\n    },\n  };\n}) ;\n\n/**\n * Creates spans and attaches tracing headers to fetch requests on WinterCG runtimes.\n */\nconst winterCGFetchIntegration = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.defineIntegration)(_winterCGFetch);\n\nfunction createBreadcrumb(handlerData) {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n\n  const breadcrumbData = {\n    method: handlerData.fetchData.method,\n    url: handlerData.fetchData.url,\n  };\n\n  if (handlerData.error) {\n    const hint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addBreadcrumb)(\n      {\n        category: 'fetch',\n        data: breadcrumbData,\n        level: 'error',\n        type: 'http',\n      },\n      hint,\n    );\n  } else {\n    const response = handlerData.response ;\n\n    breadcrumbData.request_body_size = handlerData.fetchData.request_body_size;\n    breadcrumbData.response_body_size = handlerData.fetchData.response_body_size;\n    breadcrumbData.status_code = response?.status;\n\n    const hint = {\n      input: handlerData.args,\n      response,\n      startTimestamp,\n      endTimestamp,\n    };\n    const level = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_53__.getBreadcrumbLogLevelFromHttpStatusCode)(breadcrumbData.status_code);\n\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_3__.addBreadcrumb)(\n      {\n        category: 'fetch',\n        data: breadcrumbData,\n        type: 'http',\n        level,\n      },\n      hint,\n    );\n  }\n}\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * This is a modified promise buffer that collects tasks until drain is called.\n * We need this in the edge runtime because edge function invocations may not share I/O objects, like fetch requests\n * and responses, and the normal PromiseBuffer inherently buffers stuff inbetween incoming requests.\n *\n * A limitation we need to be aware of is that DEFAULT_TRANSPORT_BUFFER_SIZE is the maximum amount of payloads the\n * SDK can send for a given edge function invocation.\n */\nclass IsolatedPromiseBuffer {\n  // We just have this field because the promise buffer interface requires it.\n  // If we ever remove it from the interface we should also remove it here.\n\n   constructor(_bufferSize = DEFAULT_TRANSPORT_BUFFER_SIZE) {\n    this.$ = [];\n    this._taskProducers = [];\n    this._bufferSize = _bufferSize;\n  }\n\n  /**\n   * @inheritdoc\n   */\n   add(taskProducer) {\n    if (this._taskProducers.length >= this._bufferSize) {\n      return Promise.reject(_sentry_core__WEBPACK_IMPORTED_MODULE_54__.SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    this._taskProducers.push(taskProducer);\n    return Promise.resolve({});\n  }\n\n  /**\n   * @inheritdoc\n   */\n   drain(timeout) {\n    const oldTaskProducers = [...this._taskProducers];\n    this._taskProducers = [];\n\n    return new Promise(resolve => {\n      const timer = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // This cannot reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.all(\n        oldTaskProducers.map(taskProducer =>\n          taskProducer().then(null, () => {\n            // catch all failed requests\n          }),\n        ),\n      ).then(() => {\n        // resolve to true if all fetch requests settled\n        clearTimeout(timer);\n        resolve(true);\n      });\n    });\n  }\n}\n\n/**\n * Creates a Transport that uses the Edge Runtimes native fetch API to send events to Sentry.\n */\nfunction makeEdgeTransport(options) {\n  function makeRequest(request) {\n    const requestOptions = {\n      body: request.body,\n      method: 'POST',\n      headers: options.headers,\n      ...options.fetchOptions,\n    };\n\n    return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_10__.suppressTracing)(() => {\n      return fetch(options.url, requestOptions).then(response => {\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    });\n  }\n\n  return (0,_sentry_core__WEBPACK_IMPORTED_MODULE_11__.createTransport)(options, makeRequest, new IsolatedPromiseBuffer(options.bufferSize));\n}\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nfunction getVercelEnv(isClient) {\n  const vercelEnvVar = process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n\nconst ADD_LISTENER_METHODS = [\n  'addListener' ,\n  'on' ,\n  'once' ,\n  'prependListener' ,\n  'prependOnceListener' ,\n];\n\nclass AbstractAsyncHooksContextManager  {constructor() { AbstractAsyncHooksContextManager.prototype.__init.call(this);AbstractAsyncHooksContextManager.prototype.__init2.call(this); }\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind(context, target) {\n    if (typeof target === 'object' && target !== null && 'on' in target) {\n      return this._bindEventEmitter(context, target ) ;\n    }\n\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n   _bindFunction(context, target) {\n    const manager = this;\n    const contextWrapper = function ( ...args) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    /**\n     * It isn't possible to tell Typescript that contextWrapper is the same as T\n     * so we forced to cast as any here.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return contextWrapper ;\n  }\n\n  /**\n   * By default, EventEmitter call their callback with their context, which we do\n   * not want, instead we will bind a specific context to all callbacks that\n   * go through it.\n   * @param context the context we want to bind\n   * @param ee EventEmitter an instance of EventEmitter to patch\n   */\n   _bindEventEmitter(context, ee) {\n    const map = this._getPatchMap(ee);\n    if (map !== undefined) return ee;\n    this._createPatchMap(ee);\n\n    // patch methods that add a listener to propagate context\n    ADD_LISTENER_METHODS.forEach(methodName => {\n      if (ee[methodName] === undefined) return;\n      ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n    });\n    // patch methods that remove a listener\n    if (typeof ee.removeListener === 'function') {\n      ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n    }\n    if (typeof ee.off === 'function') {\n      ee.off = this._patchRemoveListener(ee, ee.off);\n    }\n    // patch method that remove all listeners\n    if (typeof ee.removeAllListeners === 'function') {\n      ee.removeAllListeners = this._patchRemoveAllListeners(ee, ee.removeAllListeners);\n    }\n    return ee;\n  }\n\n  /**\n   * Patch methods that remove a given listener so that we match the \"patched\"\n   * version of that listener (the one that propagate context).\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n   _patchRemoveListener(ee, original) {\n    const contextManager = this;\n    return function ( event, listener) {\n      const events = contextManager._getPatchMap(ee)?.[event];\n      if (events === undefined) {\n        return original.call(this, event, listener);\n      }\n      const patchedListener = events.get(listener);\n      return original.call(this, event, patchedListener || listener);\n    };\n  }\n\n  /**\n   * Patch methods that remove all listeners so we remove our\n   * internal references for a given event.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n   _patchRemoveAllListeners(ee, original) {\n    const contextManager = this;\n    return function ( event) {\n      const map = contextManager._getPatchMap(ee);\n      if (map !== undefined) {\n        if (arguments.length === 0) {\n          contextManager._createPatchMap(ee);\n        } else if (map[event] !== undefined) {\n          delete map[event];\n        }\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Patch methods on an event emitter instance that can add listeners so we\n   * can force them to propagate a given context.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   * @param [context] context to propagate when calling listeners\n   */\n   _patchAddListener(ee, original, context) {\n    const contextManager = this;\n    return function ( event, listener) {\n      /**\n       * This check is required to prevent double-wrapping the listener.\n       * The implementation for ee.once wraps the listener and calls ee.on.\n       * Without this check, we would wrap that wrapped listener.\n       * This causes an issue because ee.removeListener depends on the onceWrapper\n       * to properly remove the listener. If we wrap their wrapper, we break\n       * that detection.\n       */\n      if (contextManager._wrapped) {\n        return original.call(this, event, listener);\n      }\n      let map = contextManager._getPatchMap(ee);\n      if (map === undefined) {\n        map = contextManager._createPatchMap(ee);\n      }\n      let listeners = map[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        map[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n\n      /**\n       * See comment at the start of this function for the explanation of this property.\n       */\n      contextManager._wrapped = true;\n      try {\n        return original.call(this, event, patchedListener);\n      } finally {\n        contextManager._wrapped = false;\n      }\n    };\n  }\n\n   _createPatchMap(ee) {\n    const map = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ee )[this._kOtListeners] = map;\n    return map;\n  }\n   _getPatchMap(ee) {\n    return (ee )[this._kOtListeners];\n  }\n\n    __init() {this._kOtListeners = Symbol('OtListeners');}\n   __init2() {this._wrapped = false;}\n}\n\nclass AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager {\n\n  constructor() {\n    super();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    const MaybeGlobalAsyncLocalStorageConstructor = (_sentry_core__WEBPACK_IMPORTED_MODULE_55__.GLOBAL_OBJ ).AsyncLocalStorage;\n\n    if (!MaybeGlobalAsyncLocalStorageConstructor) {\n      DEBUG_BUILD &&\n        _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.warn(\n          \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n        );\n\n      // @ts-expect-error Vendored type shenanigans\n      this._asyncLocalStorage = {\n        getStore() {\n          return undefined;\n        },\n        run(_store, callback, ...args) {\n          return callback.apply(this, args);\n        },\n        disable() {\n          // noop\n        },\n      };\n    } else {\n      this._asyncLocalStorage = new MaybeGlobalAsyncLocalStorageConstructor();\n    }\n  }\n\n  active() {\n    return this._asyncLocalStorage.getStore() ?? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.ROOT_CONTEXT;\n  }\n\n  with(\n    context,\n    fn,\n    thisArg,\n    ...args\n  ) {\n    const cb = thisArg == null ? fn : fn.bind(thisArg);\n    return this._asyncLocalStorage.run(context, cb , ...args);\n  }\n\n  enable() {\n    return this;\n  }\n\n  disable() {\n    this._asyncLocalStorage.disable();\n    return this;\n  }\n}\n\nconst nodeStackParser = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_56__.createStackParser)((0,_sentry_core__WEBPACK_IMPORTED_MODULE_57__.nodeStackLineParser)());\n\n/** Get the default integrations for the browser SDK. */\nfunction getDefaultIntegrations(options) {\n  return [\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_12__.dedupeIntegration)(),\n    // TODO(v10): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_13__.inboundFiltersIntegration)(),\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_15__.functionToStringIntegration)(),\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_22__.linkedErrorsIntegration)(),\n    winterCGFetchIntegration(),\n    (0,_sentry_core__WEBPACK_IMPORTED_MODULE_8__.consoleIntegration)(),\n    // TODO(v10): integration can be included - but integration should not add IP address etc\n    ...(options.sendDefaultPii ? [(0,_sentry_core__WEBPACK_IMPORTED_MODULE_24__.requestDataIntegration)()] : []),\n  ];\n}\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nfunction init(options = {}) {\n  setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getCurrentScope)();\n  scope.update(options.initialScope);\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations(options);\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    const tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const detectedRelease = getSentryRelease();\n    if (detectedRelease !== undefined) {\n      options.release = detectedRelease;\n    }\n  }\n\n  options.environment =\n    options.environment || process.env.SENTRY_ENVIRONMENT || getVercelEnv() || \"development\";\n\n  const client = new VercelEdgeClient({\n    ...options,\n    stackParser: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_56__.stackParserFromStackParserOptions)(options.stackParser || nodeStackParser),\n    integrations: (0,_sentry_core__WEBPACK_IMPORTED_MODULE_5__.getIntegrationsToSetup)(options),\n    transport: options.transport || makeEdgeTransport,\n  });\n  // The client is on the current scope, from where it generally is inherited\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_17__.getCurrentScope)().setClient(client);\n\n  client.init();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    setupOtel(client);\n    validateOpenTelemetrySetup();\n  }\n\n  enhanceDscWithOpenTelemetryRootSpanName(client);\n  setupEventContextTrace(client);\n\n  return client;\n}\n\nfunction validateOpenTelemetrySetup() {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = openTelemetrySetupCheck();\n\n  const required = ['SentryContextManager', 'SentryPropagator'];\n\n  if ((0,_sentry_core__WEBPACK_IMPORTED_MODULE_38__.hasSpansEnabled)()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    _sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\n// exported for tests\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction setupOtel(client) {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  // Create and configure NodeTracerProvider\n  const provider = new BasicTracerProvider({\n    sampler: new SentrySampler(client),\n    resource: new Resource({\n      [ATTR_SERVICE_NAME]: 'edge',\n      // eslint-disable-next-line deprecation/deprecation\n      [SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [ATTR_SERVICE_VERSION]: _sentry_core__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new SentrySpanProcessor({\n        timeout: client.getOptions().maxSpanWaitDuration,\n      }),\n    ],\n  });\n\n  const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n\n  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.trace.setGlobalTracerProvider(provider);\n  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.propagation.setGlobalPropagator(new SentryPropagator());\n  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.context.setGlobalContextManager(new SentryContextManager());\n\n  client.traceProvider = provider;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger() {\n  const otelLogger = new Proxy(_sentry_core__WEBPACK_IMPORTED_MODULE_40__.logger , {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.disable();\n  _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.diag.setLogger(otelLogger, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_32__.DiagLogLevel.DEBUG);\n}\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (_sentry_core__WEBPACK_IMPORTED_MODULE_55__.GLOBAL_OBJ.SENTRY_RELEASE?.id) {\n    return _sentry_core__WEBPACK_IMPORTED_MODULE_55__.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Railway - https://docs.railway.app/reference/variables#git-variables\n    process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/**\n * Capture a log with the given level.\n *\n * @param level - The level of the log.\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n * @param severityNumber - The severity number of the log.\n */\nfunction captureLog(\n  level,\n  message,\n  attributes,\n  severityNumber,\n) {\n  (0,_sentry_core__WEBPACK_IMPORTED_MODULE_58__._INTERNAL_captureLog)({ level, message, attributes, severityNumber });\n}\n\n/**\n * @summary Capture a log with the `trace` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { userId: 100, route: '/dashboard' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.trace('User clicked submit button', {\n *   buttonId: 'submit-form',\n *   formId: 'user-profile',\n *   timestamp: Date.now()\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.trace(Sentry.logger.fmt`User ${user} navigated to ${page}`, {\n *   userId: '123',\n *   sessionId: 'abc-xyz'\n * });\n * ```\n */\nfunction trace(message, attributes) {\n  captureLog('trace', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `debug` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { component: 'Header', state: 'loading' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.debug('Component mounted', {\n *   component: 'UserProfile',\n *   props: { userId: 123 },\n *   renderTime: 150\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.debug(Sentry.logger.fmt`API request to ${endpoint} failed`, {\n *   statusCode: 404,\n *   requestId: 'req-123',\n *   duration: 250\n * });\n * ```\n */\nfunction debug(message, attributes) {\n  captureLog('debug', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `info` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { feature: 'checkout', status: 'completed' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.info('User completed checkout', {\n *   orderId: 'order-123',\n *   amount: 99.99,\n *   paymentMethod: 'credit_card'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.info(Sentry.logger.fmt`User ${user} updated profile picture`, {\n *   userId: 'user-123',\n *   imageSize: '2.5MB',\n *   timestamp: Date.now()\n * });\n * ```\n */\nfunction info(message, attributes) {\n  captureLog('info', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `warn` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { browser: 'Chrome', version: '91.0' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.warn('Browser compatibility issue detected', {\n *   browser: 'Safari',\n *   version: '14.0',\n *   feature: 'WebRTC',\n *   fallback: 'enabled'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.warn(Sentry.logger.fmt`API endpoint ${endpoint} is deprecated`, {\n *   recommendedEndpoint: '/api/v2/users',\n *   sunsetDate: '2024-12-31',\n *   clientVersion: '1.2.3'\n * });\n * ```\n */\nfunction warn(message, attributes) {\n  captureLog('warn', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `error` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { error: 'NetworkError', url: '/api/data' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.error('Failed to load user data', {\n *   error: 'NetworkError',\n *   url: '/api/users/123',\n *   statusCode: 500,\n *   retryCount: 3\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.error(Sentry.logger.fmt`Payment processing failed for order ${orderId}`, {\n *   error: 'InsufficientFunds',\n *   amount: 100.00,\n *   currency: 'USD',\n *   userId: 'user-456'\n * });\n * ```\n */\nfunction error(message, attributes) {\n  captureLog('error', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `fatal` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { appState: 'corrupted', sessionId: 'abc-123' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.fatal('Application state corrupted', {\n *   lastKnownState: 'authenticated',\n *   sessionId: 'session-123',\n *   timestamp: Date.now(),\n *   recoveryAttempted: true\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.fatal(Sentry.logger.fmt`Critical system failure in ${service}`, {\n *   service: 'payment-processor',\n *   errorCode: 'CRITICAL_FAILURE',\n *   affectedUsers: 150,\n *   timestamp: Date.now()\n * });\n * ```\n */\nfunction fatal(message, attributes) {\n  captureLog('fatal', message, attributes);\n}\n\nconst exports = /*#__PURE__*/Object.defineProperty({\n  __proto__: null,\n  debug,\n  error,\n  fatal,\n  fmt: _sentry_core__WEBPACK_IMPORTED_MODULE_59__.fmt,\n  info,\n  trace,\n  warn\n}, Symbol.toStringTag, { value: 'Module' });\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sentry/vercel-edge/build/esm/index.js\n");

/***/ }),

/***/ "./node_modules/@swc/helpers/esm/_interop_require_default.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_interop_require_default.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _interop_require_default),\n/* harmony export */   _interop_require_default: () => (/* binding */ _interop_require_default)\n/* harmony export */ });\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9faW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQLDJDQUEyQztBQUMzQztBQUN5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9faW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuanM/MGY1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9O1xufVxuZXhwb3J0IHsgX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0IGFzIF8gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/esm/_interop_require_default.js\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/instrumentation.ts"));
/******/ (_ENTRIES = typeof _ENTRIES === "undefined" ? {} : _ENTRIES).middleware_instrumentation = __webpack_exports__;
/******/ }
]);
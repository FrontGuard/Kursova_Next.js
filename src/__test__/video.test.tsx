import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import VideoGalleryPage from '../app/video/page';
import { useSession } from 'next-auth/react';
import { prismaMock } from '../../prisma.singelton';

// Mock next/link
jest.mock('next/link', () => ({
  __esModule: true,
  default: ({ children, href }: { children: React.ReactNode; href: string }) => (
    <a href={href}>{children}</a>
  ),
}));

// Mock next/image
jest.mock('next/image', () => ({
  __esModule: true,
  default: ({ src, alt, width, height, className }: { src: string; alt: string; width: number; height: number; className?: string }) => (
    <img src={src} alt={alt} width={width} height={height} className={className} />
  ),
}));

// Mock next-auth/react
jest.mock('next-auth/react', () => ({
  useSession: jest.fn(),
}));

// Mock the global fetch API
global.fetch = jest.fn();

const mockVideos = [
  { id: '1', title: '–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ', thumbnail: '/thumb1.jpg', user: { name: '–ê–≤—Ç–æ—Ä 1' }, createdAt: '2023-01-01T10:00:00.000Z', _count: { likes: 5 } },
  { id: '2', title: '–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ', thumbnail: null, user: { name: '–ê–≤—Ç–æ—Ä 2' }, createdAt: '2023-01-05T12:00:00.000Z', _count: { likes: 10 } },
  { id: '3', title: '–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ', thumbnail: '/thumb3.jpg', user: { name: '–ê–¥–º—ñ–Ω' }, createdAt: '2022-12-20T08:00:00.000Z', _count: { likes: 2 } },
];

describe('VideoGalleryPage', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    (global.fetch as jest.Mock).mockResolvedValue({
      ok: true,
      json: async () => mockVideos,
    });
    (useSession as jest.Mock).mockReturnValue({ data: null, status: 'unauthenticated' });
  });

  it('renders loading state initially', () => {
    (global.fetch as jest.Mock).mockResolvedValue(new Promise(() => {})); // Never resolves
    render(<VideoGalleryPage />);
    expect(screen.getByText('üé¨ –£—Å—ñ –≤—ñ–¥–µ–æ')).toBeInTheDocument(); // Header should still render
  });

  it('fetches and displays videos on mount', async () => {
    render(<VideoGalleryPage />);

    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalledWith('/api/video');
    });    await waitFor(() => {
      expect(screen.getByText('–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ')).toBeInTheDocument();
      expect(screen.getByText('–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ')).toBeInTheDocument();
      expect(screen.getByText('–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ')).toBeInTheDocument();
      expect(screen.getByText('üë§ –ê–≤—Ç–æ—Ä 1')).toBeInTheDocument();
      expect(screen.getByText('üë§ –ê–≤—Ç–æ—Ä 2')).toBeInTheDocument();
      expect(screen.getByText('üë§ –ê–¥–º—ñ–Ω')).toBeInTheDocument();
      expect(screen.getByAltText('–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ')).toBeInTheDocument();
      expect(screen.getByText('–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è')).toBeInTheDocument();
      expect(screen.getByAltText('–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ')).toBeInTheDocument();
      expect(screen.getByText('01.01.2023')).toBeInTheDocument();
      expect(screen.getByText('05.01.2023')).toBeInTheDocument();
      expect(screen.getByText('20.12.2022')).toBeInTheDocument();
    });
  });

  it('displays "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." if no videos are fetched', async () => {
    (global.fetch as jest.Mock).mockResolvedValue({
      ok: true,
      json: async () => [],
    });
    render(<VideoGalleryPage />);
    await waitFor(() => {
      expect(screen.getByText('–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')).toBeInTheDocument();
    });
  });

  it('filters videos based on search input', async () => {
    render(<VideoGalleryPage />);

    const searchInput = screen.getByPlaceholderText('üîç –ü–æ—à—É–∫ –ø–æ –Ω–∞–∑–≤—ñ...');
    fireEvent.change(searchInput, { target: { value: '–¥—Ä—É–≥–µ' } });

    await waitFor(() => {
      expect(screen.queryByText('–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ')).toBeNull();
      expect(screen.getByText('–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ')).toBeInTheDocument();
      expect(screen.queryByText('–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ')).toBeNull();
    });
  });
  it('sorts videos by date (newest first)', async () => {
    render(<VideoGalleryPage />);

    const sortSelect = screen.getByRole('combobox');
    fireEvent.change(sortSelect, { target: { value: 'date-desc' } });

    await waitFor(() => {
      const videoTitles = screen.getAllByText(/^(–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ|–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ|–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ)$/).map((el) => el.textContent);
      expect(videoTitles).toEqual(['–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ', '–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ', '–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ']);
    });
  });
  it('sorts videos by date (oldest first)', async () => {
    render(<VideoGalleryPage />);

    const sortSelect = screen.getByRole('combobox');
    fireEvent.change(sortSelect, { target: { value: 'date-asc' } });

    await waitFor(() => {
      const videoTitles = screen.getAllByText(/^(–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ|–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ|–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ)$/).map((el) => el.textContent);
      expect(videoTitles).toEqual(['–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ', '–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ', '–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ']);
    });
  });
  it('sorts videos alphabetically (A-–Ø)', async () => {
    render(<VideoGalleryPage />);

    const sortSelect = screen.getByRole('combobox');
    fireEvent.change(sortSelect, { target: { value: 'az' } });

    await waitFor(() => {
      const videoTitles = screen.getAllByText(/^(–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ|–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ|–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ)$/).map((el) => el.textContent);
      expect(videoTitles).toEqual(['–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ', '–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ', '–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ']); // Assuming localeCompare sorts this way
    });
  });
  it('sorts videos alphabetically (–Ø-A)', async () => {
    render(<VideoGalleryPage />);

    const sortSelect = screen.getByRole('combobox');
    fireEvent.change(sortSelect, { target: { value: 'za' } });

    await waitFor(() => {
      const videoTitles = screen.getAllByText(/^(–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ|–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ|–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ)$/).map((el) => el.textContent);
      expect(videoTitles).toEqual(['–¢—Ä–µ—Ç—î –≤—ñ–¥–µ–æ', '–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ', '–î—Ä—É–≥–µ –≤—ñ–¥–µ–æ']); // Assuming localeCompare sorts this way
    });
  });

  it('renders admin button for admin users', async () => {
    (useSession as jest.Mock).mockReturnValue({
      data: { user: { role: 'Admin' } },
      status: 'authenticated',
    });
    render(<VideoGalleryPage />);
    await waitFor(() => {
      expect(screen.getByText('–ê–¥–º—ñ–Ω')).toBeInTheDocument();
      expect(screen.getByRole('link', { name: '–ê–¥–º—ñ–Ω' })).toHaveAttribute('href', '/admin');
    });

    (useSession as jest.Mock).mockReturnValue({
      data: { user: { role: 'administrator' } },
      status: 'authenticated',
    });
    render(<VideoGalleryPage />);
    await waitFor(() => {
      expect(screen.getByText('–ê–¥–º—ñ–Ω')).toBeInTheDocument();
      expect(screen.getByRole('link', { name: '–ê–¥–º—ñ–Ω' })).toHaveAttribute('href', '/admin');
    });
  });

  it('does not render admin button for non-admin users', async () => {
    (useSession as jest.Mock).mockReturnValue({
      data: { user: { role: 'User' } },
      status: 'authenticated',
    });
    render(<VideoGalleryPage />);
    await waitFor(() => {
      expect(screen.queryByText('–ê–¥–º—ñ–Ω')).toBeNull();
    });
  });

  it('handles fetch error', async () => {
    const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
    (global.fetch as jest.Mock).mockRejectedValue(new Error('Failed to fetch'));
    render(<VideoGalleryPage />);

    await waitFor(() => {
      expect(consoleErrorSpy).toHaveBeenCalledWith('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ:', new Error('Failed to fetch'));
      expect(screen.getByText('üé¨ –£—Å—ñ –≤—ñ–¥–µ–æ')).toBeInTheDocument(); // Ensure the page doesn't completely break
    });

    consoleErrorSpy.mockRestore();
  });
});